
Stm32_adc8_sensreader_022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008680  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800878c  0800878c  0001878c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087f4  080087f4  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  080087f4  080087f4  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080087f4  080087f4  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087f4  080087f4  000187f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087f8  080087f8  000187f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  080087fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b8  2000017c  08008978  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001434  08008978  00021434  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea71  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e33  00000000  00000000  0002ec16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  00031a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  00032668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a17f  00000000  00000000  00033118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001025d  00000000  00000000  0004d297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089cf1  00000000  00000000  0005d4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e71e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f3c  00000000  00000000  000e7238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08008774 	.word	0x08008774

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08008774 	.word	0x08008774

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
 void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
  {
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  	if(hadc->Instance == ADC1)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a13      	ldr	r2, [pc, #76]	; (80003c4 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d11f      	bne.n	80003ba <HAL_ADC_ConvCpltCallback+0x52>
  	{

           data[0] = adcbuffer[0];
 800037a:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <HAL_ADC_ConvCpltCallback+0x60>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a13      	ldr	r2, [pc, #76]	; (80003cc <HAL_ADC_ConvCpltCallback+0x64>)
 8000380:	6013      	str	r3, [r2, #0]
 		   data[1] = adcbuffer[1];
 8000382:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <HAL_ADC_ConvCpltCallback+0x60>)
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	4a11      	ldr	r2, [pc, #68]	; (80003cc <HAL_ADC_ConvCpltCallback+0x64>)
 8000388:	6053      	str	r3, [r2, #4]
           data[2] = adcbuffer[2];
 800038a:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <HAL_ADC_ConvCpltCallback+0x60>)
 800038c:	689b      	ldr	r3, [r3, #8]
 800038e:	4a0f      	ldr	r2, [pc, #60]	; (80003cc <HAL_ADC_ConvCpltCallback+0x64>)
 8000390:	6093      	str	r3, [r2, #8]
 		   data[3] = adcbuffer[3];
 8000392:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <HAL_ADC_ConvCpltCallback+0x60>)
 8000394:	68db      	ldr	r3, [r3, #12]
 8000396:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <HAL_ADC_ConvCpltCallback+0x64>)
 8000398:	60d3      	str	r3, [r2, #12]
     	   data[4] = adcbuffer[4];
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <HAL_ADC_ConvCpltCallback+0x60>)
 800039c:	691b      	ldr	r3, [r3, #16]
 800039e:	4a0b      	ldr	r2, [pc, #44]	; (80003cc <HAL_ADC_ConvCpltCallback+0x64>)
 80003a0:	6113      	str	r3, [r2, #16]
 		   data[5] = adcbuffer[5];
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <HAL_ADC_ConvCpltCallback+0x60>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a09      	ldr	r2, [pc, #36]	; (80003cc <HAL_ADC_ConvCpltCallback+0x64>)
 80003a8:	6153      	str	r3, [r2, #20]
 		   data[6] = adcbuffer[6];
 80003aa:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <HAL_ADC_ConvCpltCallback+0x60>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	4a07      	ldr	r2, [pc, #28]	; (80003cc <HAL_ADC_ConvCpltCallback+0x64>)
 80003b0:	6193      	str	r3, [r2, #24]
 		   data[7] = adcbuffer[7];
 80003b2:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <HAL_ADC_ConvCpltCallback+0x60>)
 80003b4:	69db      	ldr	r3, [r3, #28]
 80003b6:	4a05      	ldr	r2, [pc, #20]	; (80003cc <HAL_ADC_ConvCpltCallback+0x64>)
 80003b8:	61d3      	str	r3, [r2, #28]


  	}
  }
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	40012400 	.word	0x40012400
 80003c8:	200001b8 	.word	0x200001b8
 80003cc:	20000198 	.word	0x20000198

080003d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b08a      	sub	sp, #40	; 0x28
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d6:	f000 fb4b 	bl	8000a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003da:	f000 f8d3 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003de:	f000 f9ef 	bl	80007c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80003e2:	f000 f9cf 	bl	8000784 <MX_DMA_Init>
  MX_ADC1_Init();
 80003e6:	f000 f92b 	bl	8000640 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80003ea:	f007 fcf3 	bl	8007dd4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adcbuffer, 8);
 80003ee:	2208      	movs	r2, #8
 80003f0:	495f      	ldr	r1, [pc, #380]	; (8000570 <main+0x1a0>)
 80003f2:	4860      	ldr	r0, [pc, #384]	; (8000574 <main+0x1a4>)
 80003f4:	f000 fc76 	bl	8000ce4 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		package.channels[0] = data[0];
 80003f8:	4b5f      	ldr	r3, [pc, #380]	; (8000578 <main+0x1a8>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff ff5b 	bl	80002b8 <__aeabi_ui2f>
 8000402:	4603      	mov	r3, r0
 8000404:	4a5d      	ldr	r2, [pc, #372]	; (800057c <main+0x1ac>)
 8000406:	6013      	str	r3, [r2, #0]
		package.channels[1] = data[1];
 8000408:	4b5b      	ldr	r3, [pc, #364]	; (8000578 <main+0x1a8>)
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	4618      	mov	r0, r3
 800040e:	f7ff ff53 	bl	80002b8 <__aeabi_ui2f>
 8000412:	4603      	mov	r3, r0
 8000414:	4a59      	ldr	r2, [pc, #356]	; (800057c <main+0x1ac>)
 8000416:	6053      	str	r3, [r2, #4]
		package.channels[2] = data[2];
 8000418:	4b57      	ldr	r3, [pc, #348]	; (8000578 <main+0x1a8>)
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff ff4b 	bl	80002b8 <__aeabi_ui2f>
 8000422:	4603      	mov	r3, r0
 8000424:	4a55      	ldr	r2, [pc, #340]	; (800057c <main+0x1ac>)
 8000426:	6093      	str	r3, [r2, #8]
		package.channels[3] = data[3];
 8000428:	4b53      	ldr	r3, [pc, #332]	; (8000578 <main+0x1a8>)
 800042a:	68db      	ldr	r3, [r3, #12]
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff43 	bl	80002b8 <__aeabi_ui2f>
 8000432:	4603      	mov	r3, r0
 8000434:	4a51      	ldr	r2, [pc, #324]	; (800057c <main+0x1ac>)
 8000436:	60d3      	str	r3, [r2, #12]
		package.channels[4] = data[4];
 8000438:	4b4f      	ldr	r3, [pc, #316]	; (8000578 <main+0x1a8>)
 800043a:	691b      	ldr	r3, [r3, #16]
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff ff3b 	bl	80002b8 <__aeabi_ui2f>
 8000442:	4603      	mov	r3, r0
 8000444:	4a4d      	ldr	r2, [pc, #308]	; (800057c <main+0x1ac>)
 8000446:	6113      	str	r3, [r2, #16]
		package.channels[5] = data[5];
 8000448:	4b4b      	ldr	r3, [pc, #300]	; (8000578 <main+0x1a8>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ff33 	bl	80002b8 <__aeabi_ui2f>
 8000452:	4603      	mov	r3, r0
 8000454:	4a49      	ldr	r2, [pc, #292]	; (800057c <main+0x1ac>)
 8000456:	6153      	str	r3, [r2, #20]
		package.channels[6] = data[6];
 8000458:	4b47      	ldr	r3, [pc, #284]	; (8000578 <main+0x1a8>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ff2b 	bl	80002b8 <__aeabi_ui2f>
 8000462:	4603      	mov	r3, r0
 8000464:	4a45      	ldr	r2, [pc, #276]	; (800057c <main+0x1ac>)
 8000466:	6193      	str	r3, [r2, #24]
		package.channels[7] = data[7];
 8000468:	4b43      	ldr	r3, [pc, #268]	; (8000578 <main+0x1a8>)
 800046a:	69db      	ldr	r3, [r3, #28]
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff ff23 	bl	80002b8 <__aeabi_ui2f>
 8000472:	4603      	mov	r3, r0
 8000474:	4a41      	ldr	r2, [pc, #260]	; (800057c <main+0x1ac>)
 8000476:	61d3      	str	r3, [r2, #28]



uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 8000478:	2361      	movs	r3, #97	; 0x61
 800047a:	703b      	strb	r3, [r7, #0]
 800047c:	230e      	movs	r3, #14
 800047e:	707b      	strb	r3, [r7, #1]
 8000480:	4b3f      	ldr	r3, [pc, #252]	; (8000580 <main+0x1b0>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	70bb      	strb	r3, [r7, #2]
 8000486:	4b3e      	ldr	r3, [pc, #248]	; (8000580 <main+0x1b0>)
 8000488:	785b      	ldrb	r3, [r3, #1]
 800048a:	70fb      	strb	r3, [r7, #3]
 800048c:	4b3c      	ldr	r3, [pc, #240]	; (8000580 <main+0x1b0>)
 800048e:	789b      	ldrb	r3, [r3, #2]
 8000490:	713b      	strb	r3, [r7, #4]
 8000492:	4b3b      	ldr	r3, [pc, #236]	; (8000580 <main+0x1b0>)
 8000494:	78db      	ldrb	r3, [r3, #3]
 8000496:	717b      	strb	r3, [r7, #5]
,package.bytes[0] ,package.bytes[1] ,package.bytes[2] ,package.bytes[3] ,package.bytes[4] ,package.bytes[5]
 8000498:	4b38      	ldr	r3, [pc, #224]	; (800057c <main+0x1ac>)
 800049a:	781b      	ldrb	r3, [r3, #0]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 800049c:	71bb      	strb	r3, [r7, #6]
,package.bytes[0] ,package.bytes[1] ,package.bytes[2] ,package.bytes[3] ,package.bytes[4] ,package.bytes[5]
 800049e:	4b37      	ldr	r3, [pc, #220]	; (800057c <main+0x1ac>)
 80004a0:	785b      	ldrb	r3, [r3, #1]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 80004a2:	71fb      	strb	r3, [r7, #7]
,package.bytes[0] ,package.bytes[1] ,package.bytes[2] ,package.bytes[3] ,package.bytes[4] ,package.bytes[5]
 80004a4:	4b35      	ldr	r3, [pc, #212]	; (800057c <main+0x1ac>)
 80004a6:	789b      	ldrb	r3, [r3, #2]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 80004a8:	723b      	strb	r3, [r7, #8]
,package.bytes[0] ,package.bytes[1] ,package.bytes[2] ,package.bytes[3] ,package.bytes[4] ,package.bytes[5]
 80004aa:	4b34      	ldr	r3, [pc, #208]	; (800057c <main+0x1ac>)
 80004ac:	78db      	ldrb	r3, [r3, #3]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 80004ae:	727b      	strb	r3, [r7, #9]
,package.bytes[0] ,package.bytes[1] ,package.bytes[2] ,package.bytes[3] ,package.bytes[4] ,package.bytes[5]
 80004b0:	4b32      	ldr	r3, [pc, #200]	; (800057c <main+0x1ac>)
 80004b2:	791b      	ldrb	r3, [r3, #4]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 80004b4:	72bb      	strb	r3, [r7, #10]
,package.bytes[0] ,package.bytes[1] ,package.bytes[2] ,package.bytes[3] ,package.bytes[4] ,package.bytes[5]
 80004b6:	4b31      	ldr	r3, [pc, #196]	; (800057c <main+0x1ac>)
 80004b8:	795b      	ldrb	r3, [r3, #5]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 80004ba:	72fb      	strb	r3, [r7, #11]
,package.bytes[6] ,package.bytes[7] ,package.bytes[8] ,package.bytes[9] ,package.bytes[10],package.bytes[11]
 80004bc:	4b2f      	ldr	r3, [pc, #188]	; (800057c <main+0x1ac>)
 80004be:	799b      	ldrb	r3, [r3, #6]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 80004c0:	733b      	strb	r3, [r7, #12]
,package.bytes[6] ,package.bytes[7] ,package.bytes[8] ,package.bytes[9] ,package.bytes[10],package.bytes[11]
 80004c2:	4b2e      	ldr	r3, [pc, #184]	; (800057c <main+0x1ac>)
 80004c4:	79db      	ldrb	r3, [r3, #7]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 80004c6:	737b      	strb	r3, [r7, #13]
,package.bytes[6] ,package.bytes[7] ,package.bytes[8] ,package.bytes[9] ,package.bytes[10],package.bytes[11]
 80004c8:	4b2c      	ldr	r3, [pc, #176]	; (800057c <main+0x1ac>)
 80004ca:	7a1b      	ldrb	r3, [r3, #8]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 80004cc:	73bb      	strb	r3, [r7, #14]
,package.bytes[6] ,package.bytes[7] ,package.bytes[8] ,package.bytes[9] ,package.bytes[10],package.bytes[11]
 80004ce:	4b2b      	ldr	r3, [pc, #172]	; (800057c <main+0x1ac>)
 80004d0:	7a5b      	ldrb	r3, [r3, #9]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 80004d2:	73fb      	strb	r3, [r7, #15]
,package.bytes[6] ,package.bytes[7] ,package.bytes[8] ,package.bytes[9] ,package.bytes[10],package.bytes[11]
 80004d4:	4b29      	ldr	r3, [pc, #164]	; (800057c <main+0x1ac>)
 80004d6:	7a9b      	ldrb	r3, [r3, #10]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 80004d8:	743b      	strb	r3, [r7, #16]
,package.bytes[6] ,package.bytes[7] ,package.bytes[8] ,package.bytes[9] ,package.bytes[10],package.bytes[11]
 80004da:	4b28      	ldr	r3, [pc, #160]	; (800057c <main+0x1ac>)
 80004dc:	7adb      	ldrb	r3, [r3, #11]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 80004de:	747b      	strb	r3, [r7, #17]
,package.bytes[12],package.bytes[13],package.bytes[14],package.bytes[15],package.bytes[16],package.bytes[17]
 80004e0:	4b26      	ldr	r3, [pc, #152]	; (800057c <main+0x1ac>)
 80004e2:	7b1b      	ldrb	r3, [r3, #12]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 80004e4:	74bb      	strb	r3, [r7, #18]
,package.bytes[12],package.bytes[13],package.bytes[14],package.bytes[15],package.bytes[16],package.bytes[17]
 80004e6:	4b25      	ldr	r3, [pc, #148]	; (800057c <main+0x1ac>)
 80004e8:	7b5b      	ldrb	r3, [r3, #13]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 80004ea:	74fb      	strb	r3, [r7, #19]
,package.bytes[12],package.bytes[13],package.bytes[14],package.bytes[15],package.bytes[16],package.bytes[17]
 80004ec:	4b23      	ldr	r3, [pc, #140]	; (800057c <main+0x1ac>)
 80004ee:	7b9b      	ldrb	r3, [r3, #14]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 80004f0:	753b      	strb	r3, [r7, #20]
,package.bytes[12],package.bytes[13],package.bytes[14],package.bytes[15],package.bytes[16],package.bytes[17]
 80004f2:	4b22      	ldr	r3, [pc, #136]	; (800057c <main+0x1ac>)
 80004f4:	7bdb      	ldrb	r3, [r3, #15]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 80004f6:	757b      	strb	r3, [r7, #21]
,package.bytes[12],package.bytes[13],package.bytes[14],package.bytes[15],package.bytes[16],package.bytes[17]
 80004f8:	4b20      	ldr	r3, [pc, #128]	; (800057c <main+0x1ac>)
 80004fa:	7c1b      	ldrb	r3, [r3, #16]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 80004fc:	75bb      	strb	r3, [r7, #22]
,package.bytes[12],package.bytes[13],package.bytes[14],package.bytes[15],package.bytes[16],package.bytes[17]
 80004fe:	4b1f      	ldr	r3, [pc, #124]	; (800057c <main+0x1ac>)
 8000500:	7c5b      	ldrb	r3, [r3, #17]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 8000502:	75fb      	strb	r3, [r7, #23]
,package.bytes[18],package.bytes[19],package.bytes[20],package.bytes[21],package.bytes[22],package.bytes[23]
 8000504:	4b1d      	ldr	r3, [pc, #116]	; (800057c <main+0x1ac>)
 8000506:	7c9b      	ldrb	r3, [r3, #18]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 8000508:	763b      	strb	r3, [r7, #24]
,package.bytes[18],package.bytes[19],package.bytes[20],package.bytes[21],package.bytes[22],package.bytes[23]
 800050a:	4b1c      	ldr	r3, [pc, #112]	; (800057c <main+0x1ac>)
 800050c:	7cdb      	ldrb	r3, [r3, #19]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 800050e:	767b      	strb	r3, [r7, #25]
,package.bytes[18],package.bytes[19],package.bytes[20],package.bytes[21],package.bytes[22],package.bytes[23]
 8000510:	4b1a      	ldr	r3, [pc, #104]	; (800057c <main+0x1ac>)
 8000512:	7d1b      	ldrb	r3, [r3, #20]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 8000514:	76bb      	strb	r3, [r7, #26]
,package.bytes[18],package.bytes[19],package.bytes[20],package.bytes[21],package.bytes[22],package.bytes[23]
 8000516:	4b19      	ldr	r3, [pc, #100]	; (800057c <main+0x1ac>)
 8000518:	7d5b      	ldrb	r3, [r3, #21]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 800051a:	76fb      	strb	r3, [r7, #27]
,package.bytes[18],package.bytes[19],package.bytes[20],package.bytes[21],package.bytes[22],package.bytes[23]
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <main+0x1ac>)
 800051e:	7d9b      	ldrb	r3, [r3, #22]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 8000520:	773b      	strb	r3, [r7, #28]
,package.bytes[18],package.bytes[19],package.bytes[20],package.bytes[21],package.bytes[22],package.bytes[23]
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <main+0x1ac>)
 8000524:	7ddb      	ldrb	r3, [r3, #23]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 8000526:	777b      	strb	r3, [r7, #29]
,package.bytes[24],package.bytes[25],package.bytes[26],package.bytes[27],package.bytes[28],package.bytes[29]
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <main+0x1ac>)
 800052a:	7e1b      	ldrb	r3, [r3, #24]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 800052c:	77bb      	strb	r3, [r7, #30]
,package.bytes[24],package.bytes[25],package.bytes[26],package.bytes[27],package.bytes[28],package.bytes[29]
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <main+0x1ac>)
 8000530:	7e5b      	ldrb	r3, [r3, #25]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 8000532:	77fb      	strb	r3, [r7, #31]
,package.bytes[24],package.bytes[25],package.bytes[26],package.bytes[27],package.bytes[28],package.bytes[29]
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <main+0x1ac>)
 8000536:	7e9b      	ldrb	r3, [r3, #26]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 8000538:	f887 3020 	strb.w	r3, [r7, #32]
,package.bytes[24],package.bytes[25],package.bytes[26],package.bytes[27],package.bytes[28],package.bytes[29]
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <main+0x1ac>)
 800053e:	7edb      	ldrb	r3, [r3, #27]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 8000540:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
,package.bytes[24],package.bytes[25],package.bytes[26],package.bytes[27],package.bytes[28],package.bytes[29]
 8000544:	4b0d      	ldr	r3, [pc, #52]	; (800057c <main+0x1ac>)
 8000546:	7f1b      	ldrb	r3, [r3, #28]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 8000548:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
,package.bytes[24],package.bytes[25],package.bytes[26],package.bytes[27],package.bytes[28],package.bytes[29]
 800054c:	4b0b      	ldr	r3, [pc, #44]	; (800057c <main+0x1ac>)
 800054e:	7f5b      	ldrb	r3, [r3, #29]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 8000550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
,package.bytes[30],package.bytes[31]};
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <main+0x1ac>)
 8000556:	7f9b      	ldrb	r3, [r3, #30]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 8000558:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
,package.bytes[30],package.bytes[31]};
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <main+0x1ac>)
 800055e:	7fdb      	ldrb	r3, [r3, #31]
uint8_t usb_data[] = { 0x61, CHANNEL_SIZE ,checkpoint.bytes[0], checkpoint.bytes[1], checkpoint.bytes[2], checkpoint.bytes[3]
 8000560:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

CDC_Transmit_FS(usb_data, sizeof(usb_data));
 8000564:	463b      	mov	r3, r7
 8000566:	2126      	movs	r1, #38	; 0x26
 8000568:	4618      	mov	r0, r3
 800056a:	f007 fcf1 	bl	8007f50 <CDC_Transmit_FS>
  {
 800056e:	e743      	b.n	80003f8 <main+0x28>
 8000570:	200001b8 	.word	0x200001b8
 8000574:	20000214 	.word	0x20000214
 8000578:	20000198 	.word	0x20000198
 800057c:	200001d8 	.word	0x200001d8
 8000580:	20000210 	.word	0x20000210

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800058e:	2228      	movs	r2, #40	; 0x28
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f008 f8e6 	bl	8008764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b4:	2301      	movs	r3, #1
 80005b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c2:	2301      	movs	r3, #1
 80005c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 f85a 	bl	8003694 <HAL_RCC_OscConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005e6:	f000 f919 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	2302      	movs	r3, #2
 80005f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	2102      	movs	r1, #2
 8000606:	4618      	mov	r0, r3
 8000608:	f003 fac6 	bl	8003b98 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000612:	f000 f903 	bl	800081c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000616:	2312      	movs	r3, #18
 8000618:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800061a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800061e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f003 fc12 	bl	8003e50 <HAL_RCCEx_PeriphCLKConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000632:	f000 f8f3 	bl	800081c <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	; 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000650:	4b4a      	ldr	r3, [pc, #296]	; (800077c <MX_ADC1_Init+0x13c>)
 8000652:	4a4b      	ldr	r2, [pc, #300]	; (8000780 <MX_ADC1_Init+0x140>)
 8000654:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000656:	4b49      	ldr	r3, [pc, #292]	; (800077c <MX_ADC1_Init+0x13c>)
 8000658:	f44f 7280 	mov.w	r2, #256	; 0x100
 800065c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800065e:	4b47      	ldr	r3, [pc, #284]	; (800077c <MX_ADC1_Init+0x13c>)
 8000660:	2201      	movs	r2, #1
 8000662:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000664:	4b45      	ldr	r3, [pc, #276]	; (800077c <MX_ADC1_Init+0x13c>)
 8000666:	2200      	movs	r2, #0
 8000668:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800066a:	4b44      	ldr	r3, [pc, #272]	; (800077c <MX_ADC1_Init+0x13c>)
 800066c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000670:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000672:	4b42      	ldr	r3, [pc, #264]	; (800077c <MX_ADC1_Init+0x13c>)
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000678:	4b40      	ldr	r3, [pc, #256]	; (800077c <MX_ADC1_Init+0x13c>)
 800067a:	2208      	movs	r2, #8
 800067c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800067e:	483f      	ldr	r0, [pc, #252]	; (800077c <MX_ADC1_Init+0x13c>)
 8000680:	f000 fa58 	bl	8000b34 <HAL_ADC_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800068a:	f000 f8c7 	bl	800081c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800068e:	2302      	movs	r3, #2
 8000690:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000692:	2301      	movs	r3, #1
 8000694:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000696:	2305      	movs	r3, #5
 8000698:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	4619      	mov	r1, r3
 800069e:	4837      	ldr	r0, [pc, #220]	; (800077c <MX_ADC1_Init+0x13c>)
 80006a0:	f000 fc10 	bl	8000ec4 <HAL_ADC_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006aa:	f000 f8b7 	bl	800081c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006ae:	2303      	movs	r3, #3
 80006b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4619      	mov	r1, r3
 80006ba:	4830      	ldr	r0, [pc, #192]	; (800077c <MX_ADC1_Init+0x13c>)
 80006bc:	f000 fc02 	bl	8000ec4 <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80006c6:	f000 f8a9 	bl	800081c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006ca:	2304      	movs	r3, #4
 80006cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006ce:	2303      	movs	r3, #3
 80006d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4619      	mov	r1, r3
 80006d6:	4829      	ldr	r0, [pc, #164]	; (800077c <MX_ADC1_Init+0x13c>)
 80006d8:	f000 fbf4 	bl	8000ec4 <HAL_ADC_ConfigChannel>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80006e2:	f000 f89b 	bl	800081c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e6:	2305      	movs	r3, #5
 80006e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006ea:	2304      	movs	r3, #4
 80006ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	4619      	mov	r1, r3
 80006f2:	4822      	ldr	r0, [pc, #136]	; (800077c <MX_ADC1_Init+0x13c>)
 80006f4:	f000 fbe6 	bl	8000ec4 <HAL_ADC_ConfigChannel>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80006fe:	f000 f88d 	bl	800081c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000702:	2306      	movs	r3, #6
 8000704:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000706:	2305      	movs	r3, #5
 8000708:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	4619      	mov	r1, r3
 800070e:	481b      	ldr	r0, [pc, #108]	; (800077c <MX_ADC1_Init+0x13c>)
 8000710:	f000 fbd8 	bl	8000ec4 <HAL_ADC_ConfigChannel>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800071a:	f000 f87f 	bl	800081c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800071e:	2307      	movs	r3, #7
 8000720:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000722:	2306      	movs	r3, #6
 8000724:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	4619      	mov	r1, r3
 800072a:	4814      	ldr	r0, [pc, #80]	; (800077c <MX_ADC1_Init+0x13c>)
 800072c:	f000 fbca 	bl	8000ec4 <HAL_ADC_ConfigChannel>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000736:	f000 f871 	bl	800081c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800073a:	2308      	movs	r3, #8
 800073c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800073e:	2307      	movs	r3, #7
 8000740:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	4619      	mov	r1, r3
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_ADC1_Init+0x13c>)
 8000748:	f000 fbbc 	bl	8000ec4 <HAL_ADC_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000752:	f000 f863 	bl	800081c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000756:	2309      	movs	r3, #9
 8000758:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800075a:	2308      	movs	r3, #8
 800075c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	4619      	mov	r1, r3
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <MX_ADC1_Init+0x13c>)
 8000764:	f000 fbae 	bl	8000ec4 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800076e:	f000 f855 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000214 	.word	0x20000214
 8000780:	40012400 	.word	0x40012400

08000784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_DMA_Init+0x38>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <MX_DMA_Init+0x38>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6153      	str	r3, [r2, #20]
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_DMA_Init+0x38>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	200b      	movs	r0, #11
 80007a8:	f000 fe5d 	bl	8001466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007ac:	200b      	movs	r0, #11
 80007ae:	f000 fe76 	bl	800149e <HAL_NVIC_EnableIRQ>

}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_GPIO_Init+0x58>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	4a13      	ldr	r2, [pc, #76]	; (8000818 <MX_GPIO_Init+0x58>)
 80007cc:	f043 0320 	orr.w	r3, r3, #32
 80007d0:	6193      	str	r3, [r2, #24]
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_GPIO_Init+0x58>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f003 0320 	and.w	r3, r3, #32
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_GPIO_Init+0x58>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <MX_GPIO_Init+0x58>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6193      	str	r3, [r2, #24]
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_GPIO_Init+0x58>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_GPIO_Init+0x58>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	4a07      	ldr	r2, [pc, #28]	; (8000818 <MX_GPIO_Init+0x58>)
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	6193      	str	r3, [r2, #24]
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <MX_GPIO_Init+0x58>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	f003 0308 	and.w	r3, r3, #8
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	40021000 	.word	0x40021000

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	e7fe      	b.n	8000824 <Error_Handler+0x8>
	...

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <HAL_MspInit+0x5c>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	4a14      	ldr	r2, [pc, #80]	; (8000884 <HAL_MspInit+0x5c>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6193      	str	r3, [r2, #24]
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_MspInit+0x5c>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <HAL_MspInit+0x5c>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <HAL_MspInit+0x5c>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000850:	61d3      	str	r3, [r2, #28]
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <HAL_MspInit+0x5c>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <HAL_MspInit+0x60>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <HAL_MspInit+0x60>)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	40021000 	.word	0x40021000
 8000888:	40010000 	.word	0x40010000

0800088c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0318 	add.w	r3, r7, #24
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a33      	ldr	r2, [pc, #204]	; (8000974 <HAL_ADC_MspInit+0xe8>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d15f      	bne.n	800096c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008ac:	4b32      	ldr	r3, [pc, #200]	; (8000978 <HAL_ADC_MspInit+0xec>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a31      	ldr	r2, [pc, #196]	; (8000978 <HAL_ADC_MspInit+0xec>)
 80008b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <HAL_ADC_MspInit+0xec>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c4:	4b2c      	ldr	r3, [pc, #176]	; (8000978 <HAL_ADC_MspInit+0xec>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a2b      	ldr	r2, [pc, #172]	; (8000978 <HAL_ADC_MspInit+0xec>)
 80008ca:	f043 0304 	orr.w	r3, r3, #4
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <HAL_ADC_MspInit+0xec>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0304 	and.w	r3, r3, #4
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008dc:	4b26      	ldr	r3, [pc, #152]	; (8000978 <HAL_ADC_MspInit+0xec>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a25      	ldr	r2, [pc, #148]	; (8000978 <HAL_ADC_MspInit+0xec>)
 80008e2:	f043 0308 	orr.w	r3, r3, #8
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <HAL_ADC_MspInit+0xec>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0308 	and.w	r3, r3, #8
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80008f4:	23fc      	movs	r3, #252	; 0xfc
 80008f6:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f8:	2303      	movs	r3, #3
 80008fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 0318 	add.w	r3, r7, #24
 8000900:	4619      	mov	r1, r3
 8000902:	481e      	ldr	r0, [pc, #120]	; (800097c <HAL_ADC_MspInit+0xf0>)
 8000904:	f000 ffd4 	bl	80018b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000908:	2303      	movs	r3, #3
 800090a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090c:	2303      	movs	r3, #3
 800090e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000910:	f107 0318 	add.w	r3, r7, #24
 8000914:	4619      	mov	r1, r3
 8000916:	481a      	ldr	r0, [pc, #104]	; (8000980 <HAL_ADC_MspInit+0xf4>)
 8000918:	f000 ffca 	bl	80018b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800091c:	4b19      	ldr	r3, [pc, #100]	; (8000984 <HAL_ADC_MspInit+0xf8>)
 800091e:	4a1a      	ldr	r2, [pc, #104]	; (8000988 <HAL_ADC_MspInit+0xfc>)
 8000920:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <HAL_ADC_MspInit+0xf8>)
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <HAL_ADC_MspInit+0xf8>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <HAL_ADC_MspInit+0xf8>)
 8000930:	2280      	movs	r2, #128	; 0x80
 8000932:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000934:	4b13      	ldr	r3, [pc, #76]	; (8000984 <HAL_ADC_MspInit+0xf8>)
 8000936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800093a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_ADC_MspInit+0xf8>)
 800093e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000942:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_ADC_MspInit+0xf8>)
 8000946:	2220      	movs	r2, #32
 8000948:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <HAL_ADC_MspInit+0xf8>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <HAL_ADC_MspInit+0xf8>)
 8000952:	f000 fdbf 	bl	80014d4 <HAL_DMA_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 800095c:	f7ff ff5e 	bl	800081c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_ADC_MspInit+0xf8>)
 8000964:	621a      	str	r2, [r3, #32]
 8000966:	4a07      	ldr	r2, [pc, #28]	; (8000984 <HAL_ADC_MspInit+0xf8>)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800096c:	bf00      	nop
 800096e:	3728      	adds	r7, #40	; 0x28
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40012400 	.word	0x40012400
 8000978:	40021000 	.word	0x40021000
 800097c:	40010800 	.word	0x40010800
 8000980:	40010c00 	.word	0x40010c00
 8000984:	20000244 	.word	0x20000244
 8000988:	40020008 	.word	0x40020008

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <NMI_Handler+0x4>

08000992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <MemManage_Handler+0x4>

0800099e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <UsageFault_Handler+0x4>

080009aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr

080009b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr

080009c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr

080009ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d2:	f000 f893 	bl	8000afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <DMA1_Channel1_IRQHandler+0x10>)
 80009e2:	f000 fe31 	bl	8001648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000244 	.word	0x20000244

080009f0 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80009f6:	f001 fa04 	bl	8001e02 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000f24 	.word	0x20000f24

08000a04 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a0a:	f001 f9fa 	bl	8001e02 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000f24 	.word	0x20000f24

08000a18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a24:	f7ff fff8 	bl	8000a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a28:	480b      	ldr	r0, [pc, #44]	; (8000a58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a2a:	490c      	ldr	r1, [pc, #48]	; (8000a5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a2c:	4a0c      	ldr	r2, [pc, #48]	; (8000a60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a09      	ldr	r2, [pc, #36]	; (8000a64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a40:	4c09      	ldr	r4, [pc, #36]	; (8000a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f007 fe65 	bl	800871c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a52:	f7ff fcbd 	bl	80003d0 <main>
  bx lr
 8000a56:	4770      	bx	lr
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000a60:	080087fc 	.word	0x080087fc
  ldr r2, =_sbss
 8000a64:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000a68:	20001434 	.word	0x20001434

08000a6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC1_2_IRQHandler>
	...

08000a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_Init+0x28>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <HAL_Init+0x28>)
 8000a7a:	f043 0310 	orr.w	r3, r3, #16
 8000a7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 fce5 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a86:	200f      	movs	r0, #15
 8000a88:	f000 f808 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8c:	f7ff fecc 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40022000 	.word	0x40022000

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_InitTick+0x54>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_InitTick+0x58>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fcfd 	bl	80014ba <HAL_SYSTICK_Config>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00e      	b.n	8000ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b0f      	cmp	r3, #15
 8000ace:	d80a      	bhi.n	8000ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f000 fcc5 	bl	8001466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000adc:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <HAL_InitTick+0x5c>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e000      	b.n	8000ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <HAL_IncTick+0x1c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_IncTick+0x20>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a03      	ldr	r2, [pc, #12]	; (8000b1c <HAL_IncTick+0x20>)
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000288 	.word	0x20000288

08000b20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b02      	ldr	r3, [pc, #8]	; (8000b30 <HAL_GetTick+0x10>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	20000288 	.word	0x20000288

08000b34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d101      	bne.n	8000b56 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e0be      	b.n	8000cd4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d109      	bne.n	8000b78 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff fe8a 	bl	800088c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f000 faf5 	bl	8001168 <ADC_ConversionStop_Disable>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b86:	f003 0310 	and.w	r3, r3, #16
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f040 8099 	bne.w	8000cc2 <HAL_ADC_Init+0x18e>
 8000b90:	7dfb      	ldrb	r3, [r7, #23]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f040 8095 	bne.w	8000cc2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ba0:	f023 0302 	bic.w	r3, r3, #2
 8000ba4:	f043 0202 	orr.w	r2, r3, #2
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bb4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	7b1b      	ldrb	r3, [r3, #12]
 8000bba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bbc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bcc:	d003      	beq.n	8000bd6 <HAL_ADC_Init+0xa2>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d102      	bne.n	8000bdc <HAL_ADC_Init+0xa8>
 8000bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bda:	e000      	b.n	8000bde <HAL_ADC_Init+0xaa>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	7d1b      	ldrb	r3, [r3, #20]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d119      	bne.n	8000c20 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	7b1b      	ldrb	r3, [r3, #12]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d109      	bne.n	8000c08 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	035a      	lsls	r2, r3, #13
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	e00b      	b.n	8000c20 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0c:	f043 0220 	orr.w	r2, r3, #32
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c18:	f043 0201 	orr.w	r2, r3, #1
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	430a      	orrs	r2, r1
 8000c32:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	689a      	ldr	r2, [r3, #8]
 8000c3a:	4b28      	ldr	r3, [pc, #160]	; (8000cdc <HAL_ADC_Init+0x1a8>)
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	6812      	ldr	r2, [r2, #0]
 8000c42:	68b9      	ldr	r1, [r7, #8]
 8000c44:	430b      	orrs	r3, r1
 8000c46:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c50:	d003      	beq.n	8000c5a <HAL_ADC_Init+0x126>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d104      	bne.n	8000c64 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	051b      	lsls	r3, r3, #20
 8000c62:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	430a      	orrs	r2, r1
 8000c76:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_ADC_Init+0x1ac>)
 8000c80:	4013      	ands	r3, r2
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d10b      	bne.n	8000ca0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c92:	f023 0303 	bic.w	r3, r3, #3
 8000c96:	f043 0201 	orr.w	r2, r3, #1
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c9e:	e018      	b.n	8000cd2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca4:	f023 0312 	bic.w	r3, r3, #18
 8000ca8:	f043 0210 	orr.w	r2, r3, #16
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb4:	f043 0201 	orr.w	r2, r3, #1
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cc0:	e007      	b.n	8000cd2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc6:	f043 0210 	orr.w	r2, r3, #16
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	ffe1f7fd 	.word	0xffe1f7fd
 8000ce0:	ff1f0efe 	.word	0xff1f0efe

08000ce4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a64      	ldr	r2, [pc, #400]	; (8000e8c <HAL_ADC_Start_DMA+0x1a8>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d004      	beq.n	8000d08 <HAL_ADC_Start_DMA+0x24>
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a63      	ldr	r2, [pc, #396]	; (8000e90 <HAL_ADC_Start_DMA+0x1ac>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d106      	bne.n	8000d16 <HAL_ADC_Start_DMA+0x32>
 8000d08:	4b60      	ldr	r3, [pc, #384]	; (8000e8c <HAL_ADC_Start_DMA+0x1a8>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f040 80b3 	bne.w	8000e7c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d101      	bne.n	8000d24 <HAL_ADC_Start_DMA+0x40>
 8000d20:	2302      	movs	r3, #2
 8000d22:	e0ae      	b.n	8000e82 <HAL_ADC_Start_DMA+0x19e>
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2201      	movs	r2, #1
 8000d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f000 f9c1 	bl	80010b4 <ADC_Enable>
 8000d32:	4603      	mov	r3, r0
 8000d34:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d36:	7dfb      	ldrb	r3, [r7, #23]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f040 809a 	bne.w	8000e72 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d46:	f023 0301 	bic.w	r3, r3, #1
 8000d4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a4e      	ldr	r2, [pc, #312]	; (8000e90 <HAL_ADC_Start_DMA+0x1ac>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d105      	bne.n	8000d68 <HAL_ADC_Start_DMA+0x84>
 8000d5c:	4b4b      	ldr	r3, [pc, #300]	; (8000e8c <HAL_ADC_Start_DMA+0x1a8>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d115      	bne.n	8000d94 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d026      	beq.n	8000dd0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d92:	e01d      	b.n	8000dd0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d98:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a39      	ldr	r2, [pc, #228]	; (8000e8c <HAL_ADC_Start_DMA+0x1a8>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d004      	beq.n	8000db4 <HAL_ADC_Start_DMA+0xd0>
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a38      	ldr	r2, [pc, #224]	; (8000e90 <HAL_ADC_Start_DMA+0x1ac>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d10d      	bne.n	8000dd0 <HAL_ADC_Start_DMA+0xec>
 8000db4:	4b35      	ldr	r3, [pc, #212]	; (8000e8c <HAL_ADC_Start_DMA+0x1a8>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d007      	beq.n	8000dd0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dc8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d006      	beq.n	8000dea <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de0:	f023 0206 	bic.w	r2, r3, #6
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000de8:	e002      	b.n	8000df0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2200      	movs	r2, #0
 8000dee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	6a1b      	ldr	r3, [r3, #32]
 8000dfc:	4a25      	ldr	r2, [pc, #148]	; (8000e94 <HAL_ADC_Start_DMA+0x1b0>)
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6a1b      	ldr	r3, [r3, #32]
 8000e04:	4a24      	ldr	r2, [pc, #144]	; (8000e98 <HAL_ADC_Start_DMA+0x1b4>)
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	4a23      	ldr	r2, [pc, #140]	; (8000e9c <HAL_ADC_Start_DMA+0x1b8>)
 8000e0e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f06f 0202 	mvn.w	r2, #2
 8000e18:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e28:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	6a18      	ldr	r0, [r3, #32]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	334c      	adds	r3, #76	; 0x4c
 8000e34:	4619      	mov	r1, r3
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f000 fba5 	bl	8001588 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e48:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e4c:	d108      	bne.n	8000e60 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e5c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000e5e:	e00f      	b.n	8000e80 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e6e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000e70:	e006      	b.n	8000e80 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000e7a:	e001      	b.n	8000e80 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40012400 	.word	0x40012400
 8000e90:	40012800 	.word	0x40012800
 8000e94:	080011eb 	.word	0x080011eb
 8000e98:	08001267 	.word	0x08001267
 8000e9c:	08001283 	.word	0x08001283

08000ea0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr

08000eb2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d101      	bne.n	8000ee4 <HAL_ADC_ConfigChannel+0x20>
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	e0dc      	b.n	800109e <HAL_ADC_ConfigChannel+0x1da>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b06      	cmp	r3, #6
 8000ef2:	d81c      	bhi.n	8000f2e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	4613      	mov	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	3b05      	subs	r3, #5
 8000f06:	221f      	movs	r2, #31
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	4019      	ands	r1, r3
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	3b05      	subs	r3, #5
 8000f20:	fa00 f203 	lsl.w	r2, r0, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	635a      	str	r2, [r3, #52]	; 0x34
 8000f2c:	e03c      	b.n	8000fa8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2b0c      	cmp	r3, #12
 8000f34:	d81c      	bhi.n	8000f70 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	3b23      	subs	r3, #35	; 0x23
 8000f48:	221f      	movs	r2, #31
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	4019      	ands	r1, r3
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	3b23      	subs	r3, #35	; 0x23
 8000f62:	fa00 f203 	lsl.w	r2, r0, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f6e:	e01b      	b.n	8000fa8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685a      	ldr	r2, [r3, #4]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	3b41      	subs	r3, #65	; 0x41
 8000f82:	221f      	movs	r2, #31
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	4019      	ands	r1, r3
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	4613      	mov	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	3b41      	subs	r3, #65	; 0x41
 8000f9c:	fa00 f203 	lsl.w	r2, r0, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b09      	cmp	r3, #9
 8000fae:	d91c      	bls.n	8000fea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	68d9      	ldr	r1, [r3, #12]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	3b1e      	subs	r3, #30
 8000fc2:	2207      	movs	r2, #7
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	4019      	ands	r1, r3
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	6898      	ldr	r0, [r3, #8]
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	3b1e      	subs	r3, #30
 8000fdc:	fa00 f203 	lsl.w	r2, r0, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	e019      	b.n	800101e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6919      	ldr	r1, [r3, #16]
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	2207      	movs	r2, #7
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	4019      	ands	r1, r3
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	6898      	ldr	r0, [r3, #8]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	fa00 f203 	lsl.w	r2, r0, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	430a      	orrs	r2, r1
 800101c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b10      	cmp	r3, #16
 8001024:	d003      	beq.n	800102e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800102a:	2b11      	cmp	r3, #17
 800102c:	d132      	bne.n	8001094 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d125      	bne.n	8001084 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d126      	bne.n	8001094 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001054:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b10      	cmp	r3, #16
 800105c:	d11a      	bne.n	8001094 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <HAL_ADC_ConfigChannel+0x1e8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001064:	fba2 2303 	umull	r2, r3, r2, r3
 8001068:	0c9a      	lsrs	r2, r3, #18
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001074:	e002      	b.n	800107c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	3b01      	subs	r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f9      	bne.n	8001076 <HAL_ADC_ConfigChannel+0x1b2>
 8001082:	e007      	b.n	8001094 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	f043 0220 	orr.w	r2, r3, #32
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	40012400 	.word	0x40012400
 80010ac:	20000000 	.word	0x20000000
 80010b0:	431bde83 	.word	0x431bde83

080010b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d040      	beq.n	8001154 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f042 0201 	orr.w	r2, r2, #1
 80010e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <ADC_Enable+0xac>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a1f      	ldr	r2, [pc, #124]	; (8001164 <ADC_Enable+0xb0>)
 80010e8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ec:	0c9b      	lsrs	r3, r3, #18
 80010ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010f0:	e002      	b.n	80010f8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f9      	bne.n	80010f2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010fe:	f7ff fd0f 	bl	8000b20 <HAL_GetTick>
 8001102:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001104:	e01f      	b.n	8001146 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001106:	f7ff fd0b 	bl	8000b20 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d918      	bls.n	8001146 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b01      	cmp	r3, #1
 8001120:	d011      	beq.n	8001146 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001126:	f043 0210 	orr.w	r2, r3, #16
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001132:	f043 0201 	orr.w	r2, r3, #1
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e007      	b.n	8001156 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	2b01      	cmp	r3, #1
 8001152:	d1d8      	bne.n	8001106 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000000 	.word	0x20000000
 8001164:	431bde83 	.word	0x431bde83

08001168 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	2b01      	cmp	r3, #1
 8001180:	d12e      	bne.n	80011e0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f022 0201 	bic.w	r2, r2, #1
 8001190:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001192:	f7ff fcc5 	bl	8000b20 <HAL_GetTick>
 8001196:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001198:	e01b      	b.n	80011d2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800119a:	f7ff fcc1 	bl	8000b20 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d914      	bls.n	80011d2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d10d      	bne.n	80011d2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ba:	f043 0210 	orr.w	r2, r3, #16
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c6:	f043 0201 	orr.w	r2, r3, #1
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e007      	b.n	80011e2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d0dc      	beq.n	800119a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b084      	sub	sp, #16
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001200:	2b00      	cmp	r3, #0
 8001202:	d127      	bne.n	8001254 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001208:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800121a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800121e:	d115      	bne.n	800124c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001224:	2b00      	cmp	r3, #0
 8001226:	d111      	bne.n	800124c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d105      	bne.n	800124c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001244:	f043 0201 	orr.w	r2, r3, #1
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f7ff f88b 	bl	8000368 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001252:	e004      	b.n	800125e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	4798      	blx	r3
}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b084      	sub	sp, #16
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f7ff fe13 	bl	8000ea0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b084      	sub	sp, #16
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001294:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a0:	f043 0204 	orr.w	r2, r3, #4
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f7ff fe02 	bl	8000eb2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d4:	4013      	ands	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ea:	4a04      	ldr	r2, [pc, #16]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	60d3      	str	r3, [r2, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <__NVIC_GetPriorityGrouping+0x18>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	f003 0307 	and.w	r3, r3, #7
}
 800130e:	4618      	mov	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	db0b      	blt.n	8001346 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	f003 021f 	and.w	r2, r3, #31
 8001334:	4906      	ldr	r1, [pc, #24]	; (8001350 <__NVIC_EnableIRQ+0x34>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	095b      	lsrs	r3, r3, #5
 800133c:	2001      	movs	r0, #1
 800133e:	fa00 f202 	lsl.w	r2, r0, r2
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	e000e100 	.word	0xe000e100

08001354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	6039      	str	r1, [r7, #0]
 800135e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	2b00      	cmp	r3, #0
 8001366:	db0a      	blt.n	800137e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	b2da      	uxtb	r2, r3
 800136c:	490c      	ldr	r1, [pc, #48]	; (80013a0 <__NVIC_SetPriority+0x4c>)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	0112      	lsls	r2, r2, #4
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	440b      	add	r3, r1
 8001378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800137c:	e00a      	b.n	8001394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4908      	ldr	r1, [pc, #32]	; (80013a4 <__NVIC_SetPriority+0x50>)
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	3b04      	subs	r3, #4
 800138c:	0112      	lsls	r2, r2, #4
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	440b      	add	r3, r1
 8001392:	761a      	strb	r2, [r3, #24]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000e100 	.word	0xe000e100
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b089      	sub	sp, #36	; 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f1c3 0307 	rsb	r3, r3, #7
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	bf28      	it	cs
 80013c6:	2304      	movcs	r3, #4
 80013c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3304      	adds	r3, #4
 80013ce:	2b06      	cmp	r3, #6
 80013d0:	d902      	bls.n	80013d8 <NVIC_EncodePriority+0x30>
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3b03      	subs	r3, #3
 80013d6:	e000      	b.n	80013da <NVIC_EncodePriority+0x32>
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	f04f 32ff 	mov.w	r2, #4294967295
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	401a      	ands	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f0:	f04f 31ff 	mov.w	r1, #4294967295
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	43d9      	mvns	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	4313      	orrs	r3, r2
         );
}
 8001402:	4618      	mov	r0, r3
 8001404:	3724      	adds	r7, #36	; 0x24
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800141c:	d301      	bcc.n	8001422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141e:	2301      	movs	r3, #1
 8001420:	e00f      	b.n	8001442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <SysTick_Config+0x40>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142a:	210f      	movs	r1, #15
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f7ff ff90 	bl	8001354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <SysTick_Config+0x40>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <SysTick_Config+0x40>)
 800143c:	2207      	movs	r2, #7
 800143e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	e000e010 	.word	0xe000e010

08001450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff2d 	bl	80012b8 <__NVIC_SetPriorityGrouping>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001478:	f7ff ff42 	bl	8001300 <__NVIC_GetPriorityGrouping>
 800147c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f7ff ff90 	bl	80013a8 <NVIC_EncodePriority>
 8001488:	4602      	mov	r2, r0
 800148a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff5f 	bl	8001354 <__NVIC_SetPriority>
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff35 	bl	800131c <__NVIC_EnableIRQ>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ffa2 	bl	800140c <SysTick_Config>
 80014c8:	4603      	mov	r3, r0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e043      	b.n	8001572 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <HAL_DMA_Init+0xa8>)
 80014f2:	4413      	add	r3, r2
 80014f4:	4a22      	ldr	r2, [pc, #136]	; (8001580 <HAL_DMA_Init+0xac>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	009a      	lsls	r2, r3, #2
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a1f      	ldr	r2, [pc, #124]	; (8001584 <HAL_DMA_Init+0xb0>)
 8001506:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2202      	movs	r2, #2
 800150c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800151e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001522:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800152c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001538:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001544:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	4313      	orrs	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	bffdfff8 	.word	0xbffdfff8
 8001580:	cccccccd 	.word	0xcccccccd
 8001584:	40020000 	.word	0x40020000

08001588 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d101      	bne.n	80015a8 <HAL_DMA_Start_IT+0x20>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e04b      	b.n	8001640 <HAL_DMA_Start_IT+0xb8>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d13a      	bne.n	8001632 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2202      	movs	r2, #2
 80015c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0201 	bic.w	r2, r2, #1
 80015d8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	68b9      	ldr	r1, [r7, #8]
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 f937 	bl	8001854 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d008      	beq.n	8001600 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f042 020e 	orr.w	r2, r2, #14
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	e00f      	b.n	8001620 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0204 	bic.w	r2, r2, #4
 800160e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 020a 	orr.w	r2, r2, #10
 800161e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0201 	orr.w	r2, r2, #1
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	e005      	b.n	800163e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800163a:	2302      	movs	r3, #2
 800163c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800163e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	2204      	movs	r2, #4
 8001666:	409a      	lsls	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4013      	ands	r3, r2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d04f      	beq.n	8001710 <HAL_DMA_IRQHandler+0xc8>
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	2b00      	cmp	r3, #0
 8001678:	d04a      	beq.n	8001710 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0320 	and.w	r3, r3, #32
 8001684:	2b00      	cmp	r3, #0
 8001686:	d107      	bne.n	8001698 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0204 	bic.w	r2, r2, #4
 8001696:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a66      	ldr	r2, [pc, #408]	; (8001838 <HAL_DMA_IRQHandler+0x1f0>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d029      	beq.n	80016f6 <HAL_DMA_IRQHandler+0xae>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a65      	ldr	r2, [pc, #404]	; (800183c <HAL_DMA_IRQHandler+0x1f4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d022      	beq.n	80016f2 <HAL_DMA_IRQHandler+0xaa>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a63      	ldr	r2, [pc, #396]	; (8001840 <HAL_DMA_IRQHandler+0x1f8>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d01a      	beq.n	80016ec <HAL_DMA_IRQHandler+0xa4>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a62      	ldr	r2, [pc, #392]	; (8001844 <HAL_DMA_IRQHandler+0x1fc>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d012      	beq.n	80016e6 <HAL_DMA_IRQHandler+0x9e>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a60      	ldr	r2, [pc, #384]	; (8001848 <HAL_DMA_IRQHandler+0x200>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00a      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x98>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a5f      	ldr	r2, [pc, #380]	; (800184c <HAL_DMA_IRQHandler+0x204>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d102      	bne.n	80016da <HAL_DMA_IRQHandler+0x92>
 80016d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016d8:	e00e      	b.n	80016f8 <HAL_DMA_IRQHandler+0xb0>
 80016da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016de:	e00b      	b.n	80016f8 <HAL_DMA_IRQHandler+0xb0>
 80016e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016e4:	e008      	b.n	80016f8 <HAL_DMA_IRQHandler+0xb0>
 80016e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ea:	e005      	b.n	80016f8 <HAL_DMA_IRQHandler+0xb0>
 80016ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f0:	e002      	b.n	80016f8 <HAL_DMA_IRQHandler+0xb0>
 80016f2:	2340      	movs	r3, #64	; 0x40
 80016f4:	e000      	b.n	80016f8 <HAL_DMA_IRQHandler+0xb0>
 80016f6:	2304      	movs	r3, #4
 80016f8:	4a55      	ldr	r2, [pc, #340]	; (8001850 <HAL_DMA_IRQHandler+0x208>)
 80016fa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 8094 	beq.w	800182e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800170e:	e08e      	b.n	800182e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	2202      	movs	r2, #2
 8001716:	409a      	lsls	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4013      	ands	r3, r2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d056      	beq.n	80017ce <HAL_DMA_IRQHandler+0x186>
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d051      	beq.n	80017ce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0320 	and.w	r3, r3, #32
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10b      	bne.n	8001750 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 020a 	bic.w	r2, r2, #10
 8001746:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a38      	ldr	r2, [pc, #224]	; (8001838 <HAL_DMA_IRQHandler+0x1f0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d029      	beq.n	80017ae <HAL_DMA_IRQHandler+0x166>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a37      	ldr	r2, [pc, #220]	; (800183c <HAL_DMA_IRQHandler+0x1f4>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d022      	beq.n	80017aa <HAL_DMA_IRQHandler+0x162>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a35      	ldr	r2, [pc, #212]	; (8001840 <HAL_DMA_IRQHandler+0x1f8>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d01a      	beq.n	80017a4 <HAL_DMA_IRQHandler+0x15c>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a34      	ldr	r2, [pc, #208]	; (8001844 <HAL_DMA_IRQHandler+0x1fc>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d012      	beq.n	800179e <HAL_DMA_IRQHandler+0x156>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a32      	ldr	r2, [pc, #200]	; (8001848 <HAL_DMA_IRQHandler+0x200>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d00a      	beq.n	8001798 <HAL_DMA_IRQHandler+0x150>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a31      	ldr	r2, [pc, #196]	; (800184c <HAL_DMA_IRQHandler+0x204>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d102      	bne.n	8001792 <HAL_DMA_IRQHandler+0x14a>
 800178c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001790:	e00e      	b.n	80017b0 <HAL_DMA_IRQHandler+0x168>
 8001792:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001796:	e00b      	b.n	80017b0 <HAL_DMA_IRQHandler+0x168>
 8001798:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800179c:	e008      	b.n	80017b0 <HAL_DMA_IRQHandler+0x168>
 800179e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a2:	e005      	b.n	80017b0 <HAL_DMA_IRQHandler+0x168>
 80017a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017a8:	e002      	b.n	80017b0 <HAL_DMA_IRQHandler+0x168>
 80017aa:	2320      	movs	r3, #32
 80017ac:	e000      	b.n	80017b0 <HAL_DMA_IRQHandler+0x168>
 80017ae:	2302      	movs	r3, #2
 80017b0:	4a27      	ldr	r2, [pc, #156]	; (8001850 <HAL_DMA_IRQHandler+0x208>)
 80017b2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d034      	beq.n	800182e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017cc:	e02f      	b.n	800182e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	2208      	movs	r2, #8
 80017d4:	409a      	lsls	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4013      	ands	r3, r2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d028      	beq.n	8001830 <HAL_DMA_IRQHandler+0x1e8>
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d023      	beq.n	8001830 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 020e 	bic.w	r2, r2, #14
 80017f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001800:	2101      	movs	r1, #1
 8001802:	fa01 f202 	lsl.w	r2, r1, r2
 8001806:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	2b00      	cmp	r3, #0
 8001824:	d004      	beq.n	8001830 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	4798      	blx	r3
    }
  }
  return;
 800182e:	bf00      	nop
 8001830:	bf00      	nop
}
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40020008 	.word	0x40020008
 800183c:	4002001c 	.word	0x4002001c
 8001840:	40020030 	.word	0x40020030
 8001844:	40020044 	.word	0x40020044
 8001848:	40020058 	.word	0x40020058
 800184c:	4002006c 	.word	0x4002006c
 8001850:	40020000 	.word	0x40020000

08001854 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186a:	2101      	movs	r1, #1
 800186c:	fa01 f202 	lsl.w	r2, r1, r2
 8001870:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b10      	cmp	r3, #16
 8001880:	d108      	bne.n	8001894 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001892:	e007      	b.n	80018a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	60da      	str	r2, [r3, #12]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
	...

080018b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b08b      	sub	sp, #44	; 0x2c
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c2:	e169      	b.n	8001b98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018c4:	2201      	movs	r2, #1
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	69fa      	ldr	r2, [r7, #28]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	429a      	cmp	r2, r3
 80018de:	f040 8158 	bne.w	8001b92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4a9a      	ldr	r2, [pc, #616]	; (8001b50 <HAL_GPIO_Init+0x2a0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d05e      	beq.n	80019aa <HAL_GPIO_Init+0xfa>
 80018ec:	4a98      	ldr	r2, [pc, #608]	; (8001b50 <HAL_GPIO_Init+0x2a0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d875      	bhi.n	80019de <HAL_GPIO_Init+0x12e>
 80018f2:	4a98      	ldr	r2, [pc, #608]	; (8001b54 <HAL_GPIO_Init+0x2a4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d058      	beq.n	80019aa <HAL_GPIO_Init+0xfa>
 80018f8:	4a96      	ldr	r2, [pc, #600]	; (8001b54 <HAL_GPIO_Init+0x2a4>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d86f      	bhi.n	80019de <HAL_GPIO_Init+0x12e>
 80018fe:	4a96      	ldr	r2, [pc, #600]	; (8001b58 <HAL_GPIO_Init+0x2a8>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d052      	beq.n	80019aa <HAL_GPIO_Init+0xfa>
 8001904:	4a94      	ldr	r2, [pc, #592]	; (8001b58 <HAL_GPIO_Init+0x2a8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d869      	bhi.n	80019de <HAL_GPIO_Init+0x12e>
 800190a:	4a94      	ldr	r2, [pc, #592]	; (8001b5c <HAL_GPIO_Init+0x2ac>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d04c      	beq.n	80019aa <HAL_GPIO_Init+0xfa>
 8001910:	4a92      	ldr	r2, [pc, #584]	; (8001b5c <HAL_GPIO_Init+0x2ac>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d863      	bhi.n	80019de <HAL_GPIO_Init+0x12e>
 8001916:	4a92      	ldr	r2, [pc, #584]	; (8001b60 <HAL_GPIO_Init+0x2b0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d046      	beq.n	80019aa <HAL_GPIO_Init+0xfa>
 800191c:	4a90      	ldr	r2, [pc, #576]	; (8001b60 <HAL_GPIO_Init+0x2b0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d85d      	bhi.n	80019de <HAL_GPIO_Init+0x12e>
 8001922:	2b12      	cmp	r3, #18
 8001924:	d82a      	bhi.n	800197c <HAL_GPIO_Init+0xcc>
 8001926:	2b12      	cmp	r3, #18
 8001928:	d859      	bhi.n	80019de <HAL_GPIO_Init+0x12e>
 800192a:	a201      	add	r2, pc, #4	; (adr r2, 8001930 <HAL_GPIO_Init+0x80>)
 800192c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001930:	080019ab 	.word	0x080019ab
 8001934:	08001985 	.word	0x08001985
 8001938:	08001997 	.word	0x08001997
 800193c:	080019d9 	.word	0x080019d9
 8001940:	080019df 	.word	0x080019df
 8001944:	080019df 	.word	0x080019df
 8001948:	080019df 	.word	0x080019df
 800194c:	080019df 	.word	0x080019df
 8001950:	080019df 	.word	0x080019df
 8001954:	080019df 	.word	0x080019df
 8001958:	080019df 	.word	0x080019df
 800195c:	080019df 	.word	0x080019df
 8001960:	080019df 	.word	0x080019df
 8001964:	080019df 	.word	0x080019df
 8001968:	080019df 	.word	0x080019df
 800196c:	080019df 	.word	0x080019df
 8001970:	080019df 	.word	0x080019df
 8001974:	0800198d 	.word	0x0800198d
 8001978:	080019a1 	.word	0x080019a1
 800197c:	4a79      	ldr	r2, [pc, #484]	; (8001b64 <HAL_GPIO_Init+0x2b4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d013      	beq.n	80019aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001982:	e02c      	b.n	80019de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	623b      	str	r3, [r7, #32]
          break;
 800198a:	e029      	b.n	80019e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	3304      	adds	r3, #4
 8001992:	623b      	str	r3, [r7, #32]
          break;
 8001994:	e024      	b.n	80019e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	3308      	adds	r3, #8
 800199c:	623b      	str	r3, [r7, #32]
          break;
 800199e:	e01f      	b.n	80019e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	330c      	adds	r3, #12
 80019a6:	623b      	str	r3, [r7, #32]
          break;
 80019a8:	e01a      	b.n	80019e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d102      	bne.n	80019b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019b2:	2304      	movs	r3, #4
 80019b4:	623b      	str	r3, [r7, #32]
          break;
 80019b6:	e013      	b.n	80019e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d105      	bne.n	80019cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019c0:	2308      	movs	r3, #8
 80019c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	611a      	str	r2, [r3, #16]
          break;
 80019ca:	e009      	b.n	80019e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019cc:	2308      	movs	r3, #8
 80019ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	615a      	str	r2, [r3, #20]
          break;
 80019d6:	e003      	b.n	80019e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019d8:	2300      	movs	r3, #0
 80019da:	623b      	str	r3, [r7, #32]
          break;
 80019dc:	e000      	b.n	80019e0 <HAL_GPIO_Init+0x130>
          break;
 80019de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	2bff      	cmp	r3, #255	; 0xff
 80019e4:	d801      	bhi.n	80019ea <HAL_GPIO_Init+0x13a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	e001      	b.n	80019ee <HAL_GPIO_Init+0x13e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3304      	adds	r3, #4
 80019ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2bff      	cmp	r3, #255	; 0xff
 80019f4:	d802      	bhi.n	80019fc <HAL_GPIO_Init+0x14c>
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	e002      	b.n	8001a02 <HAL_GPIO_Init+0x152>
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	3b08      	subs	r3, #8
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	210f      	movs	r1, #15
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	401a      	ands	r2, r3
 8001a14:	6a39      	ldr	r1, [r7, #32]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 80b1 	beq.w	8001b92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a30:	4b4d      	ldr	r3, [pc, #308]	; (8001b68 <HAL_GPIO_Init+0x2b8>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	4a4c      	ldr	r2, [pc, #304]	; (8001b68 <HAL_GPIO_Init+0x2b8>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6193      	str	r3, [r2, #24]
 8001a3c:	4b4a      	ldr	r3, [pc, #296]	; (8001b68 <HAL_GPIO_Init+0x2b8>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a48:	4a48      	ldr	r2, [pc, #288]	; (8001b6c <HAL_GPIO_Init+0x2bc>)
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	089b      	lsrs	r3, r3, #2
 8001a4e:	3302      	adds	r3, #2
 8001a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	220f      	movs	r2, #15
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a40      	ldr	r2, [pc, #256]	; (8001b70 <HAL_GPIO_Init+0x2c0>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d013      	beq.n	8001a9c <HAL_GPIO_Init+0x1ec>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a3f      	ldr	r2, [pc, #252]	; (8001b74 <HAL_GPIO_Init+0x2c4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d00d      	beq.n	8001a98 <HAL_GPIO_Init+0x1e8>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a3e      	ldr	r2, [pc, #248]	; (8001b78 <HAL_GPIO_Init+0x2c8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d007      	beq.n	8001a94 <HAL_GPIO_Init+0x1e4>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a3d      	ldr	r2, [pc, #244]	; (8001b7c <HAL_GPIO_Init+0x2cc>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d101      	bne.n	8001a90 <HAL_GPIO_Init+0x1e0>
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e006      	b.n	8001a9e <HAL_GPIO_Init+0x1ee>
 8001a90:	2304      	movs	r3, #4
 8001a92:	e004      	b.n	8001a9e <HAL_GPIO_Init+0x1ee>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e002      	b.n	8001a9e <HAL_GPIO_Init+0x1ee>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <HAL_GPIO_Init+0x1ee>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa0:	f002 0203 	and.w	r2, r2, #3
 8001aa4:	0092      	lsls	r2, r2, #2
 8001aa6:	4093      	lsls	r3, r2
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aae:	492f      	ldr	r1, [pc, #188]	; (8001b6c <HAL_GPIO_Init+0x2bc>)
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d006      	beq.n	8001ad6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	492c      	ldr	r1, [pc, #176]	; (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	608b      	str	r3, [r1, #8]
 8001ad4:	e006      	b.n	8001ae4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	4928      	ldr	r1, [pc, #160]	; (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d006      	beq.n	8001afe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001af0:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	4922      	ldr	r1, [pc, #136]	; (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	60cb      	str	r3, [r1, #12]
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001afe:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	491e      	ldr	r1, [pc, #120]	; (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d006      	beq.n	8001b26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b18:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	4918      	ldr	r1, [pc, #96]	; (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
 8001b24:	e006      	b.n	8001b34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b26:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	4914      	ldr	r1, [pc, #80]	; (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d021      	beq.n	8001b84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	490e      	ldr	r1, [pc, #56]	; (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	600b      	str	r3, [r1, #0]
 8001b4c:	e021      	b.n	8001b92 <HAL_GPIO_Init+0x2e2>
 8001b4e:	bf00      	nop
 8001b50:	10320000 	.word	0x10320000
 8001b54:	10310000 	.word	0x10310000
 8001b58:	10220000 	.word	0x10220000
 8001b5c:	10210000 	.word	0x10210000
 8001b60:	10120000 	.word	0x10120000
 8001b64:	10110000 	.word	0x10110000
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40010000 	.word	0x40010000
 8001b70:	40010800 	.word	0x40010800
 8001b74:	40010c00 	.word	0x40010c00
 8001b78:	40011000 	.word	0x40011000
 8001b7c:	40011400 	.word	0x40011400
 8001b80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_GPIO_Init+0x304>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	4909      	ldr	r1, [pc, #36]	; (8001bb4 <HAL_GPIO_Init+0x304>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	3301      	adds	r3, #1
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f47f ae8e 	bne.w	80018c4 <HAL_GPIO_Init+0x14>
  }
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	372c      	adds	r7, #44	; 0x2c
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	40010400 	.word	0x40010400

08001bb8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bba:	b08b      	sub	sp, #44	; 0x2c
 8001bbc:	af06      	add	r7, sp, #24
 8001bbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e0f1      	b.n	8001dae <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f006 faea 	bl	80081b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2203      	movs	r2, #3
 8001be8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f002 fa09 	bl	8004008 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	687e      	ldr	r6, [r7, #4]
 8001bfe:	466d      	mov	r5, sp
 8001c00:	f106 0410 	add.w	r4, r6, #16
 8001c04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	602b      	str	r3, [r5, #0]
 8001c0c:	1d33      	adds	r3, r6, #4
 8001c0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c10:	6838      	ldr	r0, [r7, #0]
 8001c12:	f002 f9d3 	bl	8003fbc <USB_CoreInit>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0c2      	b.n	8001dae <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f002 fa04 	bl	800403c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c34:	2300      	movs	r3, #0
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	e040      	b.n	8001cbc <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	440b      	add	r3, r1
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	440b      	add	r3, r1
 8001c60:	7bfa      	ldrb	r2, [r7, #15]
 8001c62:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	440b      	add	r3, r1
 8001c74:	3303      	adds	r3, #3
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	440b      	add	r3, r1
 8001c88:	3338      	adds	r3, #56	; 0x38
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	440b      	add	r3, r1
 8001c9c:	333c      	adds	r3, #60	; 0x3c
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	440b      	add	r3, r1
 8001cb0:	3340      	adds	r3, #64	; 0x40
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d3b9      	bcc.n	8001c3a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	73fb      	strb	r3, [r7, #15]
 8001cca:	e044      	b.n	8001d56 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ccc:	7bfa      	ldrb	r2, [r7, #15]
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	440b      	add	r3, r1
 8001cda:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	440b      	add	r3, r1
 8001cf0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	440b      	add	r3, r1
 8001d06:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	440b      	add	r3, r1
 8001d32:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	440b      	add	r3, r1
 8001d48:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	3301      	adds	r3, #1
 8001d54:	73fb      	strb	r3, [r7, #15]
 8001d56:	7bfa      	ldrb	r2, [r7, #15]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d3b5      	bcc.n	8001ccc <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	687e      	ldr	r6, [r7, #4]
 8001d68:	466d      	mov	r5, sp
 8001d6a:	f106 0410 	add.w	r4, r6, #16
 8001d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	602b      	str	r3, [r5, #0]
 8001d76:	1d33      	adds	r3, r6, #4
 8001d78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d7a:	6838      	ldr	r0, [r7, #0]
 8001d7c:	f002 f96a 	bl	8004054 <USB_DevInit>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2202      	movs	r2, #2
 8001d8a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e00d      	b.n	8001dae <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f004 fbeb 	bl	8006582 <USB_DevDisconnect>

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001db6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_PCD_Start+0x16>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e016      	b.n	8001dfa <HAL_PCD_Start+0x44>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f002 f8ff 	bl	8003fdc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001dde:	2101      	movs	r1, #1
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f006 fc64 	bl	80086ae <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f004 fbbf 	bl	800656e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b088      	sub	sp, #32
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f004 fbc1 	bl	8006596 <USB_ReadInterrupts>
 8001e14:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 fb1b 	bl	800245c <PCD_EP_ISR_Handler>

    return;
 8001e26:	e119      	b.n	800205c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d013      	beq.n	8001e5a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e44:	b292      	uxth	r2, r2
 8001e46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f006 fa37 	bl	80082be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e50:	2100      	movs	r1, #0
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f905 	bl	8002062 <HAL_PCD_SetAddress>

    return;
 8001e58:	e100      	b.n	800205c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00c      	beq.n	8001e7e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e76:	b292      	uxth	r2, r2
 8001e78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e7c:	e0ee      	b.n	800205c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00c      	beq.n	8001ea2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e9a:	b292      	uxth	r2, r2
 8001e9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ea0:	e0dc      	b.n	800205c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d027      	beq.n	8001efc <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0204 	bic.w	r2, r2, #4
 8001ebe:	b292      	uxth	r2, r2
 8001ec0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0208 	bic.w	r2, r2, #8
 8001ed6:	b292      	uxth	r2, r2
 8001ed8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f006 fa27 	bl	8008330 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ef4:	b292      	uxth	r2, r2
 8001ef6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001efa:	e0af      	b.n	800205c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 8083 	beq.w	800200e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	77fb      	strb	r3, [r7, #31]
 8001f0c:	e010      	b.n	8001f30 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	7ffb      	ldrb	r3, [r7, #31]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	441a      	add	r2, r3
 8001f1a:	7ffb      	ldrb	r3, [r7, #31]
 8001f1c:	8812      	ldrh	r2, [r2, #0]
 8001f1e:	b292      	uxth	r2, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	3320      	adds	r3, #32
 8001f24:	443b      	add	r3, r7
 8001f26:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001f2a:	7ffb      	ldrb	r3, [r7, #31]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	77fb      	strb	r3, [r7, #31]
 8001f30:	7ffb      	ldrb	r3, [r7, #31]
 8001f32:	2b07      	cmp	r3, #7
 8001f34:	d9eb      	bls.n	8001f0e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0201 	orr.w	r2, r2, #1
 8001f48:	b292      	uxth	r2, r2
 8001f4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0201 	bic.w	r2, r2, #1
 8001f60:	b292      	uxth	r2, r2
 8001f62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001f66:	bf00      	nop
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f6      	beq.n	8001f68 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f8c:	b292      	uxth	r2, r2
 8001f8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001f92:	2300      	movs	r3, #0
 8001f94:	77fb      	strb	r3, [r7, #31]
 8001f96:	e00f      	b.n	8001fb8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001f98:	7ffb      	ldrb	r3, [r7, #31]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	7ffa      	ldrb	r2, [r7, #31]
 8001fa2:	0092      	lsls	r2, r2, #2
 8001fa4:	440a      	add	r2, r1
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	3320      	adds	r3, #32
 8001faa:	443b      	add	r3, r7
 8001fac:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001fb0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001fb2:	7ffb      	ldrb	r3, [r7, #31]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	77fb      	strb	r3, [r7, #31]
 8001fb8:	7ffb      	ldrb	r3, [r7, #31]
 8001fba:	2b07      	cmp	r3, #7
 8001fbc:	d9ec      	bls.n	8001f98 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0208 	orr.w	r2, r2, #8
 8001fd0:	b292      	uxth	r2, r2
 8001fd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fe8:	b292      	uxth	r2, r2
 8001fea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f042 0204 	orr.w	r2, r2, #4
 8002000:	b292      	uxth	r2, r2
 8002002:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f006 f978 	bl	80082fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800200c:	e026      	b.n	800205c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00f      	beq.n	8002038 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002020:	b29a      	uxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800202a:	b292      	uxth	r2, r2
 800202c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f006 f936 	bl	80082a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002036:	e011      	b.n	800205c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00c      	beq.n	800205c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800204a:	b29a      	uxth	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002054:	b292      	uxth	r2, r2
 8002056:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800205a:	bf00      	nop
  }
}
 800205c:	3720      	adds	r7, #32
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_PCD_SetAddress+0x1a>
 8002078:	2302      	movs	r3, #2
 800207a:	e013      	b.n	80020a4 <HAL_PCD_SetAddress+0x42>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	78fa      	ldrb	r2, [r7, #3]
 8002088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	78fa      	ldrb	r2, [r7, #3]
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f004 fa57 	bl	8006548 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	4608      	mov	r0, r1
 80020b6:	4611      	mov	r1, r2
 80020b8:	461a      	mov	r2, r3
 80020ba:	4603      	mov	r3, r0
 80020bc:	70fb      	strb	r3, [r7, #3]
 80020be:	460b      	mov	r3, r1
 80020c0:	803b      	strh	r3, [r7, #0]
 80020c2:	4613      	mov	r3, r2
 80020c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	da0e      	bge.n	80020f0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d2:	78fb      	ldrb	r3, [r7, #3]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2201      	movs	r2, #1
 80020ec:	705a      	strb	r2, [r3, #1]
 80020ee:	e00e      	b.n	800210e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	f003 0207 	and.w	r2, r3, #7
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	b2da      	uxtb	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800211a:	883a      	ldrh	r2, [r7, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	78ba      	ldrb	r2, [r7, #2]
 8002124:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002126:	78bb      	ldrb	r3, [r7, #2]
 8002128:	2b02      	cmp	r3, #2
 800212a:	d102      	bne.n	8002132 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_PCD_EP_Open+0x94>
 800213c:	2302      	movs	r3, #2
 800213e:	e00e      	b.n	800215e <HAL_PCD_EP_Open+0xb2>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68f9      	ldr	r1, [r7, #12]
 800214e:	4618      	mov	r0, r3
 8002150:	f001 ffa0 	bl	8004094 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800215c:	7afb      	ldrb	r3, [r7, #11]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002172:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002176:	2b00      	cmp	r3, #0
 8002178:	da0e      	bge.n	8002198 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2201      	movs	r2, #1
 8002194:	705a      	strb	r2, [r3, #1]
 8002196:	e00e      	b.n	80021b6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	f003 0207 	and.w	r2, r3, #7
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80021b6:	78fb      	ldrb	r3, [r7, #3]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_PCD_EP_Close+0x6a>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e00e      	b.n	80021ee <HAL_PCD_EP_Close+0x88>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68f9      	ldr	r1, [r7, #12]
 80021de:	4618      	mov	r0, r3
 80021e0:	f002 fb18 	bl	8004814 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	603b      	str	r3, [r7, #0]
 8002202:	460b      	mov	r3, r1
 8002204:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002206:	7afb      	ldrb	r3, [r7, #11]
 8002208:	f003 0207 	and.w	r2, r3, #7
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4413      	add	r3, r2
 800221c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2200      	movs	r2, #0
 800222e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2200      	movs	r2, #0
 8002234:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002236:	7afb      	ldrb	r3, [r7, #11]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	b2da      	uxtb	r2, r3
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6979      	ldr	r1, [r7, #20]
 8002248:	4618      	mov	r0, r3
 800224a:	f002 fccf 	bl	8004bec <USB_EPStartXfer>

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	f003 0207 	and.w	r2, r3, #7
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr

08002286 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	607a      	str	r2, [r7, #4]
 8002290:	603b      	str	r3, [r7, #0]
 8002292:	460b      	mov	r3, r1
 8002294:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002296:	7afb      	ldrb	r3, [r7, #11]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4413      	add	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2200      	movs	r2, #0
 80022ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2201      	movs	r2, #1
 80022d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022d2:	7afb      	ldrb	r3, [r7, #11]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6979      	ldr	r1, [r7, #20]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f002 fc81 	bl	8004bec <USB_EPStartXfer>

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	f003 0207 	and.w	r2, r3, #7
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	429a      	cmp	r2, r3
 800230c:	d901      	bls.n	8002312 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e04c      	b.n	80023ac <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002312:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002316:	2b00      	cmp	r3, #0
 8002318:	da0e      	bge.n	8002338 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2201      	movs	r2, #1
 8002334:	705a      	strb	r2, [r3, #1]
 8002336:	e00c      	b.n	8002352 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	b2da      	uxtb	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_PCD_EP_SetStall+0x7e>
 800236e:	2302      	movs	r3, #2
 8002370:	e01c      	b.n	80023ac <HAL_PCD_EP_SetStall+0xb8>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68f9      	ldr	r1, [r7, #12]
 8002380:	4618      	mov	r0, r3
 8002382:	f003 ffe4 	bl	800634e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	2b00      	cmp	r3, #0
 800238e:	d108      	bne.n	80023a2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800239a:	4619      	mov	r1, r3
 800239c:	4610      	mov	r0, r2
 800239e:	f004 f909 	bl	80065b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	f003 020f 	and.w	r2, r3, #15
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d901      	bls.n	80023d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e040      	b.n	8002454 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	da0e      	bge.n	80023f8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023da:	78fb      	ldrb	r3, [r7, #3]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2201      	movs	r2, #1
 80023f4:	705a      	strb	r2, [r3, #1]
 80023f6:	e00e      	b.n	8002416 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	f003 0207 	and.w	r2, r3, #7
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	b2da      	uxtb	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_PCD_EP_ClrStall+0x82>
 8002432:	2302      	movs	r3, #2
 8002434:	e00e      	b.n	8002454 <HAL_PCD_EP_ClrStall+0xa0>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68f9      	ldr	r1, [r7, #12]
 8002444:	4618      	mov	r0, r3
 8002446:	f003 ffd2 	bl	80063ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b096      	sub	sp, #88	; 0x58
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002464:	e3bf      	b.n	8002be6 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800246e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002472:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002480:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002484:	2b00      	cmp	r3, #0
 8002486:	f040 8179 	bne.w	800277c <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800248a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	2b00      	cmp	r3, #0
 8002494:	d152      	bne.n	800253c <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	b29b      	uxth	r3, r3
 800249e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a6:	81fb      	strh	r3, [r7, #14]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	89fb      	ldrh	r3, [r7, #14]
 80024ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3328      	adds	r3, #40	; 0x28
 80024be:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	3302      	adds	r3, #2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	441a      	add	r2, r3
 80024f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024fa:	2100      	movs	r1, #0
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f005 feb6 	bl	800826e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 836b 	beq.w	8002be6 <PCD_EP_ISR_Handler+0x78a>
 8002510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f040 8366 	bne.w	8002be6 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002526:	b2da      	uxtb	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	b292      	uxth	r2, r2
 800252e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800253a:	e354      	b.n	8002be6 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002542:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800254e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002556:	2b00      	cmp	r3, #0
 8002558:	d034      	beq.n	80025c4 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002562:	b29b      	uxth	r3, r3
 8002564:	461a      	mov	r2, r3
 8002566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	3306      	adds	r3, #6
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	4413      	add	r3, r2
 8002578:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002584:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002592:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002596:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002598:	b29b      	uxth	r3, r3
 800259a:	f004 f85b 	bl	8006654 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025aa:	4013      	ands	r3, r2
 80025ac:	823b      	strh	r3, [r7, #16]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	8a3a      	ldrh	r2, [r7, #16]
 80025b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025b8:	b292      	uxth	r2, r2
 80025ba:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f005 fe29 	bl	8008214 <HAL_PCD_SetupStageCallback>
 80025c2:	e310      	b.n	8002be6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025c4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f280 830c 	bge.w	8002be6 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025da:	4013      	ands	r3, r2
 80025dc:	83fb      	strh	r3, [r7, #30]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	8bfa      	ldrh	r2, [r7, #30]
 80025e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025e8:	b292      	uxth	r2, r2
 80025ea:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	461a      	mov	r2, r3
 80025f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4413      	add	r3, r2
 8002600:	3306      	adds	r3, #6
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	4413      	add	r3, r2
 800260a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002616:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d019      	beq.n	8002654 <PCD_EP_ISR_Handler+0x1f8>
 8002620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d015      	beq.n	8002654 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800262e:	6959      	ldr	r1, [r3, #20]
 8002630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002632:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002636:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002638:	b29b      	uxth	r3, r3
 800263a:	f004 f80b 	bl	8006654 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800263e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	441a      	add	r2, r3
 8002648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800264a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800264c:	2100      	movs	r1, #0
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f005 fdf2 	bl	8008238 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800265e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002666:	2b00      	cmp	r3, #0
 8002668:	f040 82bd 	bne.w	8002be6 <PCD_EP_ISR_Handler+0x78a>
 800266c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002670:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002674:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002678:	f000 82b5 	beq.w	8002be6 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	61bb      	str	r3, [r7, #24]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800268a:	b29b      	uxth	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	4413      	add	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	801a      	strh	r2, [r3, #0]
 80026ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	2b3e      	cmp	r3, #62	; 0x3e
 80026b2:	d91d      	bls.n	80026f0 <PCD_EP_ISR_Handler+0x294>
 80026b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	647b      	str	r3, [r7, #68]	; 0x44
 80026bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <PCD_EP_ISR_Handler+0x272>
 80026c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ca:	3b01      	subs	r3, #1
 80026cc:	647b      	str	r3, [r7, #68]	; 0x44
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	029b      	lsls	r3, r3, #10
 80026da:	b29b      	uxth	r3, r3
 80026dc:	4313      	orrs	r3, r2
 80026de:	b29b      	uxth	r3, r3
 80026e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	801a      	strh	r2, [r3, #0]
 80026ee:	e026      	b.n	800273e <PCD_EP_ISR_Handler+0x2e2>
 80026f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10a      	bne.n	800270e <PCD_EP_ISR_Handler+0x2b2>
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002706:	b29a      	uxth	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	801a      	strh	r2, [r3, #0]
 800270c:	e017      	b.n	800273e <PCD_EP_ISR_Handler+0x2e2>
 800270e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	085b      	lsrs	r3, r3, #1
 8002714:	647b      	str	r3, [r7, #68]	; 0x44
 8002716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <PCD_EP_ISR_Handler+0x2cc>
 8002722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002724:	3301      	adds	r3, #1
 8002726:	647b      	str	r3, [r7, #68]	; 0x44
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	b29a      	uxth	r2, r3
 800272e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002730:	b29b      	uxth	r3, r3
 8002732:	029b      	lsls	r3, r3, #10
 8002734:	b29b      	uxth	r3, r3
 8002736:	4313      	orrs	r3, r2
 8002738:	b29a      	uxth	r2, r3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b29b      	uxth	r3, r3
 8002746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800274a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274e:	827b      	strh	r3, [r7, #18]
 8002750:	8a7b      	ldrh	r3, [r7, #18]
 8002752:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002756:	827b      	strh	r3, [r7, #18]
 8002758:	8a7b      	ldrh	r3, [r7, #18]
 800275a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800275e:	827b      	strh	r3, [r7, #18]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	8a7b      	ldrh	r3, [r7, #18]
 8002766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800276a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800276e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002776:	b29b      	uxth	r3, r3
 8002778:	8013      	strh	r3, [r2, #0]
 800277a:	e234      	b.n	8002be6 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002790:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002794:	2b00      	cmp	r3, #0
 8002796:	f280 80fc 	bge.w	8002992 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027b0:	4013      	ands	r3, r2
 80027b2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80027c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027cc:	b292      	uxth	r2, r2
 80027ce:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80027d0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	4413      	add	r3, r2
 80027e4:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80027e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e8:	7b1b      	ldrb	r3, [r3, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d125      	bne.n	800283a <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	3306      	adds	r3, #6
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	4413      	add	r3, r2
 800280c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002816:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800281a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 8092 	beq.w	8002948 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800282a:	6959      	ldr	r1, [r3, #20]
 800282c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800282e:	88da      	ldrh	r2, [r3, #6]
 8002830:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002834:	f003 ff0e 	bl	8006654 <USB_ReadPMA>
 8002838:	e086      	b.n	8002948 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800283a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800283c:	78db      	ldrb	r3, [r3, #3]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d10a      	bne.n	8002858 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002842:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002846:	461a      	mov	r2, r3
 8002848:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f9d9 	bl	8002c02 <HAL_PCD_EP_DB_Receive>
 8002850:	4603      	mov	r3, r0
 8002852:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002856:	e077      	b.n	8002948 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800286e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002872:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	441a      	add	r2, r3
 8002884:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800288c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002894:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002898:	b29b      	uxth	r3, r3
 800289a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d024      	beq.n	8002900 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028be:	b29b      	uxth	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4413      	add	r3, r2
 80028ca:	3302      	adds	r3, #2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028de:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80028e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d02e      	beq.n	8002948 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f0:	6959      	ldr	r1, [r3, #20]
 80028f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f4:	891a      	ldrh	r2, [r3, #8]
 80028f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028fa:	f003 feab 	bl	8006654 <USB_ReadPMA>
 80028fe:	e023      	b.n	8002948 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002908:	b29b      	uxth	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	3306      	adds	r3, #6
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	4413      	add	r3, r2
 800291e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002928:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800292c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002930:	2b00      	cmp	r3, #0
 8002932:	d009      	beq.n	8002948 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6818      	ldr	r0, [r3, #0]
 8002938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293a:	6959      	ldr	r1, [r3, #20]
 800293c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293e:	895a      	ldrh	r2, [r3, #10]
 8002940:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002944:	f003 fe86 	bl	8006654 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800294a:	69da      	ldr	r2, [r3, #28]
 800294c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002950:	441a      	add	r2, r3
 8002952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002954:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002958:	695a      	ldr	r2, [r3, #20]
 800295a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800295e:	441a      	add	r2, r3
 8002960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002962:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <PCD_EP_ISR_Handler+0x51c>
 800296c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	429a      	cmp	r2, r3
 8002976:	d206      	bcs.n	8002986 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	4619      	mov	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f005 fc5a 	bl	8008238 <HAL_PCD_DataOutStageCallback>
 8002984:	e005      	b.n	8002992 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800298c:	4618      	mov	r0, r3
 800298e:	f002 f92d 	bl	8004bec <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002992:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8123 	beq.w	8002be6 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80029a0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80029ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	441a      	add	r2, r3
 80029e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80029e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80029f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f2:	78db      	ldrb	r3, [r3, #3]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	f040 80a2 	bne.w	8002b3e <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80029fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fc:	2200      	movs	r2, #0
 80029fe:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a02:	7b1b      	ldrb	r3, [r3, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 8093 	beq.w	8002b30 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d046      	beq.n	8002aa4 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a18:	785b      	ldrb	r3, [r3, #1]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d126      	bne.n	8002a6c <PCD_EP_ISR_Handler+0x610>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	461a      	mov	r2, r3
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	4413      	add	r3, r2
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
 8002a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	011a      	lsls	r2, r3, #4
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	4413      	add	r3, r2
 8002a40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a44:	623b      	str	r3, [r7, #32]
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	801a      	strh	r2, [r3, #0]
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	801a      	strh	r2, [r3, #0]
 8002a6a:	e061      	b.n	8002b30 <PCD_EP_ISR_Handler+0x6d4>
 8002a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6e:	785b      	ldrb	r3, [r3, #1]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d15d      	bne.n	8002b30 <PCD_EP_ISR_Handler+0x6d4>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a88:	4413      	add	r3, r2
 8002a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	011a      	lsls	r2, r3, #4
 8002a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a94:	4413      	add	r3, r2
 8002a96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	801a      	strh	r2, [r3, #0]
 8002aa2:	e045      	b.n	8002b30 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aac:	785b      	ldrb	r3, [r3, #1]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d126      	bne.n	8002b00 <PCD_EP_ISR_Handler+0x6a4>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac6:	4413      	add	r3, r2
 8002ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8002aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	011a      	lsls	r2, r3, #4
 8002ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ad8:	633b      	str	r3, [r7, #48]	; 0x30
 8002ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae8:	801a      	strh	r2, [r3, #0]
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afc:	801a      	strh	r2, [r3, #0]
 8002afe:	e017      	b.n	8002b30 <PCD_EP_ISR_Handler+0x6d4>
 8002b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b02:	785b      	ldrb	r3, [r3, #1]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d113      	bne.n	8002b30 <PCD_EP_ISR_Handler+0x6d4>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b16:	4413      	add	r3, r2
 8002b18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	011a      	lsls	r2, r3, #4
 8002b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b22:	4413      	add	r3, r2
 8002b24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b28:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	4619      	mov	r1, r3
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f005 fb99 	bl	800826e <HAL_PCD_DataInStageCallback>
 8002b3c:	e053      	b.n	8002be6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002b3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d146      	bne.n	8002bd8 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3302      	adds	r3, #2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d907      	bls.n	8002b92 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8002b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b8a:	1ad2      	subs	r2, r2, r3
 8002b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b8e:	619a      	str	r2, [r3, #24]
 8002b90:	e002      	b.n	8002b98 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8002b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d106      	bne.n	8002bae <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f005 fb61 	bl	800826e <HAL_PCD_DataInStageCallback>
 8002bac:	e01b      	b.n	8002be6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb0:	695a      	ldr	r2, [r3, #20]
 8002bb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002bb6:	441a      	add	r2, r3
 8002bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bba:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bbe:	69da      	ldr	r2, [r3, #28]
 8002bc0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002bc4:	441a      	add	r2, r3
 8002bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bc8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f002 f80b 	bl	8004bec <USB_EPStartXfer>
 8002bd6:	e006      	b.n	8002be6 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002bd8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002bdc:	461a      	mov	r2, r3
 8002bde:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f91b 	bl	8002e1c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	b21b      	sxth	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f6ff ac37 	blt.w	8002466 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3758      	adds	r7, #88	; 0x58
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b088      	sub	sp, #32
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d07e      	beq.n	8002d18 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3302      	adds	r3, #2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c42:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	699a      	ldr	r2, [r3, #24]
 8002c48:	8b7b      	ldrh	r3, [r7, #26]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d306      	bcc.n	8002c5c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	8b7b      	ldrh	r3, [r7, #26]
 8002c54:	1ad2      	subs	r2, r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	619a      	str	r2, [r3, #24]
 8002c5a:	e002      	b.n	8002c62 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d123      	bne.n	8002cb2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c84:	833b      	strh	r3, [r7, #24]
 8002c86:	8b3b      	ldrh	r3, [r7, #24]
 8002c88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c8c:	833b      	strh	r3, [r7, #24]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	441a      	add	r2, r3
 8002c9c:	8b3b      	ldrh	r3, [r7, #24]
 8002c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002cb2:	88fb      	ldrh	r3, [r7, #6]
 8002cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01f      	beq.n	8002cfc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd6:	82fb      	strh	r3, [r7, #22]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	441a      	add	r2, r3
 8002ce6:	8afb      	ldrh	r3, [r7, #22]
 8002ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002cfc:	8b7b      	ldrh	r3, [r7, #26]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 8087 	beq.w	8002e12 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	6959      	ldr	r1, [r3, #20]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	891a      	ldrh	r2, [r3, #8]
 8002d10:	8b7b      	ldrh	r3, [r7, #26]
 8002d12:	f003 fc9f 	bl	8006654 <USB_ReadPMA>
 8002d16:	e07c      	b.n	8002e12 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3306      	adds	r3, #6
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d40:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	699a      	ldr	r2, [r3, #24]
 8002d46:	8b7b      	ldrh	r3, [r7, #26]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d306      	bcc.n	8002d5a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	699a      	ldr	r2, [r3, #24]
 8002d50:	8b7b      	ldrh	r3, [r7, #26]
 8002d52:	1ad2      	subs	r2, r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	619a      	str	r2, [r3, #24]
 8002d58:	e002      	b.n	8002d60 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d123      	bne.n	8002db0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d82:	83fb      	strh	r3, [r7, #30]
 8002d84:	8bfb      	ldrh	r3, [r7, #30]
 8002d86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d8a:	83fb      	strh	r3, [r7, #30]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	461a      	mov	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	441a      	add	r2, r3
 8002d9a:	8bfb      	ldrh	r3, [r7, #30]
 8002d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d11f      	bne.n	8002dfa <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd4:	83bb      	strh	r3, [r7, #28]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	441a      	add	r2, r3
 8002de4:	8bbb      	ldrh	r3, [r7, #28]
 8002de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002dfa:	8b7b      	ldrh	r3, [r7, #26]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	6959      	ldr	r1, [r3, #20]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	895a      	ldrh	r2, [r3, #10]
 8002e0c:	8b7b      	ldrh	r3, [r7, #26]
 8002e0e:	f003 fc21 	bl	8006654 <USB_ReadPMA>
    }
  }

  return count;
 8002e12:	8b7b      	ldrh	r3, [r7, #26]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3720      	adds	r7, #32
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b0a4      	sub	sp, #144	; 0x90
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	4613      	mov	r3, r2
 8002e28:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 81dd 	beq.w	80031f0 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4413      	add	r3, r2
 8002e4a:	3302      	adds	r3, #2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	6812      	ldr	r2, [r2, #0]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e5e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d907      	bls.n	8002e7e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	699a      	ldr	r2, [r3, #24]
 8002e72:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e76:	1ad2      	subs	r2, r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	619a      	str	r2, [r3, #24]
 8002e7c:	e002      	b.n	8002e84 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2200      	movs	r2, #0
 8002e82:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f040 80b9 	bne.w	8003000 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	785b      	ldrb	r3, [r3, #1]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d126      	bne.n	8002ee4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eaa:	4413      	add	r3, r2
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	011a      	lsls	r2, r3, #4
 8002eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ecc:	801a      	strh	r2, [r3, #0]
 8002ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee0:	801a      	strh	r2, [r3, #0]
 8002ee2:	e01a      	b.n	8002f1a <HAL_PCD_EP_DB_Transmit+0xfe>
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	785b      	ldrb	r3, [r3, #1]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d116      	bne.n	8002f1a <HAL_PCD_EP_DB_Transmit+0xfe>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f00:	4413      	add	r3, r2
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	011a      	lsls	r2, r3, #4
 8002f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f12:	633b      	str	r3, [r7, #48]	; 0x30
 8002f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f16:	2200      	movs	r2, #0
 8002f18:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	785b      	ldrb	r3, [r3, #1]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d126      	bne.n	8002f76 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	011a      	lsls	r2, r3, #4
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f4e:	61bb      	str	r3, [r7, #24]
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	801a      	strh	r2, [r3, #0]
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	801a      	strh	r2, [r3, #0]
 8002f74:	e017      	b.n	8002fa6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	785b      	ldrb	r3, [r3, #1]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d113      	bne.n	8002fa6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	4413      	add	r3, r2
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	011a      	lsls	r2, r3, #4
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	4413      	add	r3, r2
 8002f9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f9e:	623b      	str	r3, [r7, #32]
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	4619      	mov	r1, r3
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f005 f95e 	bl	800826e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002fb2:	88fb      	ldrh	r3, [r7, #6]
 8002fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 82fc 	beq.w	80035b6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd8:	82fb      	strh	r3, [r7, #22]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	441a      	add	r2, r3
 8002fe8:	8afb      	ldrh	r3, [r7, #22]
 8002fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ff2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	8013      	strh	r3, [r2, #0]
 8002ffe:	e2da      	b.n	80035b6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d021      	beq.n	800304e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	b29b      	uxth	r3, r3
 800301c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003024:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	441a      	add	r2, r3
 8003036:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800303a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800303e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003042:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800304a:	b29b      	uxth	r3, r3
 800304c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003054:	2b01      	cmp	r3, #1
 8003056:	f040 82ae 	bne.w	80035b6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	695a      	ldr	r2, [r3, #20]
 800305e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003062:	441a      	add	r2, r3
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003070:	441a      	add	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	6a1a      	ldr	r2, [r3, #32]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	429a      	cmp	r2, r3
 8003080:	d30b      	bcc.n	800309a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	6a1a      	ldr	r2, [r3, #32]
 800308e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003092:	1ad2      	subs	r2, r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	621a      	str	r2, [r3, #32]
 8003098:	e017      	b.n	80030ca <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d108      	bne.n	80030b4 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80030a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030b2:	e00a      	b.n	80030ca <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2200      	movs	r2, #0
 80030c8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	785b      	ldrb	r3, [r3, #1]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d165      	bne.n	800319e <HAL_PCD_EP_DB_Transmit+0x382>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e6:	4413      	add	r3, r2
 80030e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	011a      	lsls	r2, r3, #4
 80030f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f2:	4413      	add	r3, r2
 80030f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80030fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003104:	b29a      	uxth	r2, r3
 8003106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003108:	801a      	strh	r2, [r3, #0]
 800310a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800310e:	2b3e      	cmp	r3, #62	; 0x3e
 8003110:	d91d      	bls.n	800314e <HAL_PCD_EP_DB_Transmit+0x332>
 8003112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	64bb      	str	r3, [r7, #72]	; 0x48
 800311a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800311e:	f003 031f 	and.w	r3, r3, #31
 8003122:	2b00      	cmp	r3, #0
 8003124:	d102      	bne.n	800312c <HAL_PCD_EP_DB_Transmit+0x310>
 8003126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003128:	3b01      	subs	r3, #1
 800312a:	64bb      	str	r3, [r7, #72]	; 0x48
 800312c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	b29a      	uxth	r2, r3
 8003132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003134:	b29b      	uxth	r3, r3
 8003136:	029b      	lsls	r3, r3, #10
 8003138:	b29b      	uxth	r3, r3
 800313a:	4313      	orrs	r3, r2
 800313c:	b29b      	uxth	r3, r3
 800313e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003146:	b29a      	uxth	r2, r3
 8003148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314a:	801a      	strh	r2, [r3, #0]
 800314c:	e044      	b.n	80031d8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800314e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10a      	bne.n	800316c <HAL_PCD_EP_DB_Transmit+0x350>
 8003156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	b29b      	uxth	r3, r3
 800315c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003164:	b29a      	uxth	r2, r3
 8003166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003168:	801a      	strh	r2, [r3, #0]
 800316a:	e035      	b.n	80031d8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800316c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003170:	085b      	lsrs	r3, r3, #1
 8003172:	64bb      	str	r3, [r7, #72]	; 0x48
 8003174:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003182:	3301      	adds	r3, #1
 8003184:	64bb      	str	r3, [r7, #72]	; 0x48
 8003186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	b29a      	uxth	r2, r3
 800318c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800318e:	b29b      	uxth	r3, r3
 8003190:	029b      	lsls	r3, r3, #10
 8003192:	b29b      	uxth	r3, r3
 8003194:	4313      	orrs	r3, r2
 8003196:	b29a      	uxth	r2, r3
 8003198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319a:	801a      	strh	r2, [r3, #0]
 800319c:	e01c      	b.n	80031d8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	785b      	ldrb	r3, [r3, #1]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d118      	bne.n	80031d8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	647b      	str	r3, [r7, #68]	; 0x44
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ba:	4413      	add	r3, r2
 80031bc:	647b      	str	r3, [r7, #68]	; 0x44
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	011a      	lsls	r2, r3, #4
 80031c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031c6:	4413      	add	r3, r2
 80031c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80031cc:	643b      	str	r3, [r7, #64]	; 0x40
 80031ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	6959      	ldr	r1, [r3, #20]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	891a      	ldrh	r2, [r3, #8]
 80031e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f003 f9ee 	bl	80065ca <USB_WritePMA>
 80031ee:	e1e2      	b.n	80035b6 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	461a      	mov	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	3306      	adds	r3, #6
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003218:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	699a      	ldr	r2, [r3, #24]
 8003220:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003224:	429a      	cmp	r2, r3
 8003226:	d307      	bcc.n	8003238 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	699a      	ldr	r2, [r3, #24]
 800322c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003230:	1ad2      	subs	r2, r2, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	619a      	str	r2, [r3, #24]
 8003236:	e002      	b.n	800323e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2200      	movs	r2, #0
 800323c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f040 80c0 	bne.w	80033c8 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	785b      	ldrb	r3, [r3, #1]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d126      	bne.n	800329e <HAL_PCD_EP_DB_Transmit+0x482>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800325e:	b29b      	uxth	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003264:	4413      	add	r3, r2
 8003266:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	011a      	lsls	r2, r3, #4
 800326e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003270:	4413      	add	r3, r2
 8003272:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003276:	67bb      	str	r3, [r7, #120]	; 0x78
 8003278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	b29b      	uxth	r3, r3
 800327e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003282:	b29a      	uxth	r2, r3
 8003284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003286:	801a      	strh	r2, [r3, #0]
 8003288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	b29b      	uxth	r3, r3
 800328e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003296:	b29a      	uxth	r2, r3
 8003298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800329a:	801a      	strh	r2, [r3, #0]
 800329c:	e01a      	b.n	80032d4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	785b      	ldrb	r3, [r3, #1]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d116      	bne.n	80032d4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	667b      	str	r3, [r7, #100]	; 0x64
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	461a      	mov	r2, r3
 80032b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032ba:	4413      	add	r3, r2
 80032bc:	667b      	str	r3, [r7, #100]	; 0x64
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	011a      	lsls	r2, r3, #4
 80032c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032c6:	4413      	add	r3, r2
 80032c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80032cc:	663b      	str	r3, [r7, #96]	; 0x60
 80032ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032d0:	2200      	movs	r2, #0
 80032d2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	677b      	str	r3, [r7, #116]	; 0x74
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	785b      	ldrb	r3, [r3, #1]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d12b      	bne.n	800333a <HAL_PCD_EP_DB_Transmit+0x51e>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f6:	4413      	add	r3, r2
 80032f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	011a      	lsls	r2, r3, #4
 8003300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003302:	4413      	add	r3, r2
 8003304:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003308:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800330c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	b29b      	uxth	r3, r3
 8003314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003318:	b29a      	uxth	r2, r3
 800331a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800331e:	801a      	strh	r2, [r3, #0]
 8003320:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	b29b      	uxth	r3, r3
 8003328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800332c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003330:	b29a      	uxth	r2, r3
 8003332:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003336:	801a      	strh	r2, [r3, #0]
 8003338:	e017      	b.n	800336a <HAL_PCD_EP_DB_Transmit+0x54e>
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	785b      	ldrb	r3, [r3, #1]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d113      	bne.n	800336a <HAL_PCD_EP_DB_Transmit+0x54e>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800334a:	b29b      	uxth	r3, r3
 800334c:	461a      	mov	r2, r3
 800334e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003350:	4413      	add	r3, r2
 8003352:	677b      	str	r3, [r7, #116]	; 0x74
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	011a      	lsls	r2, r3, #4
 800335a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800335c:	4413      	add	r3, r2
 800335e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003362:	673b      	str	r3, [r7, #112]	; 0x70
 8003364:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003366:	2200      	movs	r2, #0
 8003368:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	4619      	mov	r1, r3
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f004 ff7c 	bl	800826e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337c:	2b00      	cmp	r3, #0
 800337e:	f040 811a 	bne.w	80035b6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	b29b      	uxth	r3, r3
 8003394:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	441a      	add	r2, r3
 80033ae:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80033b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	8013      	strh	r3, [r2, #0]
 80033c6:	e0f6      	b.n	80035b6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d121      	bne.n	8003416 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	441a      	add	r2, r3
 80033fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800340a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800340e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003412:	b29b      	uxth	r3, r3
 8003414:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800341c:	2b01      	cmp	r3, #1
 800341e:	f040 80ca 	bne.w	80035b6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800342a:	441a      	add	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	69da      	ldr	r2, [r3, #28]
 8003434:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003438:	441a      	add	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	6a1a      	ldr	r2, [r3, #32]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	429a      	cmp	r2, r3
 8003448:	d30b      	bcc.n	8003462 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	6a1a      	ldr	r2, [r3, #32]
 8003456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800345a:	1ad2      	subs	r2, r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	621a      	str	r2, [r3, #32]
 8003460:	e017      	b.n	8003492 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d108      	bne.n	800347c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800346a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800346e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800347a:	e00a      	b.n	8003492 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2200      	movs	r2, #0
 8003488:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	657b      	str	r3, [r7, #84]	; 0x54
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	785b      	ldrb	r3, [r3, #1]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d165      	bne.n	800356c <HAL_PCD_EP_DB_Transmit+0x750>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	461a      	mov	r2, r3
 80034b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b4:	4413      	add	r3, r2
 80034b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	011a      	lsls	r2, r3, #4
 80034be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034c0:	4413      	add	r3, r2
 80034c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80034c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034d6:	801a      	strh	r2, [r3, #0]
 80034d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034dc:	2b3e      	cmp	r3, #62	; 0x3e
 80034de:	d91d      	bls.n	800351c <HAL_PCD_EP_DB_Transmit+0x700>
 80034e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80034e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d102      	bne.n	80034fa <HAL_PCD_EP_DB_Transmit+0x6de>
 80034f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034f6:	3b01      	subs	r3, #1
 80034f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80034fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	b29a      	uxth	r2, r3
 8003500:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003502:	b29b      	uxth	r3, r3
 8003504:	029b      	lsls	r3, r3, #10
 8003506:	b29b      	uxth	r3, r3
 8003508:	4313      	orrs	r3, r2
 800350a:	b29b      	uxth	r3, r3
 800350c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003514:	b29a      	uxth	r2, r3
 8003516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003518:	801a      	strh	r2, [r3, #0]
 800351a:	e041      	b.n	80035a0 <HAL_PCD_EP_DB_Transmit+0x784>
 800351c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10a      	bne.n	800353a <HAL_PCD_EP_DB_Transmit+0x71e>
 8003524:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800352e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003532:	b29a      	uxth	r2, r3
 8003534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003536:	801a      	strh	r2, [r3, #0]
 8003538:	e032      	b.n	80035a0 <HAL_PCD_EP_DB_Transmit+0x784>
 800353a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800353e:	085b      	lsrs	r3, r3, #1
 8003540:	66bb      	str	r3, [r7, #104]	; 0x68
 8003542:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_PCD_EP_DB_Transmit+0x738>
 800354e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003550:	3301      	adds	r3, #1
 8003552:	66bb      	str	r3, [r7, #104]	; 0x68
 8003554:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	b29a      	uxth	r2, r3
 800355a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800355c:	b29b      	uxth	r3, r3
 800355e:	029b      	lsls	r3, r3, #10
 8003560:	b29b      	uxth	r3, r3
 8003562:	4313      	orrs	r3, r2
 8003564:	b29a      	uxth	r2, r3
 8003566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003568:	801a      	strh	r2, [r3, #0]
 800356a:	e019      	b.n	80035a0 <HAL_PCD_EP_DB_Transmit+0x784>
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	785b      	ldrb	r3, [r3, #1]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d115      	bne.n	80035a0 <HAL_PCD_EP_DB_Transmit+0x784>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800357c:	b29b      	uxth	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003582:	4413      	add	r3, r2
 8003584:	657b      	str	r3, [r7, #84]	; 0x54
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	011a      	lsls	r2, r3, #4
 800358c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800358e:	4413      	add	r3, r2
 8003590:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003594:	653b      	str	r3, [r7, #80]	; 0x50
 8003596:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800359a:	b29a      	uxth	r2, r3
 800359c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800359e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	6959      	ldr	r1, [r3, #20]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	895a      	ldrh	r2, [r3, #10]
 80035ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	f003 f80a 	bl	80065ca <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035d0:	82bb      	strh	r3, [r7, #20]
 80035d2:	8abb      	ldrh	r3, [r7, #20]
 80035d4:	f083 0310 	eor.w	r3, r3, #16
 80035d8:	82bb      	strh	r3, [r7, #20]
 80035da:	8abb      	ldrh	r3, [r7, #20]
 80035dc:	f083 0320 	eor.w	r3, r3, #32
 80035e0:	82bb      	strh	r3, [r7, #20]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	441a      	add	r2, r3
 80035f0:	8abb      	ldrh	r3, [r7, #20]
 80035f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003602:	b29b      	uxth	r3, r3
 8003604:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3790      	adds	r7, #144	; 0x90
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	607b      	str	r3, [r7, #4]
 800361a:	460b      	mov	r3, r1
 800361c:	817b      	strh	r3, [r7, #10]
 800361e:	4613      	mov	r3, r2
 8003620:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003622:	897b      	ldrh	r3, [r7, #10]
 8003624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00b      	beq.n	8003646 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800362e:	897b      	ldrh	r3, [r7, #10]
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4413      	add	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	e009      	b.n	800365a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003646:	897a      	ldrh	r2, [r7, #10]
 8003648:	4613      	mov	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800365a:	893b      	ldrh	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d107      	bne.n	8003670 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	2200      	movs	r2, #0
 8003664:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	b29a      	uxth	r2, r3
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	80da      	strh	r2, [r3, #6]
 800366e:	e00b      	b.n	8003688 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2201      	movs	r2, #1
 8003674:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	b29a      	uxth	r2, r3
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	0c1b      	lsrs	r3, r3, #16
 8003682:	b29a      	uxth	r2, r3
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr

08003694 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e272      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 8087 	beq.w	80037c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036b4:	4b92      	ldr	r3, [pc, #584]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 030c 	and.w	r3, r3, #12
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d00c      	beq.n	80036da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036c0:	4b8f      	ldr	r3, [pc, #572]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 030c 	and.w	r3, r3, #12
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d112      	bne.n	80036f2 <HAL_RCC_OscConfig+0x5e>
 80036cc:	4b8c      	ldr	r3, [pc, #560]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d8:	d10b      	bne.n	80036f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036da:	4b89      	ldr	r3, [pc, #548]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d06c      	beq.n	80037c0 <HAL_RCC_OscConfig+0x12c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d168      	bne.n	80037c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e24c      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036fa:	d106      	bne.n	800370a <HAL_RCC_OscConfig+0x76>
 80036fc:	4b80      	ldr	r3, [pc, #512]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a7f      	ldr	r2, [pc, #508]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	e02e      	b.n	8003768 <HAL_RCC_OscConfig+0xd4>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10c      	bne.n	800372c <HAL_RCC_OscConfig+0x98>
 8003712:	4b7b      	ldr	r3, [pc, #492]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a7a      	ldr	r2, [pc, #488]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	4b78      	ldr	r3, [pc, #480]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a77      	ldr	r2, [pc, #476]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003724:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	e01d      	b.n	8003768 <HAL_RCC_OscConfig+0xd4>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003734:	d10c      	bne.n	8003750 <HAL_RCC_OscConfig+0xbc>
 8003736:	4b72      	ldr	r3, [pc, #456]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a71      	ldr	r2, [pc, #452]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 800373c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	4b6f      	ldr	r3, [pc, #444]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a6e      	ldr	r2, [pc, #440]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	e00b      	b.n	8003768 <HAL_RCC_OscConfig+0xd4>
 8003750:	4b6b      	ldr	r3, [pc, #428]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a6a      	ldr	r2, [pc, #424]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	4b68      	ldr	r3, [pc, #416]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a67      	ldr	r2, [pc, #412]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003766:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d013      	beq.n	8003798 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003770:	f7fd f9d6 	bl	8000b20 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003778:	f7fd f9d2 	bl	8000b20 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b64      	cmp	r3, #100	; 0x64
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e200      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378a:	4b5d      	ldr	r3, [pc, #372]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0xe4>
 8003796:	e014      	b.n	80037c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7fd f9c2 	bl	8000b20 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a0:	f7fd f9be 	bl	8000b20 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	; 0x64
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e1ec      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037b2:	4b53      	ldr	r3, [pc, #332]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x10c>
 80037be:	e000      	b.n	80037c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d063      	beq.n	8003896 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037ce:	4b4c      	ldr	r3, [pc, #304]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00b      	beq.n	80037f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037da:	4b49      	ldr	r3, [pc, #292]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d11c      	bne.n	8003820 <HAL_RCC_OscConfig+0x18c>
 80037e6:	4b46      	ldr	r3, [pc, #280]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d116      	bne.n	8003820 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f2:	4b43      	ldr	r3, [pc, #268]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <HAL_RCC_OscConfig+0x176>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d001      	beq.n	800380a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e1c0      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380a:	4b3d      	ldr	r3, [pc, #244]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4939      	ldr	r1, [pc, #228]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381e:	e03a      	b.n	8003896 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d020      	beq.n	800386a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003828:	4b36      	ldr	r3, [pc, #216]	; (8003904 <HAL_RCC_OscConfig+0x270>)
 800382a:	2201      	movs	r2, #1
 800382c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382e:	f7fd f977 	bl	8000b20 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003836:	f7fd f973 	bl	8000b20 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e1a1      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003848:	4b2d      	ldr	r3, [pc, #180]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003854:	4b2a      	ldr	r3, [pc, #168]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4927      	ldr	r1, [pc, #156]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003864:	4313      	orrs	r3, r2
 8003866:	600b      	str	r3, [r1, #0]
 8003868:	e015      	b.n	8003896 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800386a:	4b26      	ldr	r3, [pc, #152]	; (8003904 <HAL_RCC_OscConfig+0x270>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7fd f956 	bl	8000b20 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003878:	f7fd f952 	bl	8000b20 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e180      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388a:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d03a      	beq.n	8003918 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d019      	beq.n	80038de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038aa:	4b17      	ldr	r3, [pc, #92]	; (8003908 <HAL_RCC_OscConfig+0x274>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b0:	f7fd f936 	bl	8000b20 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b8:	f7fd f932 	bl	8000b20 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e160      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ca:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038d6:	2001      	movs	r0, #1
 80038d8:	f000 fa9c 	bl	8003e14 <RCC_Delay>
 80038dc:	e01c      	b.n	8003918 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038de:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <HAL_RCC_OscConfig+0x274>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e4:	f7fd f91c 	bl	8000b20 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ea:	e00f      	b.n	800390c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ec:	f7fd f918 	bl	8000b20 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d908      	bls.n	800390c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e146      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
 80038fe:	bf00      	nop
 8003900:	40021000 	.word	0x40021000
 8003904:	42420000 	.word	0x42420000
 8003908:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800390c:	4b92      	ldr	r3, [pc, #584]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e9      	bne.n	80038ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80a6 	beq.w	8003a72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003926:	2300      	movs	r3, #0
 8003928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800392a:	4b8b      	ldr	r3, [pc, #556]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10d      	bne.n	8003952 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003936:	4b88      	ldr	r3, [pc, #544]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	4a87      	ldr	r2, [pc, #540]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 800393c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003940:	61d3      	str	r3, [r2, #28]
 8003942:	4b85      	ldr	r3, [pc, #532]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394a:	60bb      	str	r3, [r7, #8]
 800394c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800394e:	2301      	movs	r3, #1
 8003950:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003952:	4b82      	ldr	r3, [pc, #520]	; (8003b5c <HAL_RCC_OscConfig+0x4c8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395a:	2b00      	cmp	r3, #0
 800395c:	d118      	bne.n	8003990 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800395e:	4b7f      	ldr	r3, [pc, #508]	; (8003b5c <HAL_RCC_OscConfig+0x4c8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a7e      	ldr	r2, [pc, #504]	; (8003b5c <HAL_RCC_OscConfig+0x4c8>)
 8003964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800396a:	f7fd f8d9 	bl	8000b20 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003972:	f7fd f8d5 	bl	8000b20 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b64      	cmp	r3, #100	; 0x64
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e103      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003984:	4b75      	ldr	r3, [pc, #468]	; (8003b5c <HAL_RCC_OscConfig+0x4c8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d106      	bne.n	80039a6 <HAL_RCC_OscConfig+0x312>
 8003998:	4b6f      	ldr	r3, [pc, #444]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	4a6e      	ldr	r2, [pc, #440]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	6213      	str	r3, [r2, #32]
 80039a4:	e02d      	b.n	8003a02 <HAL_RCC_OscConfig+0x36e>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x334>
 80039ae:	4b6a      	ldr	r3, [pc, #424]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	4a69      	ldr	r2, [pc, #420]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039b4:	f023 0301 	bic.w	r3, r3, #1
 80039b8:	6213      	str	r3, [r2, #32]
 80039ba:	4b67      	ldr	r3, [pc, #412]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	4a66      	ldr	r2, [pc, #408]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039c0:	f023 0304 	bic.w	r3, r3, #4
 80039c4:	6213      	str	r3, [r2, #32]
 80039c6:	e01c      	b.n	8003a02 <HAL_RCC_OscConfig+0x36e>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	2b05      	cmp	r3, #5
 80039ce:	d10c      	bne.n	80039ea <HAL_RCC_OscConfig+0x356>
 80039d0:	4b61      	ldr	r3, [pc, #388]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	4a60      	ldr	r2, [pc, #384]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039d6:	f043 0304 	orr.w	r3, r3, #4
 80039da:	6213      	str	r3, [r2, #32]
 80039dc:	4b5e      	ldr	r3, [pc, #376]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	4a5d      	ldr	r2, [pc, #372]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	6213      	str	r3, [r2, #32]
 80039e8:	e00b      	b.n	8003a02 <HAL_RCC_OscConfig+0x36e>
 80039ea:	4b5b      	ldr	r3, [pc, #364]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	4a5a      	ldr	r2, [pc, #360]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	6213      	str	r3, [r2, #32]
 80039f6:	4b58      	ldr	r3, [pc, #352]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	4a57      	ldr	r2, [pc, #348]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039fc:	f023 0304 	bic.w	r3, r3, #4
 8003a00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d015      	beq.n	8003a36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a0a:	f7fd f889 	bl	8000b20 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a10:	e00a      	b.n	8003a28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a12:	f7fd f885 	bl	8000b20 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e0b1      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a28:	4b4b      	ldr	r3, [pc, #300]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0ee      	beq.n	8003a12 <HAL_RCC_OscConfig+0x37e>
 8003a34:	e014      	b.n	8003a60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a36:	f7fd f873 	bl	8000b20 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a3c:	e00a      	b.n	8003a54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a3e:	f7fd f86f 	bl	8000b20 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e09b      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a54:	4b40      	ldr	r3, [pc, #256]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1ee      	bne.n	8003a3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d105      	bne.n	8003a72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a66:	4b3c      	ldr	r3, [pc, #240]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4a3b      	ldr	r2, [pc, #236]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 8087 	beq.w	8003b8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a7c:	4b36      	ldr	r3, [pc, #216]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d061      	beq.n	8003b4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d146      	bne.n	8003b1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a90:	4b33      	ldr	r3, [pc, #204]	; (8003b60 <HAL_RCC_OscConfig+0x4cc>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a96:	f7fd f843 	bl	8000b20 <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9e:	f7fd f83f 	bl	8000b20 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e06d      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ab0:	4b29      	ldr	r3, [pc, #164]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1f0      	bne.n	8003a9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac4:	d108      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ac6:	4b24      	ldr	r3, [pc, #144]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	4921      	ldr	r1, [pc, #132]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ad8:	4b1f      	ldr	r3, [pc, #124]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a19      	ldr	r1, [r3, #32]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	491b      	ldr	r1, [pc, #108]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af0:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <HAL_RCC_OscConfig+0x4cc>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af6:	f7fd f813 	bl	8000b20 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afe:	f7fd f80f 	bl	8000b20 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e03d      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b10:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x46a>
 8003b1c:	e035      	b.n	8003b8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <HAL_RCC_OscConfig+0x4cc>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b24:	f7fc fffc 	bl	8000b20 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fc fff8 	bl	8000b20 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e026      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b3e:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x498>
 8003b4a:	e01e      	b.n	8003b8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d107      	bne.n	8003b64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e019      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	40007000 	.word	0x40007000
 8003b60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b64:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_RCC_OscConfig+0x500>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d106      	bne.n	8003b86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d001      	beq.n	8003b8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40021000 	.word	0x40021000

08003b98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0d0      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bac:	4b6a      	ldr	r3, [pc, #424]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d910      	bls.n	8003bdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	4b67      	ldr	r3, [pc, #412]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 0207 	bic.w	r2, r3, #7
 8003bc2:	4965      	ldr	r1, [pc, #404]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	4b63      	ldr	r3, [pc, #396]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0b8      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d020      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bf4:	4b59      	ldr	r3, [pc, #356]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	4a58      	ldr	r2, [pc, #352]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003bfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c0c:	4b53      	ldr	r3, [pc, #332]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	4a52      	ldr	r2, [pc, #328]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c18:	4b50      	ldr	r3, [pc, #320]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	494d      	ldr	r1, [pc, #308]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d040      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d107      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3e:	4b47      	ldr	r3, [pc, #284]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d115      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e07f      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d107      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c56:	4b41      	ldr	r3, [pc, #260]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e073      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c66:	4b3d      	ldr	r3, [pc, #244]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e06b      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c76:	4b39      	ldr	r3, [pc, #228]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f023 0203 	bic.w	r2, r3, #3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	4936      	ldr	r1, [pc, #216]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c88:	f7fc ff4a 	bl	8000b20 <HAL_GetTick>
 8003c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8e:	e00a      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c90:	f7fc ff46 	bl	8000b20 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e053      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca6:	4b2d      	ldr	r3, [pc, #180]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 020c 	and.w	r2, r3, #12
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d1eb      	bne.n	8003c90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb8:	4b27      	ldr	r3, [pc, #156]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d210      	bcs.n	8003ce8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc6:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 0207 	bic.w	r2, r3, #7
 8003cce:	4922      	ldr	r1, [pc, #136]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd6:	4b20      	ldr	r3, [pc, #128]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e032      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf4:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	4916      	ldr	r1, [pc, #88]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d12:	4b12      	ldr	r3, [pc, #72]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	490e      	ldr	r1, [pc, #56]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d26:	f000 f821 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	490a      	ldr	r1, [pc, #40]	; (8003d60 <HAL_RCC_ClockConfig+0x1c8>)
 8003d38:	5ccb      	ldrb	r3, [r1, r3]
 8003d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3e:	4a09      	ldr	r2, [pc, #36]	; (8003d64 <HAL_RCC_ClockConfig+0x1cc>)
 8003d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d42:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <HAL_RCC_ClockConfig+0x1d0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fc fea8 	bl	8000a9c <HAL_InitTick>

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40022000 	.word	0x40022000
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	080087d0 	.word	0x080087d0
 8003d64:	20000000 	.word	0x20000000
 8003d68:	20000004 	.word	0x20000004

08003d6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	2300      	movs	r3, #0
 8003d80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d86:	4b1e      	ldr	r3, [pc, #120]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d002      	beq.n	8003d9c <HAL_RCC_GetSysClockFreq+0x30>
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d003      	beq.n	8003da2 <HAL_RCC_GetSysClockFreq+0x36>
 8003d9a:	e027      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d9c:	4b19      	ldr	r3, [pc, #100]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d9e:	613b      	str	r3, [r7, #16]
      break;
 8003da0:	e027      	b.n	8003df2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	0c9b      	lsrs	r3, r3, #18
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	4a17      	ldr	r2, [pc, #92]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003dac:	5cd3      	ldrb	r3, [r2, r3]
 8003dae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d010      	beq.n	8003ddc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dba:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	0c5b      	lsrs	r3, r3, #17
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	4a11      	ldr	r2, [pc, #68]	; (8003e0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003dc6:	5cd3      	ldrb	r3, [r2, r3]
 8003dc8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a0d      	ldr	r2, [pc, #52]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dce:	fb03 f202 	mul.w	r2, r3, r2
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	e004      	b.n	8003de6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a0c      	ldr	r2, [pc, #48]	; (8003e10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003de0:	fb02 f303 	mul.w	r3, r2, r3
 8003de4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	613b      	str	r3, [r7, #16]
      break;
 8003dea:	e002      	b.n	8003df2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dee:	613b      	str	r3, [r7, #16]
      break;
 8003df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003df2:	693b      	ldr	r3, [r7, #16]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	371c      	adds	r7, #28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40021000 	.word	0x40021000
 8003e04:	007a1200 	.word	0x007a1200
 8003e08:	080087e0 	.word	0x080087e0
 8003e0c:	080087f0 	.word	0x080087f0
 8003e10:	003d0900 	.word	0x003d0900

08003e14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <RCC_Delay+0x34>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a0a      	ldr	r2, [pc, #40]	; (8003e4c <RCC_Delay+0x38>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	0a5b      	lsrs	r3, r3, #9
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	fb02 f303 	mul.w	r3, r2, r3
 8003e2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e30:	bf00      	nop
  }
  while (Delay --);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	1e5a      	subs	r2, r3, #1
 8003e36:	60fa      	str	r2, [r7, #12]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1f9      	bne.n	8003e30 <RCC_Delay+0x1c>
}
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr
 8003e48:	20000000 	.word	0x20000000
 8003e4c:	10624dd3 	.word	0x10624dd3

08003e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d07d      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e70:	4b4f      	ldr	r3, [pc, #316]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10d      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e7c:	4b4c      	ldr	r3, [pc, #304]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	4a4b      	ldr	r2, [pc, #300]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e86:	61d3      	str	r3, [r2, #28]
 8003e88:	4b49      	ldr	r3, [pc, #292]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e94:	2301      	movs	r3, #1
 8003e96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e98:	4b46      	ldr	r3, [pc, #280]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d118      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ea4:	4b43      	ldr	r3, [pc, #268]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a42      	ldr	r2, [pc, #264]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eb0:	f7fc fe36 	bl	8000b20 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb6:	e008      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb8:	f7fc fe32 	bl	8000b20 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b64      	cmp	r3, #100	; 0x64
 8003ec4:	d901      	bls.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e06d      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eca:	4b3a      	ldr	r3, [pc, #232]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ed6:	4b36      	ldr	r3, [pc, #216]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ede:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d02e      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d027      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ef4:	4b2e      	ldr	r3, [pc, #184]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003efe:	4b2e      	ldr	r3, [pc, #184]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f04:	4b2c      	ldr	r3, [pc, #176]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f0a:	4a29      	ldr	r2, [pc, #164]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d014      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1a:	f7fc fe01 	bl	8000b20 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f20:	e00a      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f22:	f7fc fdfd 	bl	8000b20 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e036      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f38:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0ee      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f44:	4b1a      	ldr	r3, [pc, #104]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	4917      	ldr	r1, [pc, #92]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f56:	7dfb      	ldrb	r3, [r7, #23]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d105      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5c:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	4a13      	ldr	r2, [pc, #76]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f74:	4b0e      	ldr	r3, [pc, #56]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	490b      	ldr	r1, [pc, #44]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d008      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f92:	4b07      	ldr	r3, [pc, #28]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	4904      	ldr	r1, [pc, #16]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	40007000 	.word	0x40007000
 8003fb8:	42420440 	.word	0x42420440

08003fbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003fbc:	b084      	sub	sp, #16
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	f107 0014 	add.w	r0, r7, #20
 8003fca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	b004      	add	sp, #16
 8003fda:	4770      	bx	lr

08003fdc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ff0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr

08004008 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004010:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004014:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	b29b      	uxth	r3, r3
 8004022:	43db      	mvns	r3, r3
 8004024:	b29b      	uxth	r3, r3
 8004026:	4013      	ands	r3, r2
 8004028:	b29a      	uxth	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr

0800403c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr

08004054 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004054:	b084      	sub	sp, #16
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	f107 0014 	add.w	r0, r7, #20
 8004062:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	b004      	add	sp, #16
 8004092:	4770      	bx	lr

08004094 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004094:	b480      	push	{r7}
 8004096:	b09d      	sub	sp, #116	; 0x74
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80040b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	78db      	ldrb	r3, [r3, #3]
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d81f      	bhi.n	8004106 <USB_ActivateEndpoint+0x72>
 80040c6:	a201      	add	r2, pc, #4	; (adr r2, 80040cc <USB_ActivateEndpoint+0x38>)
 80040c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040cc:	080040dd 	.word	0x080040dd
 80040d0:	080040f9 	.word	0x080040f9
 80040d4:	0800410f 	.word	0x0800410f
 80040d8:	080040eb 	.word	0x080040eb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80040dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80040e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80040e8:	e012      	b.n	8004110 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80040ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80040ee:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80040f2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80040f6:	e00b      	b.n	8004110 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80040f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80040fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004100:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004104:	e004      	b.n	8004110 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800410c:	e000      	b.n	8004110 <USB_ActivateEndpoint+0x7c>
      break;
 800410e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	441a      	add	r2, r3
 800411a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800411e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800412a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800412e:	b29b      	uxth	r3, r3
 8004130:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	b29b      	uxth	r3, r3
 8004140:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004148:	b29a      	uxth	r2, r3
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	b29b      	uxth	r3, r3
 8004150:	4313      	orrs	r3, r2
 8004152:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	441a      	add	r2, r3
 8004160:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800416c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004174:	b29b      	uxth	r3, r3
 8004176:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	7b1b      	ldrb	r3, [r3, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	f040 8178 	bne.w	8004472 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	785b      	ldrb	r3, [r3, #1]
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 8084 	beq.w	8004294 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	61bb      	str	r3, [r7, #24]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004196:	b29b      	uxth	r3, r3
 8004198:	461a      	mov	r2, r3
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	4413      	add	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	011a      	lsls	r2, r3, #4
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	88db      	ldrh	r3, [r3, #6]
 80041b4:	085b      	lsrs	r3, r3, #1
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	827b      	strh	r3, [r7, #18]
 80041ce:	8a7b      	ldrh	r3, [r7, #18]
 80041d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01b      	beq.n	8004210 <USB_ActivateEndpoint+0x17c>
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ee:	823b      	strh	r3, [r7, #16]
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	441a      	add	r2, r3
 80041fa:	8a3b      	ldrh	r3, [r7, #16]
 80041fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004208:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800420c:	b29b      	uxth	r3, r3
 800420e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	78db      	ldrb	r3, [r3, #3]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d020      	beq.n	800425a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	b29b      	uxth	r3, r3
 8004226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800422e:	81bb      	strh	r3, [r7, #12]
 8004230:	89bb      	ldrh	r3, [r7, #12]
 8004232:	f083 0320 	eor.w	r3, r3, #32
 8004236:	81bb      	strh	r3, [r7, #12]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	441a      	add	r2, r3
 8004242:	89bb      	ldrh	r3, [r7, #12]
 8004244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800424c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004254:	b29b      	uxth	r3, r3
 8004256:	8013      	strh	r3, [r2, #0]
 8004258:	e2d5      	b.n	8004806 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	b29b      	uxth	r3, r3
 8004268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800426c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004270:	81fb      	strh	r3, [r7, #14]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	441a      	add	r2, r3
 800427c:	89fb      	ldrh	r3, [r7, #14]
 800427e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800428a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800428e:	b29b      	uxth	r3, r3
 8004290:	8013      	strh	r3, [r2, #0]
 8004292:	e2b8      	b.n	8004806 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	633b      	str	r3, [r7, #48]	; 0x30
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800429e:	b29b      	uxth	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	4413      	add	r3, r2
 80042a6:	633b      	str	r3, [r7, #48]	; 0x30
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	011a      	lsls	r2, r3, #4
 80042ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80042b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	88db      	ldrh	r3, [r3, #6]
 80042bc:	085b      	lsrs	r3, r3, #1
 80042be:	b29b      	uxth	r3, r3
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	4413      	add	r3, r2
 80042da:	62bb      	str	r3, [r7, #40]	; 0x28
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	011a      	lsls	r2, r3, #4
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	4413      	add	r3, r2
 80042e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	801a      	strh	r2, [r3, #0]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	2b3e      	cmp	r3, #62	; 0x3e
 8004302:	d91d      	bls.n	8004340 <USB_ActivateEndpoint+0x2ac>
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	095b      	lsrs	r3, r3, #5
 800430a:	66bb      	str	r3, [r7, #104]	; 0x68
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	2b00      	cmp	r3, #0
 8004316:	d102      	bne.n	800431e <USB_ActivateEndpoint+0x28a>
 8004318:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800431a:	3b01      	subs	r3, #1
 800431c:	66bb      	str	r3, [r7, #104]	; 0x68
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	b29a      	uxth	r2, r3
 8004324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004326:	b29b      	uxth	r3, r3
 8004328:	029b      	lsls	r3, r3, #10
 800432a:	b29b      	uxth	r3, r3
 800432c:	4313      	orrs	r3, r2
 800432e:	b29b      	uxth	r3, r3
 8004330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004338:	b29a      	uxth	r2, r3
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	801a      	strh	r2, [r3, #0]
 800433e:	e026      	b.n	800438e <USB_ActivateEndpoint+0x2fa>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10a      	bne.n	800435e <USB_ActivateEndpoint+0x2ca>
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	b29b      	uxth	r3, r3
 800434e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004356:	b29a      	uxth	r2, r3
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	801a      	strh	r2, [r3, #0]
 800435c:	e017      	b.n	800438e <USB_ActivateEndpoint+0x2fa>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	085b      	lsrs	r3, r3, #1
 8004364:	66bb      	str	r3, [r7, #104]	; 0x68
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <USB_ActivateEndpoint+0x2e4>
 8004372:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004374:	3301      	adds	r3, #1
 8004376:	66bb      	str	r3, [r7, #104]	; 0x68
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	b29a      	uxth	r2, r3
 800437e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004380:	b29b      	uxth	r3, r3
 8004382:	029b      	lsls	r3, r3, #10
 8004384:	b29b      	uxth	r3, r3
 8004386:	4313      	orrs	r3, r2
 8004388:	b29a      	uxth	r2, r3
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	847b      	strh	r3, [r7, #34]	; 0x22
 800439c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800439e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d01b      	beq.n	80043de <USB_ActivateEndpoint+0x34a>
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043bc:	843b      	strh	r3, [r7, #32]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	441a      	add	r2, r3
 80043c8:	8c3b      	ldrh	r3, [r7, #32]
 80043ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043da:	b29b      	uxth	r3, r3
 80043dc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d124      	bne.n	8004430 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fc:	83bb      	strh	r3, [r7, #28]
 80043fe:	8bbb      	ldrh	r3, [r7, #28]
 8004400:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004404:	83bb      	strh	r3, [r7, #28]
 8004406:	8bbb      	ldrh	r3, [r7, #28]
 8004408:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800440c:	83bb      	strh	r3, [r7, #28]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	441a      	add	r2, r3
 8004418:	8bbb      	ldrh	r3, [r7, #28]
 800441a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800441e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800442a:	b29b      	uxth	r3, r3
 800442c:	8013      	strh	r3, [r2, #0]
 800442e:	e1ea      	b.n	8004806 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	b29b      	uxth	r3, r3
 800443e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004446:	83fb      	strh	r3, [r7, #30]
 8004448:	8bfb      	ldrh	r3, [r7, #30]
 800444a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800444e:	83fb      	strh	r3, [r7, #30]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	441a      	add	r2, r3
 800445a:	8bfb      	ldrh	r3, [r7, #30]
 800445c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004464:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800446c:	b29b      	uxth	r3, r3
 800446e:	8013      	strh	r3, [r2, #0]
 8004470:	e1c9      	b.n	8004806 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	78db      	ldrb	r3, [r3, #3]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d11e      	bne.n	80044b8 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800448c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004490:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	441a      	add	r2, r3
 800449e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80044a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044aa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80044ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	8013      	strh	r3, [r2, #0]
 80044b6:	e01d      	b.n	80044f4 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80044ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	441a      	add	r2, r3
 80044dc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80044e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044fe:	b29b      	uxth	r3, r3
 8004500:	461a      	mov	r2, r3
 8004502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004504:	4413      	add	r3, r2
 8004506:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	011a      	lsls	r2, r3, #4
 800450e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004510:	4413      	add	r3, r2
 8004512:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004516:	65bb      	str	r3, [r7, #88]	; 0x58
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	891b      	ldrh	r3, [r3, #8]
 800451c:	085b      	lsrs	r3, r3, #1
 800451e:	b29b      	uxth	r3, r3
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004526:	801a      	strh	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	657b      	str	r3, [r7, #84]	; 0x54
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004532:	b29b      	uxth	r3, r3
 8004534:	461a      	mov	r2, r3
 8004536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004538:	4413      	add	r3, r2
 800453a:	657b      	str	r3, [r7, #84]	; 0x54
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	011a      	lsls	r2, r3, #4
 8004542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004544:	4413      	add	r3, r2
 8004546:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800454a:	653b      	str	r3, [r7, #80]	; 0x50
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	895b      	ldrh	r3, [r3, #10]
 8004550:	085b      	lsrs	r3, r3, #1
 8004552:	b29b      	uxth	r3, r3
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800455a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	785b      	ldrb	r3, [r3, #1]
 8004560:	2b00      	cmp	r3, #0
 8004562:	f040 8093 	bne.w	800468c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004576:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800457a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d01b      	beq.n	80045ba <USB_ActivateEndpoint+0x526>
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	b29b      	uxth	r3, r3
 8004590:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004598:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	441a      	add	r2, r3
 80045a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80045a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80045c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80045ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d01b      	beq.n	800460a <USB_ActivateEndpoint+0x576>
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	441a      	add	r2, r3
 80045f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80045f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004602:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004606:	b29b      	uxth	r3, r3
 8004608:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	b29b      	uxth	r3, r3
 8004618:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800461c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004620:	873b      	strh	r3, [r7, #56]	; 0x38
 8004622:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004624:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004628:	873b      	strh	r3, [r7, #56]	; 0x38
 800462a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800462c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004630:	873b      	strh	r3, [r7, #56]	; 0x38
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	441a      	add	r2, r3
 800463c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800463e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800464a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464e:	b29b      	uxth	r3, r3
 8004650:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	b29b      	uxth	r3, r3
 8004660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004668:	86fb      	strh	r3, [r7, #54]	; 0x36
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	441a      	add	r2, r3
 8004674:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800467a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800467e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004686:	b29b      	uxth	r3, r3
 8004688:	8013      	strh	r3, [r2, #0]
 800468a:	e0bc      	b.n	8004806 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800469c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d01d      	beq.n	80046e4 <USB_ActivateEndpoint+0x650>
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	881b      	ldrh	r3, [r3, #0]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046be:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	441a      	add	r2, r3
 80046cc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80046d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80046f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01d      	beq.n	800473c <USB_ActivateEndpoint+0x6a8>
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b29b      	uxth	r3, r3
 800470e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004716:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	441a      	add	r2, r3
 8004724:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800472c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004734:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004738:	b29b      	uxth	r3, r3
 800473a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	78db      	ldrb	r3, [r3, #3]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d024      	beq.n	800478e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	b29b      	uxth	r3, r3
 8004752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800475a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800475e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004762:	f083 0320 	eor.w	r3, r3, #32
 8004766:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	441a      	add	r2, r3
 8004774:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800477c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004788:	b29b      	uxth	r3, r3
 800478a:	8013      	strh	r3, [r2, #0]
 800478c:	e01d      	b.n	80047ca <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047a4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	441a      	add	r2, r3
 80047b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80047b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	441a      	add	r2, r3
 80047ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80047f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004802:	b29b      	uxth	r3, r3
 8004804:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004806:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800480a:	4618      	mov	r0, r3
 800480c:	3774      	adds	r7, #116	; 0x74
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr

08004814 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004814:	b480      	push	{r7}
 8004816:	b08d      	sub	sp, #52	; 0x34
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	7b1b      	ldrb	r3, [r3, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	f040 808e 	bne.w	8004944 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	785b      	ldrb	r3, [r3, #1]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d044      	beq.n	80048ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	81bb      	strh	r3, [r7, #12]
 800483e:	89bb      	ldrh	r3, [r7, #12]
 8004840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01b      	beq.n	8004880 <USB_DeactivateEndpoint+0x6c>
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	b29b      	uxth	r3, r3
 8004856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800485a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485e:	817b      	strh	r3, [r7, #10]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	441a      	add	r2, r3
 800486a:	897b      	ldrh	r3, [r7, #10]
 800486c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004878:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800487c:	b29b      	uxth	r3, r3
 800487e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	b29b      	uxth	r3, r3
 800488e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004896:	813b      	strh	r3, [r7, #8]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	441a      	add	r2, r3
 80048a2:	893b      	ldrh	r3, [r7, #8]
 80048a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	8013      	strh	r3, [r2, #0]
 80048b8:	e192      	b.n	8004be0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	827b      	strh	r3, [r7, #18]
 80048c8:	8a7b      	ldrh	r3, [r7, #18]
 80048ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d01b      	beq.n	800490a <USB_DeactivateEndpoint+0xf6>
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e8:	823b      	strh	r3, [r7, #16]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	441a      	add	r2, r3
 80048f4:	8a3b      	ldrh	r3, [r7, #16]
 80048f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004906:	b29b      	uxth	r3, r3
 8004908:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b29b      	uxth	r3, r3
 8004918:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800491c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004920:	81fb      	strh	r3, [r7, #14]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	441a      	add	r2, r3
 800492c:	89fb      	ldrh	r3, [r7, #14]
 800492e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800493a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800493e:	b29b      	uxth	r3, r3
 8004940:	8013      	strh	r3, [r2, #0]
 8004942:	e14d      	b.n	8004be0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	785b      	ldrb	r3, [r3, #1]
 8004948:	2b00      	cmp	r3, #0
 800494a:	f040 80a5 	bne.w	8004a98 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	843b      	strh	r3, [r7, #32]
 800495c:	8c3b      	ldrh	r3, [r7, #32]
 800495e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01b      	beq.n	800499e <USB_DeactivateEndpoint+0x18a>
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	b29b      	uxth	r3, r3
 8004974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497c:	83fb      	strh	r3, [r7, #30]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	441a      	add	r2, r3
 8004988:	8bfb      	ldrh	r3, [r7, #30]
 800498a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800498e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004992:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800499a:	b29b      	uxth	r3, r3
 800499c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	83bb      	strh	r3, [r7, #28]
 80049ac:	8bbb      	ldrh	r3, [r7, #28]
 80049ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01b      	beq.n	80049ee <USB_DeactivateEndpoint+0x1da>
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049cc:	837b      	strh	r3, [r7, #26]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	441a      	add	r2, r3
 80049d8:	8b7b      	ldrh	r3, [r7, #26]
 80049da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a04:	833b      	strh	r3, [r7, #24]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	441a      	add	r2, r3
 8004a10:	8b3b      	ldrh	r3, [r7, #24]
 8004a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3c:	82fb      	strh	r3, [r7, #22]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	441a      	add	r2, r3
 8004a48:	8afb      	ldrh	r3, [r7, #22]
 8004a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a74:	82bb      	strh	r3, [r7, #20]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	441a      	add	r2, r3
 8004a80:	8abb      	ldrh	r3, [r7, #20]
 8004a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	8013      	strh	r3, [r2, #0]
 8004a96:	e0a3      	b.n	8004be0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004aa6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01b      	beq.n	8004ae8 <USB_DeactivateEndpoint+0x2d4>
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	441a      	add	r2, r3
 8004ad2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004adc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004af6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01b      	beq.n	8004b38 <USB_DeactivateEndpoint+0x324>
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b16:	853b      	strh	r3, [r7, #40]	; 0x28
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	441a      	add	r2, r3
 8004b22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	441a      	add	r2, r3
 8004b5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b86:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	441a      	add	r2, r3
 8004b92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bbe:	847b      	strh	r3, [r7, #34]	; 0x22
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	441a      	add	r2, r3
 8004bca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3734      	adds	r7, #52	; 0x34
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr

08004bec <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b0c2      	sub	sp, #264	; 0x108
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bfa:	6018      	str	r0, [r3, #0]
 8004bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c04:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	785b      	ldrb	r3, [r3, #1]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	f040 86b7 	bne.w	8005986 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699a      	ldr	r2, [r3, #24]
 8004c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d908      	bls.n	8004c46 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c44:	e007      	b.n	8004c56 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	7b1b      	ldrb	r3, [r3, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d13a      	bne.n	8004cdc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6959      	ldr	r1, [r3, #20]
 8004c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	88da      	ldrh	r2, [r3, #6]
 8004c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004c88:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004c8c:	6800      	ldr	r0, [r0, #0]
 8004c8e:	f001 fc9c 	bl	80065ca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	613b      	str	r3, [r7, #16]
 8004c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ca2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	461a      	mov	r2, r3
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	011a      	lsls	r2, r3, #4
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	801a      	strh	r2, [r3, #0]
 8004cd8:	f000 be1f 	b.w	800591a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	78db      	ldrb	r3, [r3, #3]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	f040 8462 	bne.w	80055b2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6a1a      	ldr	r2, [r3, #32]
 8004cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	f240 83df 	bls.w	80054ca <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d32:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	441a      	add	r2, r3
 8004d50:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d5c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6a1a      	ldr	r2, [r3, #32]
 8004d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d78:	1ad2      	subs	r2, r2, r3
 8004d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 81c7 	beq.w	800513c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004db2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	633b      	str	r3, [r7, #48]	; 0x30
 8004dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	785b      	ldrb	r3, [r3, #1]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d177      	bne.n	8004eba <USB_EPStartXfer+0x2ce>
 8004dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	461a      	mov	r2, r3
 8004de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dea:	4413      	add	r3, r2
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	011a      	lsls	r2, r3, #4
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	4413      	add	r3, r2
 8004e00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	801a      	strh	r2, [r3, #0]
 8004e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e1a:	2b3e      	cmp	r3, #62	; 0x3e
 8004e1c:	d921      	bls.n	8004e62 <USB_EPStartXfer+0x276>
 8004e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e2c:	f003 031f 	and.w	r3, r3, #31
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d104      	bne.n	8004e3e <USB_EPStartXfer+0x252>
 8004e34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	029b      	lsls	r3, r3, #10
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	801a      	strh	r2, [r3, #0]
 8004e60:	e050      	b.n	8004f04 <USB_EPStartXfer+0x318>
 8004e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10a      	bne.n	8004e80 <USB_EPStartXfer+0x294>
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	801a      	strh	r2, [r3, #0]
 8004e7e:	e041      	b.n	8004f04 <USB_EPStartXfer+0x318>
 8004e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e84:	085b      	lsrs	r3, r3, #1
 8004e86:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d004      	beq.n	8004ea0 <USB_EPStartXfer+0x2b4>
 8004e96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	029b      	lsls	r3, r3, #10
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	801a      	strh	r2, [r3, #0]
 8004eb8:	e024      	b.n	8004f04 <USB_EPStartXfer+0x318>
 8004eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	785b      	ldrb	r3, [r3, #1]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d11c      	bne.n	8004f04 <USB_EPStartXfer+0x318>
 8004eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ece:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	461a      	mov	r2, r3
 8004edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ede:	4413      	add	r3, r2
 8004ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	011a      	lsls	r2, r3, #4
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	895b      	ldrh	r3, [r3, #10]
 8004f10:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6959      	ldr	r1, [r3, #20]
 8004f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004f2a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004f2e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004f32:	6800      	ldr	r0, [r0, #0]
 8004f34:	f001 fb49 	bl	80065ca <USB_WritePMA>
            ep->xfer_buff += len;
 8004f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695a      	ldr	r2, [r3, #20]
 8004f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f48:	441a      	add	r2, r3
 8004f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6a1a      	ldr	r2, [r3, #32]
 8004f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d90f      	bls.n	8004f92 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6a1a      	ldr	r2, [r3, #32]
 8004f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f82:	1ad2      	subs	r2, r2, r3
 8004f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	621a      	str	r2, [r3, #32]
 8004f90:	e00e      	b.n	8004fb0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2200      	movs	r2, #0
 8004fae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	785b      	ldrb	r3, [r3, #1]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d177      	bne.n	80050b0 <USB_EPStartXfer+0x4c4>
 8004fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	61bb      	str	r3, [r7, #24]
 8004fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	461a      	mov	r2, r3
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	61bb      	str	r3, [r7, #24]
 8004fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	011a      	lsls	r2, r3, #4
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b29b      	uxth	r3, r3
 8005002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005006:	b29a      	uxth	r2, r3
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	801a      	strh	r2, [r3, #0]
 800500c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005010:	2b3e      	cmp	r3, #62	; 0x3e
 8005012:	d921      	bls.n	8005058 <USB_EPStartXfer+0x46c>
 8005014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005018:	095b      	lsrs	r3, r3, #5
 800501a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800501e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005022:	f003 031f 	and.w	r3, r3, #31
 8005026:	2b00      	cmp	r3, #0
 8005028:	d104      	bne.n	8005034 <USB_EPStartXfer+0x448>
 800502a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800502e:	3b01      	subs	r3, #1
 8005030:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29a      	uxth	r2, r3
 800503a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800503e:	b29b      	uxth	r3, r3
 8005040:	029b      	lsls	r3, r3, #10
 8005042:	b29b      	uxth	r3, r3
 8005044:	4313      	orrs	r3, r2
 8005046:	b29b      	uxth	r3, r3
 8005048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800504c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005050:	b29a      	uxth	r2, r3
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	801a      	strh	r2, [r3, #0]
 8005056:	e056      	b.n	8005106 <USB_EPStartXfer+0x51a>
 8005058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10a      	bne.n	8005076 <USB_EPStartXfer+0x48a>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29b      	uxth	r3, r3
 8005066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800506a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800506e:	b29a      	uxth	r2, r3
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	801a      	strh	r2, [r3, #0]
 8005074:	e047      	b.n	8005106 <USB_EPStartXfer+0x51a>
 8005076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800507a:	085b      	lsrs	r3, r3, #1
 800507c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d004      	beq.n	8005096 <USB_EPStartXfer+0x4aa>
 800508c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005090:	3301      	adds	r3, #1
 8005092:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	b29a      	uxth	r2, r3
 800509c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	029b      	lsls	r3, r3, #10
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	4313      	orrs	r3, r2
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	801a      	strh	r2, [r3, #0]
 80050ae:	e02a      	b.n	8005106 <USB_EPStartXfer+0x51a>
 80050b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	785b      	ldrb	r3, [r3, #1]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d122      	bne.n	8005106 <USB_EPStartXfer+0x51a>
 80050c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	623b      	str	r3, [r7, #32]
 80050cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050da:	b29b      	uxth	r3, r3
 80050dc:	461a      	mov	r2, r3
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	4413      	add	r3, r2
 80050e2:	623b      	str	r3, [r7, #32]
 80050e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	011a      	lsls	r2, r3, #4
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	4413      	add	r3, r2
 80050f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050fa:	61fb      	str	r3, [r7, #28]
 80050fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005100:	b29a      	uxth	r2, r3
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800510a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	891b      	ldrh	r3, [r3, #8]
 8005112:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800511a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6959      	ldr	r1, [r3, #20]
 8005122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005126:	b29b      	uxth	r3, r3
 8005128:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800512c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005130:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005134:	6800      	ldr	r0, [r0, #0]
 8005136:	f001 fa48 	bl	80065ca <USB_WritePMA>
 800513a:	e3ee      	b.n	800591a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800513c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	785b      	ldrb	r3, [r3, #1]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d177      	bne.n	800523c <USB_EPStartXfer+0x650>
 800514c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005150:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	64bb      	str	r3, [r7, #72]	; 0x48
 8005158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800515c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005166:	b29b      	uxth	r3, r3
 8005168:	461a      	mov	r2, r3
 800516a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800516c:	4413      	add	r3, r2
 800516e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	011a      	lsls	r2, r3, #4
 800517e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005180:	4413      	add	r3, r2
 8005182:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005186:	647b      	str	r3, [r7, #68]	; 0x44
 8005188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	b29b      	uxth	r3, r3
 800518e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005192:	b29a      	uxth	r2, r3
 8005194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005196:	801a      	strh	r2, [r3, #0]
 8005198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800519c:	2b3e      	cmp	r3, #62	; 0x3e
 800519e:	d921      	bls.n	80051e4 <USB_EPStartXfer+0x5f8>
 80051a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051a4:	095b      	lsrs	r3, r3, #5
 80051a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ae:	f003 031f 	and.w	r3, r3, #31
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d104      	bne.n	80051c0 <USB_EPStartXfer+0x5d4>
 80051b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051ba:	3b01      	subs	r3, #1
 80051bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	029b      	lsls	r3, r3, #10
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	4313      	orrs	r3, r2
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051dc:	b29a      	uxth	r2, r3
 80051de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051e0:	801a      	strh	r2, [r3, #0]
 80051e2:	e056      	b.n	8005292 <USB_EPStartXfer+0x6a6>
 80051e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10a      	bne.n	8005202 <USB_EPStartXfer+0x616>
 80051ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051fe:	801a      	strh	r2, [r3, #0]
 8005200:	e047      	b.n	8005292 <USB_EPStartXfer+0x6a6>
 8005202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005206:	085b      	lsrs	r3, r3, #1
 8005208:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800520c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	d004      	beq.n	8005222 <USB_EPStartXfer+0x636>
 8005218:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800521c:	3301      	adds	r3, #1
 800521e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	b29a      	uxth	r2, r3
 8005228:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800522c:	b29b      	uxth	r3, r3
 800522e:	029b      	lsls	r3, r3, #10
 8005230:	b29b      	uxth	r3, r3
 8005232:	4313      	orrs	r3, r2
 8005234:	b29a      	uxth	r2, r3
 8005236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005238:	801a      	strh	r2, [r3, #0]
 800523a:	e02a      	b.n	8005292 <USB_EPStartXfer+0x6a6>
 800523c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	785b      	ldrb	r3, [r3, #1]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d122      	bne.n	8005292 <USB_EPStartXfer+0x6a6>
 800524c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005250:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	653b      	str	r3, [r7, #80]	; 0x50
 8005258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800525c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005266:	b29b      	uxth	r3, r3
 8005268:	461a      	mov	r2, r3
 800526a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800526c:	4413      	add	r3, r2
 800526e:	653b      	str	r3, [r7, #80]	; 0x50
 8005270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	011a      	lsls	r2, r3, #4
 800527e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005280:	4413      	add	r3, r2
 8005282:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800528c:	b29a      	uxth	r2, r3
 800528e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005290:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	891b      	ldrh	r3, [r3, #8]
 800529e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6959      	ldr	r1, [r3, #20]
 80052ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80052b8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80052bc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80052c0:	6800      	ldr	r0, [r0, #0]
 80052c2:	f001 f982 	bl	80065ca <USB_WritePMA>
            ep->xfer_buff += len;
 80052c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695a      	ldr	r2, [r3, #20]
 80052d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052d6:	441a      	add	r2, r3
 80052d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80052e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6a1a      	ldr	r2, [r3, #32]
 80052f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d90f      	bls.n	8005320 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6a1a      	ldr	r2, [r3, #32]
 800530c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005310:	1ad2      	subs	r2, r2, r3
 8005312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	621a      	str	r2, [r3, #32]
 800531e:	e00e      	b.n	800533e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2200      	movs	r2, #0
 800533c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800533e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	643b      	str	r3, [r7, #64]	; 0x40
 800534a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800534e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	785b      	ldrb	r3, [r3, #1]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d177      	bne.n	800544a <USB_EPStartXfer+0x85e>
 800535a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800535e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	63bb      	str	r3, [r7, #56]	; 0x38
 8005366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800536a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005374:	b29b      	uxth	r3, r3
 8005376:	461a      	mov	r2, r3
 8005378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537a:	4413      	add	r3, r2
 800537c:	63bb      	str	r3, [r7, #56]	; 0x38
 800537e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	011a      	lsls	r2, r3, #4
 800538c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538e:	4413      	add	r3, r2
 8005390:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005394:	637b      	str	r3, [r7, #52]	; 0x34
 8005396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	b29b      	uxth	r3, r3
 800539c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a4:	801a      	strh	r2, [r3, #0]
 80053a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053aa:	2b3e      	cmp	r3, #62	; 0x3e
 80053ac:	d921      	bls.n	80053f2 <USB_EPStartXfer+0x806>
 80053ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053b2:	095b      	lsrs	r3, r3, #5
 80053b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053bc:	f003 031f 	and.w	r3, r3, #31
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d104      	bne.n	80053ce <USB_EPStartXfer+0x7e2>
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c8:	3b01      	subs	r3, #1
 80053ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d0:	881b      	ldrh	r3, [r3, #0]
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d8:	b29b      	uxth	r3, r3
 80053da:	029b      	lsls	r3, r3, #10
 80053dc:	b29b      	uxth	r3, r3
 80053de:	4313      	orrs	r3, r2
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ee:	801a      	strh	r2, [r3, #0]
 80053f0:	e050      	b.n	8005494 <USB_EPStartXfer+0x8a8>
 80053f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10a      	bne.n	8005410 <USB_EPStartXfer+0x824>
 80053fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005408:	b29a      	uxth	r2, r3
 800540a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540c:	801a      	strh	r2, [r3, #0]
 800540e:	e041      	b.n	8005494 <USB_EPStartXfer+0x8a8>
 8005410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005414:	085b      	lsrs	r3, r3, #1
 8005416:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800541a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d004      	beq.n	8005430 <USB_EPStartXfer+0x844>
 8005426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800542a:	3301      	adds	r3, #1
 800542c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	b29a      	uxth	r2, r3
 8005436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800543a:	b29b      	uxth	r3, r3
 800543c:	029b      	lsls	r3, r3, #10
 800543e:	b29b      	uxth	r3, r3
 8005440:	4313      	orrs	r3, r2
 8005442:	b29a      	uxth	r2, r3
 8005444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005446:	801a      	strh	r2, [r3, #0]
 8005448:	e024      	b.n	8005494 <USB_EPStartXfer+0x8a8>
 800544a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800544e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	785b      	ldrb	r3, [r3, #1]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d11c      	bne.n	8005494 <USB_EPStartXfer+0x8a8>
 800545a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800545e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005468:	b29b      	uxth	r3, r3
 800546a:	461a      	mov	r2, r3
 800546c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800546e:	4413      	add	r3, r2
 8005470:	643b      	str	r3, [r7, #64]	; 0x40
 8005472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	011a      	lsls	r2, r3, #4
 8005480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005482:	4413      	add	r3, r2
 8005484:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800548a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800548e:	b29a      	uxth	r2, r3
 8005490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005492:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	895b      	ldrh	r3, [r3, #10]
 80054a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6959      	ldr	r1, [r3, #20]
 80054b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80054ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80054be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80054c2:	6800      	ldr	r0, [r0, #0]
 80054c4:	f001 f881 	bl	80065ca <USB_WritePMA>
 80054c8:	e227      	b.n	800591a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80054ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80054da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80054fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005500:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005508:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	441a      	add	r2, r3
 800551e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800552a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800552e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005532:	b29b      	uxth	r3, r3
 8005534:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800553a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005546:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005550:	b29b      	uxth	r3, r3
 8005552:	461a      	mov	r2, r3
 8005554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005556:	4413      	add	r3, r2
 8005558:	65fb      	str	r3, [r7, #92]	; 0x5c
 800555a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800555e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	011a      	lsls	r2, r3, #4
 8005568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800556a:	4413      	add	r3, r2
 800556c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005570:	65bb      	str	r3, [r7, #88]	; 0x58
 8005572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005576:	b29a      	uxth	r2, r3
 8005578:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800557a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800557c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	891b      	ldrh	r3, [r3, #8]
 8005588:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800558c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6959      	ldr	r1, [r3, #20]
 8005598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800559c:	b29b      	uxth	r3, r3
 800559e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80055a2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80055a6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80055aa:	6800      	ldr	r0, [r0, #0]
 80055ac:	f001 f80d 	bl	80065ca <USB_WritePMA>
 80055b0:	e1b3      	b.n	800591a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80055b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6a1a      	ldr	r2, [r3, #32]
 80055be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c2:	1ad2      	subs	r2, r2, r3
 80055c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80055d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 80c6 	beq.w	8005784 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	673b      	str	r3, [r7, #112]	; 0x70
 8005604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	785b      	ldrb	r3, [r3, #1]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d177      	bne.n	8005704 <USB_EPStartXfer+0xb18>
 8005614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005618:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005624:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800562e:	b29b      	uxth	r3, r3
 8005630:	461a      	mov	r2, r3
 8005632:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005634:	4413      	add	r3, r2
 8005636:	66bb      	str	r3, [r7, #104]	; 0x68
 8005638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800563c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	011a      	lsls	r2, r3, #4
 8005646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005648:	4413      	add	r3, r2
 800564a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800564e:	667b      	str	r3, [r7, #100]	; 0x64
 8005650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	b29b      	uxth	r3, r3
 8005656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800565a:	b29a      	uxth	r2, r3
 800565c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800565e:	801a      	strh	r2, [r3, #0]
 8005660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005664:	2b3e      	cmp	r3, #62	; 0x3e
 8005666:	d921      	bls.n	80056ac <USB_EPStartXfer+0xac0>
 8005668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800566c:	095b      	lsrs	r3, r3, #5
 800566e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005676:	f003 031f 	and.w	r3, r3, #31
 800567a:	2b00      	cmp	r3, #0
 800567c:	d104      	bne.n	8005688 <USB_EPStartXfer+0xa9c>
 800567e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005682:	3b01      	subs	r3, #1
 8005684:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	b29a      	uxth	r2, r3
 800568e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005692:	b29b      	uxth	r3, r3
 8005694:	029b      	lsls	r3, r3, #10
 8005696:	b29b      	uxth	r3, r3
 8005698:	4313      	orrs	r3, r2
 800569a:	b29b      	uxth	r3, r3
 800569c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056a8:	801a      	strh	r2, [r3, #0]
 80056aa:	e050      	b.n	800574e <USB_EPStartXfer+0xb62>
 80056ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10a      	bne.n	80056ca <USB_EPStartXfer+0xade>
 80056b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056c6:	801a      	strh	r2, [r3, #0]
 80056c8:	e041      	b.n	800574e <USB_EPStartXfer+0xb62>
 80056ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ce:	085b      	lsrs	r3, r3, #1
 80056d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d004      	beq.n	80056ea <USB_EPStartXfer+0xafe>
 80056e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80056e4:	3301      	adds	r3, #1
 80056e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	029b      	lsls	r3, r3, #10
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	4313      	orrs	r3, r2
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005700:	801a      	strh	r2, [r3, #0]
 8005702:	e024      	b.n	800574e <USB_EPStartXfer+0xb62>
 8005704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	785b      	ldrb	r3, [r3, #1]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d11c      	bne.n	800574e <USB_EPStartXfer+0xb62>
 8005714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005718:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005722:	b29b      	uxth	r3, r3
 8005724:	461a      	mov	r2, r3
 8005726:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005728:	4413      	add	r3, r2
 800572a:	673b      	str	r3, [r7, #112]	; 0x70
 800572c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	011a      	lsls	r2, r3, #4
 800573a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800573c:	4413      	add	r3, r2
 800573e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005742:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005748:	b29a      	uxth	r2, r3
 800574a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800574c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800574e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	895b      	ldrh	r3, [r3, #10]
 800575a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800575e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6959      	ldr	r1, [r3, #20]
 800576a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800576e:	b29b      	uxth	r3, r3
 8005770:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005774:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005778:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800577c:	6800      	ldr	r0, [r0, #0]
 800577e:	f000 ff24 	bl	80065ca <USB_WritePMA>
 8005782:	e0ca      	b.n	800591a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	785b      	ldrb	r3, [r3, #1]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d177      	bne.n	8005884 <USB_EPStartXfer+0xc98>
 8005794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005798:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	461a      	mov	r2, r3
 80057b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057b4:	4413      	add	r3, r2
 80057b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	011a      	lsls	r2, r3, #4
 80057c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057c8:	4413      	add	r3, r2
 80057ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80057d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057da:	b29a      	uxth	r2, r3
 80057dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057de:	801a      	strh	r2, [r3, #0]
 80057e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057e4:	2b3e      	cmp	r3, #62	; 0x3e
 80057e6:	d921      	bls.n	800582c <USB_EPStartXfer+0xc40>
 80057e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ec:	095b      	lsrs	r3, r3, #5
 80057ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80057f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057f6:	f003 031f 	and.w	r3, r3, #31
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d104      	bne.n	8005808 <USB_EPStartXfer+0xc1c>
 80057fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005802:	3b01      	subs	r3, #1
 8005804:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	b29a      	uxth	r2, r3
 800580e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005812:	b29b      	uxth	r3, r3
 8005814:	029b      	lsls	r3, r3, #10
 8005816:	b29b      	uxth	r3, r3
 8005818:	4313      	orrs	r3, r2
 800581a:	b29b      	uxth	r3, r3
 800581c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005824:	b29a      	uxth	r2, r3
 8005826:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005828:	801a      	strh	r2, [r3, #0]
 800582a:	e05c      	b.n	80058e6 <USB_EPStartXfer+0xcfa>
 800582c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10a      	bne.n	800584a <USB_EPStartXfer+0xc5e>
 8005834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	b29b      	uxth	r3, r3
 800583a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800583e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005842:	b29a      	uxth	r2, r3
 8005844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005846:	801a      	strh	r2, [r3, #0]
 8005848:	e04d      	b.n	80058e6 <USB_EPStartXfer+0xcfa>
 800584a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800584e:	085b      	lsrs	r3, r3, #1
 8005850:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d004      	beq.n	800586a <USB_EPStartXfer+0xc7e>
 8005860:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005864:	3301      	adds	r3, #1
 8005866:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800586a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	b29a      	uxth	r2, r3
 8005870:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005874:	b29b      	uxth	r3, r3
 8005876:	029b      	lsls	r3, r3, #10
 8005878:	b29b      	uxth	r3, r3
 800587a:	4313      	orrs	r3, r2
 800587c:	b29a      	uxth	r2, r3
 800587e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005880:	801a      	strh	r2, [r3, #0]
 8005882:	e030      	b.n	80058e6 <USB_EPStartXfer+0xcfa>
 8005884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	785b      	ldrb	r3, [r3, #1]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d128      	bne.n	80058e6 <USB_EPStartXfer+0xcfa>
 8005894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005898:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	461a      	mov	r2, r3
 80058b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058b8:	4413      	add	r3, r2
 80058ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	011a      	lsls	r2, r3, #4
 80058cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058d0:	4413      	add	r3, r2
 80058d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058de:	b29a      	uxth	r2, r3
 80058e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80058e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	891b      	ldrh	r3, [r3, #8]
 80058f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6959      	ldr	r1, [r3, #20]
 8005902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005906:	b29b      	uxth	r3, r3
 8005908:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800590c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005910:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005914:	6800      	ldr	r0, [r0, #0]
 8005916:	f000 fe58 	bl	80065ca <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800591a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800591e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005940:	817b      	strh	r3, [r7, #10]
 8005942:	897b      	ldrh	r3, [r7, #10]
 8005944:	f083 0310 	eor.w	r3, r3, #16
 8005948:	817b      	strh	r3, [r7, #10]
 800594a:	897b      	ldrh	r3, [r7, #10]
 800594c:	f083 0320 	eor.w	r3, r3, #32
 8005950:	817b      	strh	r3, [r7, #10]
 8005952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005956:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	441a      	add	r2, r3
 800596c:	897b      	ldrh	r3, [r7, #10]
 800596e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005972:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800597a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800597e:	b29b      	uxth	r3, r3
 8005980:	8013      	strh	r3, [r2, #0]
 8005982:	f000 bcde 	b.w	8006342 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800598a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	7b1b      	ldrb	r3, [r3, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	f040 80bb 	bne.w	8005b0e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800599c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	699a      	ldr	r2, [r3, #24]
 80059a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d917      	bls.n	80059e4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80059b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80059c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	699a      	ldr	r2, [r3, #24]
 80059d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059d4:	1ad2      	subs	r2, r2, r3
 80059d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	619a      	str	r2, [r3, #24]
 80059e2:	e00e      	b.n	8005a02 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80059e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80059f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2200      	movs	r2, #0
 8005a00:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	461a      	mov	r2, r3
 8005a22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a26:	4413      	add	r3, r2
 8005a28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	011a      	lsls	r2, r3, #4
 8005a3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a3e:	4413      	add	r3, r2
 8005a40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005a48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a5a:	801a      	strh	r2, [r3, #0]
 8005a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a60:	2b3e      	cmp	r3, #62	; 0x3e
 8005a62:	d924      	bls.n	8005aae <USB_EPStartXfer+0xec2>
 8005a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a68:	095b      	lsrs	r3, r3, #5
 8005a6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a72:	f003 031f 	and.w	r3, r3, #31
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d104      	bne.n	8005a84 <USB_EPStartXfer+0xe98>
 8005a7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	029b      	lsls	r3, r3, #10
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	4313      	orrs	r3, r2
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005aa8:	801a      	strh	r2, [r3, #0]
 8005aaa:	f000 bc10 	b.w	80062ce <USB_EPStartXfer+0x16e2>
 8005aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10c      	bne.n	8005ad0 <USB_EPStartXfer+0xee4>
 8005ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005acc:	801a      	strh	r2, [r3, #0]
 8005ace:	e3fe      	b.n	80062ce <USB_EPStartXfer+0x16e2>
 8005ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ad4:	085b      	lsrs	r3, r3, #1
 8005ad6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d004      	beq.n	8005af0 <USB_EPStartXfer+0xf04>
 8005ae6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005aea:	3301      	adds	r3, #1
 8005aec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005af0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005af4:	881b      	ldrh	r3, [r3, #0]
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	029b      	lsls	r3, r3, #10
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	4313      	orrs	r3, r2
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b0a:	801a      	strh	r2, [r3, #0]
 8005b0c:	e3df      	b.n	80062ce <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	78db      	ldrb	r3, [r3, #3]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	f040 8218 	bne.w	8005f50 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	785b      	ldrb	r3, [r3, #1]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f040 809d 	bne.w	8005c6c <USB_EPStartXfer+0x1080>
 8005b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b56:	4413      	add	r3, r2
 8005b58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	011a      	lsls	r2, r3, #4
 8005b6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b6e:	4413      	add	r3, r2
 8005b70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b8a:	801a      	strh	r2, [r3, #0]
 8005b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	2b3e      	cmp	r3, #62	; 0x3e
 8005b9a:	d92b      	bls.n	8005bf4 <USB_EPStartXfer+0x1008>
 8005b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	095b      	lsrs	r3, r3, #5
 8005baa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	f003 031f 	and.w	r3, r3, #31
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d104      	bne.n	8005bcc <USB_EPStartXfer+0xfe0>
 8005bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	029b      	lsls	r3, r3, #10
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	4313      	orrs	r3, r2
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bf0:	801a      	strh	r2, [r3, #0]
 8005bf2:	e070      	b.n	8005cd6 <USB_EPStartXfer+0x10ea>
 8005bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10c      	bne.n	8005c1e <USB_EPStartXfer+0x1032>
 8005c04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c1a:	801a      	strh	r2, [r3, #0]
 8005c1c:	e05b      	b.n	8005cd6 <USB_EPStartXfer+0x10ea>
 8005c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	085b      	lsrs	r3, r3, #1
 8005c2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d004      	beq.n	8005c4e <USB_EPStartXfer+0x1062>
 8005c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c48:	3301      	adds	r3, #1
 8005c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	029b      	lsls	r3, r3, #10
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	4313      	orrs	r3, r2
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c68:	801a      	strh	r2, [r3, #0]
 8005c6a:	e034      	b.n	8005cd6 <USB_EPStartXfer+0x10ea>
 8005c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	785b      	ldrb	r3, [r3, #1]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d12c      	bne.n	8005cd6 <USB_EPStartXfer+0x10ea>
 8005c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	011a      	lsls	r2, r3, #4
 8005cb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005cb8:	4413      	add	r3, r2
 8005cba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005cd4:	801a      	strh	r2, [r3, #0]
 8005cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	785b      	ldrb	r3, [r3, #1]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f040 809d 	bne.w	8005e30 <USB_EPStartXfer+0x1244>
 8005cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	461a      	mov	r2, r3
 8005d16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	011a      	lsls	r2, r3, #4
 8005d2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d32:	4413      	add	r3, r2
 8005d34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d4e:	801a      	strh	r2, [r3, #0]
 8005d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	2b3e      	cmp	r3, #62	; 0x3e
 8005d5e:	d92b      	bls.n	8005db8 <USB_EPStartXfer+0x11cc>
 8005d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	095b      	lsrs	r3, r3, #5
 8005d6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	f003 031f 	and.w	r3, r3, #31
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d104      	bne.n	8005d90 <USB_EPStartXfer+0x11a4>
 8005d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	029b      	lsls	r3, r3, #10
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	4313      	orrs	r3, r2
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005db4:	801a      	strh	r2, [r3, #0]
 8005db6:	e069      	b.n	8005e8c <USB_EPStartXfer+0x12a0>
 8005db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10c      	bne.n	8005de2 <USB_EPStartXfer+0x11f6>
 8005dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dde:	801a      	strh	r2, [r3, #0]
 8005de0:	e054      	b.n	8005e8c <USB_EPStartXfer+0x12a0>
 8005de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	085b      	lsrs	r3, r3, #1
 8005df0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d004      	beq.n	8005e12 <USB_EPStartXfer+0x1226>
 8005e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	029b      	lsls	r3, r3, #10
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	4313      	orrs	r3, r2
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e2c:	801a      	strh	r2, [r3, #0]
 8005e2e:	e02d      	b.n	8005e8c <USB_EPStartXfer+0x12a0>
 8005e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	785b      	ldrb	r3, [r3, #1]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d125      	bne.n	8005e8c <USB_EPStartXfer+0x12a0>
 8005e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	461a      	mov	r2, r3
 8005e52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e56:	4413      	add	r3, r2
 8005e58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	011a      	lsls	r2, r3, #4
 8005e6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e6e:	4413      	add	r3, r2
 8005e70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e8a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005e8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 8218 	beq.w	80062ce <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ebe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <USB_EPStartXfer+0x12ea>
 8005eca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10d      	bne.n	8005ef2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ed6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f040 81f5 	bne.w	80062ce <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ee4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f040 81ee 	bne.w	80062ce <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f18:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	441a      	add	r2, r3
 8005f36:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	8013      	strh	r3, [r2, #0]
 8005f4e:	e1be      	b.n	80062ce <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	78db      	ldrb	r3, [r3, #3]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	f040 81b4 	bne.w	80062ca <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699a      	ldr	r2, [r3, #24]
 8005f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d917      	bls.n	8005fae <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699a      	ldr	r2, [r3, #24]
 8005f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9e:	1ad2      	subs	r2, r2, r3
 8005fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	619a      	str	r2, [r3, #24]
 8005fac:	e00e      	b.n	8005fcc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	785b      	ldrb	r3, [r3, #1]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f040 8085 	bne.w	80060e8 <USB_EPStartXfer+0x14fc>
 8005fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006002:	4413      	add	r3, r2
 8006004:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800600c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	011a      	lsls	r2, r3, #4
 8006016:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800601a:	4413      	add	r3, r2
 800601c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006020:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006024:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	b29b      	uxth	r3, r3
 800602c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006030:	b29a      	uxth	r2, r3
 8006032:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006036:	801a      	strh	r2, [r3, #0]
 8006038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800603c:	2b3e      	cmp	r3, #62	; 0x3e
 800603e:	d923      	bls.n	8006088 <USB_EPStartXfer+0x149c>
 8006040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006044:	095b      	lsrs	r3, r3, #5
 8006046:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800604a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800604e:	f003 031f 	and.w	r3, r3, #31
 8006052:	2b00      	cmp	r3, #0
 8006054:	d104      	bne.n	8006060 <USB_EPStartXfer+0x1474>
 8006056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800605a:	3b01      	subs	r3, #1
 800605c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006060:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	b29a      	uxth	r2, r3
 8006068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800606c:	b29b      	uxth	r3, r3
 800606e:	029b      	lsls	r3, r3, #10
 8006070:	b29b      	uxth	r3, r3
 8006072:	4313      	orrs	r3, r2
 8006074:	b29b      	uxth	r3, r3
 8006076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800607a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800607e:	b29a      	uxth	r2, r3
 8006080:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	e060      	b.n	800614a <USB_EPStartXfer+0x155e>
 8006088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10c      	bne.n	80060aa <USB_EPStartXfer+0x14be>
 8006090:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	b29b      	uxth	r3, r3
 8006098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800609c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060a6:	801a      	strh	r2, [r3, #0]
 80060a8:	e04f      	b.n	800614a <USB_EPStartXfer+0x155e>
 80060aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ae:	085b      	lsrs	r3, r3, #1
 80060b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d004      	beq.n	80060ca <USB_EPStartXfer+0x14de>
 80060c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060c4:	3301      	adds	r3, #1
 80060c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	029b      	lsls	r3, r3, #10
 80060da:	b29b      	uxth	r3, r3
 80060dc:	4313      	orrs	r3, r2
 80060de:	b29a      	uxth	r2, r3
 80060e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060e4:	801a      	strh	r2, [r3, #0]
 80060e6:	e030      	b.n	800614a <USB_EPStartXfer+0x155e>
 80060e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	785b      	ldrb	r3, [r3, #1]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d128      	bne.n	800614a <USB_EPStartXfer+0x155e>
 80060f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800610a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006114:	b29b      	uxth	r3, r3
 8006116:	461a      	mov	r2, r3
 8006118:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800611c:	4413      	add	r3, r2
 800611e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	011a      	lsls	r2, r3, #4
 8006130:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006134:	4413      	add	r3, r2
 8006136:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800613a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800613e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006142:	b29a      	uxth	r2, r3
 8006144:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006148:	801a      	strh	r2, [r3, #0]
 800614a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800615c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	785b      	ldrb	r3, [r3, #1]
 8006164:	2b00      	cmp	r3, #0
 8006166:	f040 8085 	bne.w	8006274 <USB_EPStartXfer+0x1688>
 800616a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800616e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800617c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006186:	b29b      	uxth	r3, r3
 8006188:	461a      	mov	r2, r3
 800618a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800618e:	4413      	add	r3, r2
 8006190:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	011a      	lsls	r2, r3, #4
 80061a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80061a6:	4413      	add	r3, r2
 80061a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061bc:	b29a      	uxth	r2, r3
 80061be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061c2:	801a      	strh	r2, [r3, #0]
 80061c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c8:	2b3e      	cmp	r3, #62	; 0x3e
 80061ca:	d923      	bls.n	8006214 <USB_EPStartXfer+0x1628>
 80061cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d0:	095b      	lsrs	r3, r3, #5
 80061d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061da:	f003 031f 	and.w	r3, r3, #31
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d104      	bne.n	80061ec <USB_EPStartXfer+0x1600>
 80061e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061e6:	3b01      	subs	r3, #1
 80061e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	029b      	lsls	r3, r3, #10
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	4313      	orrs	r3, r2
 8006200:	b29b      	uxth	r3, r3
 8006202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800620a:	b29a      	uxth	r2, r3
 800620c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006210:	801a      	strh	r2, [r3, #0]
 8006212:	e05c      	b.n	80062ce <USB_EPStartXfer+0x16e2>
 8006214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10c      	bne.n	8006236 <USB_EPStartXfer+0x164a>
 800621c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	b29b      	uxth	r3, r3
 8006224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800622c:	b29a      	uxth	r2, r3
 800622e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006232:	801a      	strh	r2, [r3, #0]
 8006234:	e04b      	b.n	80062ce <USB_EPStartXfer+0x16e2>
 8006236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800623a:	085b      	lsrs	r3, r3, #1
 800623c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	d004      	beq.n	8006256 <USB_EPStartXfer+0x166a>
 800624c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006250:	3301      	adds	r3, #1
 8006252:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006256:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	b29a      	uxth	r2, r3
 800625e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006262:	b29b      	uxth	r3, r3
 8006264:	029b      	lsls	r3, r3, #10
 8006266:	b29b      	uxth	r3, r3
 8006268:	4313      	orrs	r3, r2
 800626a:	b29a      	uxth	r2, r3
 800626c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006270:	801a      	strh	r2, [r3, #0]
 8006272:	e02c      	b.n	80062ce <USB_EPStartXfer+0x16e2>
 8006274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	785b      	ldrb	r3, [r3, #1]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d124      	bne.n	80062ce <USB_EPStartXfer+0x16e2>
 8006284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006288:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006292:	b29b      	uxth	r3, r3
 8006294:	461a      	mov	r2, r3
 8006296:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800629a:	4413      	add	r3, r2
 800629c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	011a      	lsls	r2, r3, #4
 80062ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80062b2:	4413      	add	r3, r2
 80062b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80062c6:	801a      	strh	r2, [r3, #0]
 80062c8:	e001      	b.n	80062ce <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e03a      	b.n	8006344 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80062f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80062fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006300:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006304:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006308:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800630c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006314:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800631e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	441a      	add	r2, r3
 800632a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800632e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800633a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633e:	b29b      	uxth	r3, r3
 8006340:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800634e:	b480      	push	{r7}
 8006350:	b085      	sub	sp, #20
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	785b      	ldrb	r3, [r3, #1]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d020      	beq.n	80063a2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	b29b      	uxth	r3, r3
 800636e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006376:	81bb      	strh	r3, [r7, #12]
 8006378:	89bb      	ldrh	r3, [r7, #12]
 800637a:	f083 0310 	eor.w	r3, r3, #16
 800637e:	81bb      	strh	r3, [r7, #12]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	441a      	add	r2, r3
 800638a:	89bb      	ldrh	r3, [r7, #12]
 800638c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800639c:	b29b      	uxth	r3, r3
 800639e:	8013      	strh	r3, [r2, #0]
 80063a0:	e01f      	b.n	80063e2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b8:	81fb      	strh	r3, [r7, #14]
 80063ba:	89fb      	ldrh	r3, [r7, #14]
 80063bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063c0:	81fb      	strh	r3, [r7, #14]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	441a      	add	r2, r3
 80063cc:	89fb      	ldrh	r3, [r7, #14]
 80063ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063de:	b29b      	uxth	r3, r3
 80063e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bc80      	pop	{r7}
 80063ec:	4770      	bx	lr

080063ee <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b087      	sub	sp, #28
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	7b1b      	ldrb	r3, [r3, #12]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f040 809d 	bne.w	800653c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	785b      	ldrb	r3, [r3, #1]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d04c      	beq.n	80064a4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	823b      	strh	r3, [r7, #16]
 8006418:	8a3b      	ldrh	r3, [r7, #16]
 800641a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641e:	2b00      	cmp	r3, #0
 8006420:	d01b      	beq.n	800645a <USB_EPClearStall+0x6c>
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006438:	81fb      	strh	r3, [r7, #14]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	441a      	add	r2, r3
 8006444:	89fb      	ldrh	r3, [r7, #14]
 8006446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800644a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800644e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006452:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006456:	b29b      	uxth	r3, r3
 8006458:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	78db      	ldrb	r3, [r3, #3]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d06c      	beq.n	800653c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	b29b      	uxth	r3, r3
 8006470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006478:	81bb      	strh	r3, [r7, #12]
 800647a:	89bb      	ldrh	r3, [r7, #12]
 800647c:	f083 0320 	eor.w	r3, r3, #32
 8006480:	81bb      	strh	r3, [r7, #12]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	441a      	add	r2, r3
 800648c:	89bb      	ldrh	r3, [r7, #12]
 800648e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800649a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800649e:	b29b      	uxth	r3, r3
 80064a0:	8013      	strh	r3, [r2, #0]
 80064a2:	e04b      	b.n	800653c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	82fb      	strh	r3, [r7, #22]
 80064b2:	8afb      	ldrh	r3, [r7, #22]
 80064b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d01b      	beq.n	80064f4 <USB_EPClearStall+0x106>
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d2:	82bb      	strh	r3, [r7, #20]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	441a      	add	r2, r3
 80064de:	8abb      	ldrh	r3, [r7, #20]
 80064e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	b29b      	uxth	r3, r3
 8006502:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650a:	827b      	strh	r3, [r7, #18]
 800650c:	8a7b      	ldrh	r3, [r7, #18]
 800650e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006512:	827b      	strh	r3, [r7, #18]
 8006514:	8a7b      	ldrh	r3, [r7, #18]
 8006516:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800651a:	827b      	strh	r3, [r7, #18]
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	441a      	add	r2, r3
 8006526:	8a7b      	ldrh	r3, [r7, #18]
 8006528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800652c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006538:	b29b      	uxth	r3, r3
 800653a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	371c      	adds	r7, #28
 8006542:	46bd      	mov	sp, r7
 8006544:	bc80      	pop	{r7}
 8006546:	4770      	bx	lr

08006548 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d103      	bne.n	8006562 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2280      	movs	r2, #128	; 0x80
 800655e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	bc80      	pop	{r7}
 800656c:	4770      	bx	lr

0800656e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800656e:	b480      	push	{r7}
 8006570:	b083      	sub	sp, #12
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	bc80      	pop	{r7}
 8006580:	4770      	bx	lr

08006582 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	bc80      	pop	{r7}
 8006594:	4770      	bx	lr

08006596 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006596:	b480      	push	{r7}
 8006598:	b085      	sub	sp, #20
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80065a8:	68fb      	ldr	r3, [r7, #12]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bc80      	pop	{r7}
 80065b2:	4770      	bx	lr

080065b4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bc80      	pop	{r7}
 80065c8:	4770      	bx	lr

080065ca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b08b      	sub	sp, #44	; 0x2c
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	4611      	mov	r1, r2
 80065d6:	461a      	mov	r2, r3
 80065d8:	460b      	mov	r3, r1
 80065da:	80fb      	strh	r3, [r7, #6]
 80065dc:	4613      	mov	r3, r2
 80065de:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80065e0:	88bb      	ldrh	r3, [r7, #4]
 80065e2:	3301      	adds	r3, #1
 80065e4:	085b      	lsrs	r3, r3, #1
 80065e6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80065f0:	88fb      	ldrh	r3, [r7, #6]
 80065f2:	005a      	lsls	r2, r3, #1
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065fc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	627b      	str	r3, [r7, #36]	; 0x24
 8006602:	e01e      	b.n	8006642 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	3301      	adds	r3, #1
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	021b      	lsls	r3, r3, #8
 8006612:	b21a      	sxth	r2, r3
 8006614:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006618:	4313      	orrs	r3, r2
 800661a:	b21b      	sxth	r3, r3
 800661c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800661e:	6a3b      	ldr	r3, [r7, #32]
 8006620:	8a7a      	ldrh	r2, [r7, #18]
 8006622:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	3302      	adds	r3, #2
 8006628:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	3302      	adds	r3, #2
 800662e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	3301      	adds	r3, #1
 8006634:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	3301      	adds	r3, #1
 800663a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	3b01      	subs	r3, #1
 8006640:	627b      	str	r3, [r7, #36]	; 0x24
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1dd      	bne.n	8006604 <USB_WritePMA+0x3a>
  }
}
 8006648:	bf00      	nop
 800664a:	bf00      	nop
 800664c:	372c      	adds	r7, #44	; 0x2c
 800664e:	46bd      	mov	sp, r7
 8006650:	bc80      	pop	{r7}
 8006652:	4770      	bx	lr

08006654 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006654:	b480      	push	{r7}
 8006656:	b08b      	sub	sp, #44	; 0x2c
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	4611      	mov	r1, r2
 8006660:	461a      	mov	r2, r3
 8006662:	460b      	mov	r3, r1
 8006664:	80fb      	strh	r3, [r7, #6]
 8006666:	4613      	mov	r3, r2
 8006668:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800666a:	88bb      	ldrh	r3, [r7, #4]
 800666c:	085b      	lsrs	r3, r3, #1
 800666e:	b29b      	uxth	r3, r3
 8006670:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800667a:	88fb      	ldrh	r3, [r7, #6]
 800667c:	005a      	lsls	r2, r3, #1
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006686:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	627b      	str	r3, [r7, #36]	; 0x24
 800668c:	e01b      	b.n	80066c6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	b29b      	uxth	r3, r3
 8006694:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	3302      	adds	r3, #2
 800669a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	3301      	adds	r3, #1
 80066a8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	0a1b      	lsrs	r3, r3, #8
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	3301      	adds	r3, #1
 80066b8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	3302      	adds	r3, #2
 80066be:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	3b01      	subs	r3, #1
 80066c4:	627b      	str	r3, [r7, #36]	; 0x24
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1e0      	bne.n	800668e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80066cc:	88bb      	ldrh	r3, [r7, #4]
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d007      	beq.n	80066e8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	701a      	strb	r2, [r3, #0]
  }
}
 80066e8:	bf00      	nop
 80066ea:	372c      	adds	r7, #44	; 0x2c
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bc80      	pop	{r7}
 80066f0:	4770      	bx	lr

080066f2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b084      	sub	sp, #16
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	460b      	mov	r3, r1
 80066fc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80066fe:	2300      	movs	r3, #0
 8006700:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	7c1b      	ldrb	r3, [r3, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d115      	bne.n	8006736 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800670a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800670e:	2202      	movs	r2, #2
 8006710:	2181      	movs	r1, #129	; 0x81
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f001 fe8f 	bl	8008436 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800671e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006722:	2202      	movs	r2, #2
 8006724:	2101      	movs	r1, #1
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f001 fe85 	bl	8008436 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006734:	e012      	b.n	800675c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006736:	2340      	movs	r3, #64	; 0x40
 8006738:	2202      	movs	r2, #2
 800673a:	2181      	movs	r1, #129	; 0x81
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f001 fe7a 	bl	8008436 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006748:	2340      	movs	r3, #64	; 0x40
 800674a:	2202      	movs	r2, #2
 800674c:	2101      	movs	r1, #1
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f001 fe71 	bl	8008436 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800675c:	2308      	movs	r3, #8
 800675e:	2203      	movs	r2, #3
 8006760:	2182      	movs	r1, #130	; 0x82
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f001 fe67 	bl	8008436 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800676e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006772:	f001 ff87 	bl	8008684 <USBD_static_malloc>
 8006776:	4602      	mov	r2, r0
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006784:	2b00      	cmp	r3, #0
 8006786:	d102      	bne.n	800678e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006788:	2301      	movs	r3, #1
 800678a:	73fb      	strb	r3, [r7, #15]
 800678c:	e026      	b.n	80067dc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006794:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	7c1b      	ldrb	r3, [r3, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d109      	bne.n	80067cc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067c2:	2101      	movs	r1, #1
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f001 ff27 	bl	8008618 <USBD_LL_PrepareReceive>
 80067ca:	e007      	b.n	80067dc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067d2:	2340      	movs	r3, #64	; 0x40
 80067d4:	2101      	movs	r1, #1
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f001 ff1e 	bl	8008618 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b084      	sub	sp, #16
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	460b      	mov	r3, r1
 80067f0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80067f6:	2181      	movs	r1, #129	; 0x81
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f001 fe42 	bl	8008482 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006804:	2101      	movs	r1, #1
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f001 fe3b 	bl	8008482 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006814:	2182      	movs	r1, #130	; 0x82
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f001 fe33 	bl	8008482 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00e      	beq.n	800684a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800683c:	4618      	mov	r0, r3
 800683e:	f001 ff2d 	bl	800869c <USBD_static_free>
    pdev->pClassData = NULL;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800684a:	7bfb      	ldrb	r3, [r7, #15]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006864:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800686a:	2300      	movs	r3, #0
 800686c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800687a:	2b00      	cmp	r3, #0
 800687c:	d039      	beq.n	80068f2 <USBD_CDC_Setup+0x9e>
 800687e:	2b20      	cmp	r3, #32
 8006880:	d17f      	bne.n	8006982 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	88db      	ldrh	r3, [r3, #6]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d029      	beq.n	80068de <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	b25b      	sxtb	r3, r3
 8006890:	2b00      	cmp	r3, #0
 8006892:	da11      	bge.n	80068b8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80068a0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	88d2      	ldrh	r2, [r2, #6]
 80068a6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80068a8:	6939      	ldr	r1, [r7, #16]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	88db      	ldrh	r3, [r3, #6]
 80068ae:	461a      	mov	r2, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f001 fa0a 	bl	8007cca <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80068b6:	e06b      	b.n	8006990 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	785a      	ldrb	r2, [r3, #1]
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	88db      	ldrh	r3, [r3, #6]
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80068ce:	6939      	ldr	r1, [r7, #16]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	88db      	ldrh	r3, [r3, #6]
 80068d4:	461a      	mov	r2, r3
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f001 fa25 	bl	8007d26 <USBD_CtlPrepareRx>
      break;
 80068dc:	e058      	b.n	8006990 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	7850      	ldrb	r0, [r2, #1]
 80068ea:	2200      	movs	r2, #0
 80068ec:	6839      	ldr	r1, [r7, #0]
 80068ee:	4798      	blx	r3
      break;
 80068f0:	e04e      	b.n	8006990 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	785b      	ldrb	r3, [r3, #1]
 80068f6:	2b0b      	cmp	r3, #11
 80068f8:	d02e      	beq.n	8006958 <USBD_CDC_Setup+0x104>
 80068fa:	2b0b      	cmp	r3, #11
 80068fc:	dc38      	bgt.n	8006970 <USBD_CDC_Setup+0x11c>
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d002      	beq.n	8006908 <USBD_CDC_Setup+0xb4>
 8006902:	2b0a      	cmp	r3, #10
 8006904:	d014      	beq.n	8006930 <USBD_CDC_Setup+0xdc>
 8006906:	e033      	b.n	8006970 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800690e:	2b03      	cmp	r3, #3
 8006910:	d107      	bne.n	8006922 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006912:	f107 030c 	add.w	r3, r7, #12
 8006916:	2202      	movs	r2, #2
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 f9d5 	bl	8007cca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006920:	e02e      	b.n	8006980 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f001 f966 	bl	8007bf6 <USBD_CtlError>
            ret = USBD_FAIL;
 800692a:	2302      	movs	r3, #2
 800692c:	75fb      	strb	r3, [r7, #23]
          break;
 800692e:	e027      	b.n	8006980 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006936:	2b03      	cmp	r3, #3
 8006938:	d107      	bne.n	800694a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800693a:	f107 030f 	add.w	r3, r7, #15
 800693e:	2201      	movs	r2, #1
 8006940:	4619      	mov	r1, r3
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f001 f9c1 	bl	8007cca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006948:	e01a      	b.n	8006980 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f001 f952 	bl	8007bf6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006952:	2302      	movs	r3, #2
 8006954:	75fb      	strb	r3, [r7, #23]
          break;
 8006956:	e013      	b.n	8006980 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800695e:	2b03      	cmp	r3, #3
 8006960:	d00d      	beq.n	800697e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f001 f946 	bl	8007bf6 <USBD_CtlError>
            ret = USBD_FAIL;
 800696a:	2302      	movs	r3, #2
 800696c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800696e:	e006      	b.n	800697e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 f93f 	bl	8007bf6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006978:	2302      	movs	r3, #2
 800697a:	75fb      	strb	r3, [r7, #23]
          break;
 800697c:	e000      	b.n	8006980 <USBD_CDC_Setup+0x12c>
          break;
 800697e:	bf00      	nop
      }
      break;
 8006980:	e006      	b.n	8006990 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 f936 	bl	8007bf6 <USBD_CtlError>
      ret = USBD_FAIL;
 800698a:	2302      	movs	r3, #2
 800698c:	75fb      	strb	r3, [r7, #23]
      break;
 800698e:	bf00      	nop
  }

  return ret;
 8006990:	7dfb      	ldrb	r3, [r7, #23]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b084      	sub	sp, #16
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	460b      	mov	r3, r1
 80069a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ac:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069b4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d03a      	beq.n	8006a36 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80069c0:	78fa      	ldrb	r2, [r7, #3]
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	4613      	mov	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	440b      	add	r3, r1
 80069ce:	331c      	adds	r3, #28
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d029      	beq.n	8006a2a <USBD_CDC_DataIn+0x90>
 80069d6:	78fa      	ldrb	r2, [r7, #3]
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	440b      	add	r3, r1
 80069e4:	331c      	adds	r3, #28
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	78f9      	ldrb	r1, [r7, #3]
 80069ea:	68b8      	ldr	r0, [r7, #8]
 80069ec:	460b      	mov	r3, r1
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	440b      	add	r3, r1
 80069f2:	00db      	lsls	r3, r3, #3
 80069f4:	4403      	add	r3, r0
 80069f6:	3338      	adds	r3, #56	; 0x38
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	fbb2 f1f3 	udiv	r1, r2, r3
 80069fe:	fb01 f303 	mul.w	r3, r1, r3
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d110      	bne.n	8006a2a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006a08:	78fa      	ldrb	r2, [r7, #3]
 8006a0a:	6879      	ldr	r1, [r7, #4]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	440b      	add	r3, r1
 8006a16:	331c      	adds	r3, #28
 8006a18:	2200      	movs	r2, #0
 8006a1a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a1c:	78f9      	ldrb	r1, [r7, #3]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	2200      	movs	r2, #0
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 fdd5 	bl	80085d2 <USBD_LL_Transmit>
 8006a28:	e003      	b.n	8006a32 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	e000      	b.n	8006a38 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006a36:	2302      	movs	r3, #2
  }
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	4619      	mov	r1, r3
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f001 fe00 	bl	800865e <USBD_LL_GetRxDataSize>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00d      	beq.n	8006a8c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006a84:	4611      	mov	r1, r2
 8006a86:	4798      	blx	r3

    return USBD_OK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	e000      	b.n	8006a8e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006a8c:	2302      	movs	r3, #2
  }
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d015      	beq.n	8006adc <USBD_CDC_EP0_RxReady+0x46>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ab6:	2bff      	cmp	r3, #255	; 0xff
 8006ab8:	d010      	beq.n	8006adc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006ac8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ad0:	b292      	uxth	r2, r2
 8006ad2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	22ff      	movs	r2, #255	; 0xff
 8006ad8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
	...

08006ae8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2243      	movs	r2, #67	; 0x43
 8006af4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006af6:	4b03      	ldr	r3, [pc, #12]	; (8006b04 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	20000094 	.word	0x20000094

08006b08 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2243      	movs	r2, #67	; 0x43
 8006b14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006b16:	4b03      	ldr	r3, [pc, #12]	; (8006b24 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bc80      	pop	{r7}
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	20000050 	.word	0x20000050

08006b28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2243      	movs	r2, #67	; 0x43
 8006b34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006b36:	4b03      	ldr	r3, [pc, #12]	; (8006b44 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bc80      	pop	{r7}
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	200000d8 	.word	0x200000d8

08006b48 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	220a      	movs	r2, #10
 8006b54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006b56:	4b03      	ldr	r3, [pc, #12]	; (8006b64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bc80      	pop	{r7}
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	2000000c 	.word	0x2000000c

08006b68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006b72:	2302      	movs	r3, #2
 8006b74:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d005      	beq.n	8006b88 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bc80      	pop	{r7}
 8006b92:	4770      	bx	lr

08006b94 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006bb2:	88fa      	ldrh	r2, [r7, #6]
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	371c      	adds	r7, #28
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bc80      	pop	{r7}
 8006bc4:	4770      	bx	lr

08006bc6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b085      	sub	sp, #20
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bc80      	pop	{r7}
 8006bea:	4770      	bx	lr

08006bec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bfa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d01c      	beq.n	8006c40 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d115      	bne.n	8006c3c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	2181      	movs	r1, #129	; 0x81
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f001 fccd 	bl	80085d2 <USBD_LL_Transmit>

      return USBD_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	e002      	b.n	8006c42 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e000      	b.n	8006c42 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006c40:	2302      	movs	r3, #2
  }
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b084      	sub	sp, #16
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c58:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d017      	beq.n	8006c94 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	7c1b      	ldrb	r3, [r3, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d109      	bne.n	8006c80 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c76:	2101      	movs	r1, #1
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 fccd 	bl	8008618 <USBD_LL_PrepareReceive>
 8006c7e:	e007      	b.n	8006c90 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c86:	2340      	movs	r3, #64	; 0x40
 8006c88:	2101      	movs	r1, #1
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 fcc4 	bl	8008618 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006c90:	2300      	movs	r3, #0
 8006c92:	e000      	b.n	8006c96 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006c94:	2302      	movs	r3, #2
  }
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	60f8      	str	r0, [r7, #12]
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e01a      	b.n	8006cec <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	79fa      	ldrb	r2, [r7, #7]
 8006ce2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f001 fb31 	bl	800834c <USBD_LL_Init>

  return USBD_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d006      	beq.n	8006d16 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	73fb      	strb	r3, [r7, #15]
 8006d14:	e001      	b.n	8006d1a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006d16:	2302      	movs	r3, #2
 8006d18:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bc80      	pop	{r7}
 8006d24:	4770      	bx	lr

08006d26 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b082      	sub	sp, #8
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f001 fb66 	bl	8008400 <USBD_LL_Start>

  return USBD_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bc80      	pop	{r7}
 8006d50:	4770      	bx	lr

08006d52 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b084      	sub	sp, #16
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d5e:	2302      	movs	r3, #2
 8006d60:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00c      	beq.n	8006d86 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	78fa      	ldrb	r2, [r7, #3]
 8006d76:	4611      	mov	r1, r2
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	4798      	blx	r3
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	460b      	mov	r3, r1
 8006d9a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	78fa      	ldrb	r2, [r7, #3]
 8006da6:	4611      	mov	r1, r2
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	4798      	blx	r3

  return USBD_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b082      	sub	sp, #8
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 fed8 	bl	8007b7e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ddc:	461a      	mov	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006dea:	f003 031f 	and.w	r3, r3, #31
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d016      	beq.n	8006e20 <USBD_LL_SetupStage+0x6a>
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d81c      	bhi.n	8006e30 <USBD_LL_SetupStage+0x7a>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <USBD_LL_SetupStage+0x4a>
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d008      	beq.n	8006e10 <USBD_LL_SetupStage+0x5a>
 8006dfe:	e017      	b.n	8006e30 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f9cb 	bl	80071a4 <USBD_StdDevReq>
      break;
 8006e0e:	e01a      	b.n	8006e46 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fa2d 	bl	8007278 <USBD_StdItfReq>
      break;
 8006e1e:	e012      	b.n	8006e46 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e26:	4619      	mov	r1, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fa6d 	bl	8007308 <USBD_StdEPReq>
      break;
 8006e2e:	e00a      	b.n	8006e46 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f001 fb3e 	bl	80084c0 <USBD_LL_StallEP>
      break;
 8006e44:	bf00      	nop
  }

  return USBD_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	607a      	str	r2, [r7, #4]
 8006e5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e5e:	7afb      	ldrb	r3, [r7, #11]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d14b      	bne.n	8006efc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e6a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d134      	bne.n	8006ee0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	68da      	ldr	r2, [r3, #12]
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d919      	bls.n	8006eb6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	68da      	ldr	r2, [r3, #12]
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	1ad2      	subs	r2, r2, r3
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	68da      	ldr	r2, [r3, #12]
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d203      	bcs.n	8006ea4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	e002      	b.n	8006eaa <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	461a      	mov	r2, r3
 8006eac:	6879      	ldr	r1, [r7, #4]
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 ff57 	bl	8007d62 <USBD_CtlContinueRx>
 8006eb4:	e038      	b.n	8006f28 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00a      	beq.n	8006ed8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d105      	bne.n	8006ed8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 ff54 	bl	8007d86 <USBD_CtlSendStatus>
 8006ede:	e023      	b.n	8006f28 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ee6:	2b05      	cmp	r3, #5
 8006ee8:	d11e      	bne.n	8006f28 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f001 fae3 	bl	80084c0 <USBD_LL_StallEP>
 8006efa:	e015      	b.n	8006f28 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00d      	beq.n	8006f24 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d108      	bne.n	8006f24 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	7afa      	ldrb	r2, [r7, #11]
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	4798      	blx	r3
 8006f22:	e001      	b.n	8006f28 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f24:	2302      	movs	r3, #2
 8006f26:	e000      	b.n	8006f2a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3718      	adds	r7, #24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b086      	sub	sp, #24
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	60f8      	str	r0, [r7, #12]
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	607a      	str	r2, [r7, #4]
 8006f3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f40:	7afb      	ldrb	r3, [r7, #11]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d17f      	bne.n	8007046 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	3314      	adds	r3, #20
 8006f4a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d15c      	bne.n	8007010 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d915      	bls.n	8006f8e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	1ad2      	subs	r2, r2, r3
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	461a      	mov	r2, r3
 8006f78:	6879      	ldr	r1, [r7, #4]
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 fec1 	bl	8007d02 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f80:	2300      	movs	r3, #0
 8006f82:	2200      	movs	r2, #0
 8006f84:	2100      	movs	r1, #0
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f001 fb46 	bl	8008618 <USBD_LL_PrepareReceive>
 8006f8c:	e04e      	b.n	800702c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	6912      	ldr	r2, [r2, #16]
 8006f96:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f9a:	fb01 f202 	mul.w	r2, r1, r2
 8006f9e:	1a9b      	subs	r3, r3, r2
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d11c      	bne.n	8006fde <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	689a      	ldr	r2, [r3, #8]
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d316      	bcc.n	8006fde <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d20f      	bcs.n	8006fde <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 fe9d 	bl	8007d02 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f001 fb1e 	bl	8008618 <USBD_LL_PrepareReceive>
 8006fdc:	e026      	b.n	800702c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00a      	beq.n	8007000 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d105      	bne.n	8007000 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007000:	2180      	movs	r1, #128	; 0x80
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f001 fa5c 	bl	80084c0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f000 fecf 	bl	8007dac <USBD_CtlReceiveStatus>
 800700e:	e00d      	b.n	800702c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007016:	2b04      	cmp	r3, #4
 8007018:	d004      	beq.n	8007024 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007020:	2b00      	cmp	r3, #0
 8007022:	d103      	bne.n	800702c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007024:	2180      	movs	r1, #128	; 0x80
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f001 fa4a 	bl	80084c0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007032:	2b01      	cmp	r3, #1
 8007034:	d11d      	bne.n	8007072 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f7ff fe81 	bl	8006d3e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007044:	e015      	b.n	8007072 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00d      	beq.n	800706e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007058:	2b03      	cmp	r3, #3
 800705a:	d108      	bne.n	800706e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	7afa      	ldrb	r2, [r7, #11]
 8007066:	4611      	mov	r1, r2
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	4798      	blx	r3
 800706c:	e001      	b.n	8007072 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800706e:	2302      	movs	r3, #2
 8007070:	e000      	b.n	8007074 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007084:	2340      	movs	r3, #64	; 0x40
 8007086:	2200      	movs	r2, #0
 8007088:	2100      	movs	r1, #0
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f001 f9d3 	bl	8008436 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2240      	movs	r2, #64	; 0x40
 800709c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070a0:	2340      	movs	r3, #64	; 0x40
 80070a2:	2200      	movs	r2, #0
 80070a4:	2180      	movs	r1, #128	; 0x80
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f001 f9c5 	bl	8008436 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2240      	movs	r2, #64	; 0x40
 80070b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d009      	beq.n	80070f4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	6852      	ldr	r2, [r2, #4]
 80070ec:	b2d2      	uxtb	r2, r2
 80070ee:	4611      	mov	r1, r2
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	4798      	blx	r3
  }

  return USBD_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
 8007106:	460b      	mov	r3, r1
 8007108:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	78fa      	ldrb	r2, [r7, #3]
 800710e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	bc80      	pop	{r7}
 800711a:	4770      	bx	lr

0800711c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2204      	movs	r2, #4
 8007134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	bc80      	pop	{r7}
 8007142:	4770      	bx	lr

08007144 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007152:	2b04      	cmp	r3, #4
 8007154:	d105      	bne.n	8007162 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	bc80      	pop	{r7}
 800716c:	4770      	bx	lr

0800716e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b082      	sub	sp, #8
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800717c:	2b03      	cmp	r3, #3
 800717e:	d10b      	bne.n	8007198 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d005      	beq.n	8007198 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
	...

080071a4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071ba:	2b40      	cmp	r3, #64	; 0x40
 80071bc:	d005      	beq.n	80071ca <USBD_StdDevReq+0x26>
 80071be:	2b40      	cmp	r3, #64	; 0x40
 80071c0:	d84f      	bhi.n	8007262 <USBD_StdDevReq+0xbe>
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d009      	beq.n	80071da <USBD_StdDevReq+0x36>
 80071c6:	2b20      	cmp	r3, #32
 80071c8:	d14b      	bne.n	8007262 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	4798      	blx	r3
      break;
 80071d8:	e048      	b.n	800726c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	785b      	ldrb	r3, [r3, #1]
 80071de:	2b09      	cmp	r3, #9
 80071e0:	d839      	bhi.n	8007256 <USBD_StdDevReq+0xb2>
 80071e2:	a201      	add	r2, pc, #4	; (adr r2, 80071e8 <USBD_StdDevReq+0x44>)
 80071e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e8:	08007239 	.word	0x08007239
 80071ec:	0800724d 	.word	0x0800724d
 80071f0:	08007257 	.word	0x08007257
 80071f4:	08007243 	.word	0x08007243
 80071f8:	08007257 	.word	0x08007257
 80071fc:	0800721b 	.word	0x0800721b
 8007200:	08007211 	.word	0x08007211
 8007204:	08007257 	.word	0x08007257
 8007208:	0800722f 	.word	0x0800722f
 800720c:	08007225 	.word	0x08007225
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f9dc 	bl	80075d0 <USBD_GetDescriptor>
          break;
 8007218:	e022      	b.n	8007260 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fb3f 	bl	80078a0 <USBD_SetAddress>
          break;
 8007222:	e01d      	b.n	8007260 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007224:	6839      	ldr	r1, [r7, #0]
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fb7e 	bl	8007928 <USBD_SetConfig>
          break;
 800722c:	e018      	b.n	8007260 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fc07 	bl	8007a44 <USBD_GetConfig>
          break;
 8007236:	e013      	b.n	8007260 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fc37 	bl	8007aae <USBD_GetStatus>
          break;
 8007240:	e00e      	b.n	8007260 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fc65 	bl	8007b14 <USBD_SetFeature>
          break;
 800724a:	e009      	b.n	8007260 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fc74 	bl	8007b3c <USBD_ClrFeature>
          break;
 8007254:	e004      	b.n	8007260 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fccc 	bl	8007bf6 <USBD_CtlError>
          break;
 800725e:	bf00      	nop
      }
      break;
 8007260:	e004      	b.n	800726c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fcc6 	bl	8007bf6 <USBD_CtlError>
      break;
 800726a:	bf00      	nop
  }

  return ret;
 800726c:	7bfb      	ldrb	r3, [r7, #15]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop

08007278 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800728e:	2b40      	cmp	r3, #64	; 0x40
 8007290:	d005      	beq.n	800729e <USBD_StdItfReq+0x26>
 8007292:	2b40      	cmp	r3, #64	; 0x40
 8007294:	d82e      	bhi.n	80072f4 <USBD_StdItfReq+0x7c>
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <USBD_StdItfReq+0x26>
 800729a:	2b20      	cmp	r3, #32
 800729c:	d12a      	bne.n	80072f4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a4:	3b01      	subs	r3, #1
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d81d      	bhi.n	80072e6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	889b      	ldrh	r3, [r3, #4]
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d813      	bhi.n	80072dc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	4798      	blx	r3
 80072c2:	4603      	mov	r3, r0
 80072c4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	88db      	ldrh	r3, [r3, #6]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d110      	bne.n	80072f0 <USBD_StdItfReq+0x78>
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10d      	bne.n	80072f0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fd56 	bl	8007d86 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072da:	e009      	b.n	80072f0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fc89 	bl	8007bf6 <USBD_CtlError>
          break;
 80072e4:	e004      	b.n	80072f0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fc84 	bl	8007bf6 <USBD_CtlError>
          break;
 80072ee:	e000      	b.n	80072f2 <USBD_StdItfReq+0x7a>
          break;
 80072f0:	bf00      	nop
      }
      break;
 80072f2:	e004      	b.n	80072fe <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fc7d 	bl	8007bf6 <USBD_CtlError>
      break;
 80072fc:	bf00      	nop
  }

  return USBD_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	889b      	ldrh	r3, [r3, #4]
 800731a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007324:	2b40      	cmp	r3, #64	; 0x40
 8007326:	d007      	beq.n	8007338 <USBD_StdEPReq+0x30>
 8007328:	2b40      	cmp	r3, #64	; 0x40
 800732a:	f200 8146 	bhi.w	80075ba <USBD_StdEPReq+0x2b2>
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00a      	beq.n	8007348 <USBD_StdEPReq+0x40>
 8007332:	2b20      	cmp	r3, #32
 8007334:	f040 8141 	bne.w	80075ba <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	6839      	ldr	r1, [r7, #0]
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	4798      	blx	r3
      break;
 8007346:	e13d      	b.n	80075c4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007350:	2b20      	cmp	r3, #32
 8007352:	d10a      	bne.n	800736a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	4798      	blx	r3
 8007362:	4603      	mov	r3, r0
 8007364:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007366:	7bfb      	ldrb	r3, [r7, #15]
 8007368:	e12d      	b.n	80075c6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	785b      	ldrb	r3, [r3, #1]
 800736e:	2b03      	cmp	r3, #3
 8007370:	d007      	beq.n	8007382 <USBD_StdEPReq+0x7a>
 8007372:	2b03      	cmp	r3, #3
 8007374:	f300 811b 	bgt.w	80075ae <USBD_StdEPReq+0x2a6>
 8007378:	2b00      	cmp	r3, #0
 800737a:	d072      	beq.n	8007462 <USBD_StdEPReq+0x15a>
 800737c:	2b01      	cmp	r3, #1
 800737e:	d03a      	beq.n	80073f6 <USBD_StdEPReq+0xee>
 8007380:	e115      	b.n	80075ae <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007388:	2b02      	cmp	r3, #2
 800738a:	d002      	beq.n	8007392 <USBD_StdEPReq+0x8a>
 800738c:	2b03      	cmp	r3, #3
 800738e:	d015      	beq.n	80073bc <USBD_StdEPReq+0xb4>
 8007390:	e02b      	b.n	80073ea <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00c      	beq.n	80073b2 <USBD_StdEPReq+0xaa>
 8007398:	7bbb      	ldrb	r3, [r7, #14]
 800739a:	2b80      	cmp	r3, #128	; 0x80
 800739c:	d009      	beq.n	80073b2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800739e:	7bbb      	ldrb	r3, [r7, #14]
 80073a0:	4619      	mov	r1, r3
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f001 f88c 	bl	80084c0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80073a8:	2180      	movs	r1, #128	; 0x80
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 f888 	bl	80084c0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073b0:	e020      	b.n	80073f4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fc1e 	bl	8007bf6 <USBD_CtlError>
              break;
 80073ba:	e01b      	b.n	80073f4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	885b      	ldrh	r3, [r3, #2]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10e      	bne.n	80073e2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00b      	beq.n	80073e2 <USBD_StdEPReq+0xda>
 80073ca:	7bbb      	ldrb	r3, [r7, #14]
 80073cc:	2b80      	cmp	r3, #128	; 0x80
 80073ce:	d008      	beq.n	80073e2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	88db      	ldrh	r3, [r3, #6]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d104      	bne.n	80073e2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f001 f86f 	bl	80084c0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fccf 	bl	8007d86 <USBD_CtlSendStatus>

              break;
 80073e8:	e004      	b.n	80073f4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fc02 	bl	8007bf6 <USBD_CtlError>
              break;
 80073f2:	bf00      	nop
          }
          break;
 80073f4:	e0e0      	b.n	80075b8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d002      	beq.n	8007406 <USBD_StdEPReq+0xfe>
 8007400:	2b03      	cmp	r3, #3
 8007402:	d015      	beq.n	8007430 <USBD_StdEPReq+0x128>
 8007404:	e026      	b.n	8007454 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007406:	7bbb      	ldrb	r3, [r7, #14]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00c      	beq.n	8007426 <USBD_StdEPReq+0x11e>
 800740c:	7bbb      	ldrb	r3, [r7, #14]
 800740e:	2b80      	cmp	r3, #128	; 0x80
 8007410:	d009      	beq.n	8007426 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f001 f852 	bl	80084c0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800741c:	2180      	movs	r1, #128	; 0x80
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f001 f84e 	bl	80084c0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007424:	e01c      	b.n	8007460 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007426:	6839      	ldr	r1, [r7, #0]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fbe4 	bl	8007bf6 <USBD_CtlError>
              break;
 800742e:	e017      	b.n	8007460 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	885b      	ldrh	r3, [r3, #2]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d112      	bne.n	800745e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800743e:	2b00      	cmp	r3, #0
 8007440:	d004      	beq.n	800744c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007442:	7bbb      	ldrb	r3, [r7, #14]
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f001 f859 	bl	80084fe <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fc9a 	bl	8007d86 <USBD_CtlSendStatus>
              }
              break;
 8007452:	e004      	b.n	800745e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fbcd 	bl	8007bf6 <USBD_CtlError>
              break;
 800745c:	e000      	b.n	8007460 <USBD_StdEPReq+0x158>
              break;
 800745e:	bf00      	nop
          }
          break;
 8007460:	e0aa      	b.n	80075b8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007468:	2b02      	cmp	r3, #2
 800746a:	d002      	beq.n	8007472 <USBD_StdEPReq+0x16a>
 800746c:	2b03      	cmp	r3, #3
 800746e:	d032      	beq.n	80074d6 <USBD_StdEPReq+0x1ce>
 8007470:	e097      	b.n	80075a2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007472:	7bbb      	ldrb	r3, [r7, #14]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d007      	beq.n	8007488 <USBD_StdEPReq+0x180>
 8007478:	7bbb      	ldrb	r3, [r7, #14]
 800747a:	2b80      	cmp	r3, #128	; 0x80
 800747c:	d004      	beq.n	8007488 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fbb8 	bl	8007bf6 <USBD_CtlError>
                break;
 8007486:	e091      	b.n	80075ac <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800748c:	2b00      	cmp	r3, #0
 800748e:	da0b      	bge.n	80074a8 <USBD_StdEPReq+0x1a0>
 8007490:	7bbb      	ldrb	r3, [r7, #14]
 8007492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007496:	4613      	mov	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	3310      	adds	r3, #16
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	4413      	add	r3, r2
 80074a4:	3304      	adds	r3, #4
 80074a6:	e00b      	b.n	80074c0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074ae:	4613      	mov	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	4413      	add	r3, r2
 80074be:	3304      	adds	r3, #4
 80074c0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2200      	movs	r2, #0
 80074c6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2202      	movs	r2, #2
 80074cc:	4619      	mov	r1, r3
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fbfb 	bl	8007cca <USBD_CtlSendData>
              break;
 80074d4:	e06a      	b.n	80075ac <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	da11      	bge.n	8007502 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074de:	7bbb      	ldrb	r3, [r7, #14]
 80074e0:	f003 020f 	and.w	r2, r3, #15
 80074e4:	6879      	ldr	r1, [r7, #4]
 80074e6:	4613      	mov	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	440b      	add	r3, r1
 80074f0:	3318      	adds	r3, #24
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d117      	bne.n	8007528 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fb7b 	bl	8007bf6 <USBD_CtlError>
                  break;
 8007500:	e054      	b.n	80075ac <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007502:	7bbb      	ldrb	r3, [r7, #14]
 8007504:	f003 020f 	and.w	r2, r3, #15
 8007508:	6879      	ldr	r1, [r7, #4]
 800750a:	4613      	mov	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	440b      	add	r3, r1
 8007514:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d104      	bne.n	8007528 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800751e:	6839      	ldr	r1, [r7, #0]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fb68 	bl	8007bf6 <USBD_CtlError>
                  break;
 8007526:	e041      	b.n	80075ac <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007528:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800752c:	2b00      	cmp	r3, #0
 800752e:	da0b      	bge.n	8007548 <USBD_StdEPReq+0x240>
 8007530:	7bbb      	ldrb	r3, [r7, #14]
 8007532:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007536:	4613      	mov	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4413      	add	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	3310      	adds	r3, #16
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	4413      	add	r3, r2
 8007544:	3304      	adds	r3, #4
 8007546:	e00b      	b.n	8007560 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800754e:	4613      	mov	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	4413      	add	r3, r2
 800755e:	3304      	adds	r3, #4
 8007560:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007562:	7bbb      	ldrb	r3, [r7, #14]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d002      	beq.n	800756e <USBD_StdEPReq+0x266>
 8007568:	7bbb      	ldrb	r3, [r7, #14]
 800756a:	2b80      	cmp	r3, #128	; 0x80
 800756c:	d103      	bne.n	8007576 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2200      	movs	r2, #0
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	e00e      	b.n	8007594 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007576:	7bbb      	ldrb	r3, [r7, #14]
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 ffde 	bl	800853c <USBD_LL_IsStallEP>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2201      	movs	r2, #1
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	e002      	b.n	8007594 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2200      	movs	r2, #0
 8007592:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2202      	movs	r2, #2
 8007598:	4619      	mov	r1, r3
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fb95 	bl	8007cca <USBD_CtlSendData>
              break;
 80075a0:	e004      	b.n	80075ac <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fb26 	bl	8007bf6 <USBD_CtlError>
              break;
 80075aa:	bf00      	nop
          }
          break;
 80075ac:	e004      	b.n	80075b8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fb20 	bl	8007bf6 <USBD_CtlError>
          break;
 80075b6:	bf00      	nop
      }
      break;
 80075b8:	e004      	b.n	80075c4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fb1a 	bl	8007bf6 <USBD_CtlError>
      break;
 80075c2:	bf00      	nop
  }

  return ret;
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
	...

080075d0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075da:	2300      	movs	r3, #0
 80075dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075de:	2300      	movs	r3, #0
 80075e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	885b      	ldrh	r3, [r3, #2]
 80075ea:	0a1b      	lsrs	r3, r3, #8
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	3b01      	subs	r3, #1
 80075f0:	2b06      	cmp	r3, #6
 80075f2:	f200 8128 	bhi.w	8007846 <USBD_GetDescriptor+0x276>
 80075f6:	a201      	add	r2, pc, #4	; (adr r2, 80075fc <USBD_GetDescriptor+0x2c>)
 80075f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fc:	08007619 	.word	0x08007619
 8007600:	08007631 	.word	0x08007631
 8007604:	08007671 	.word	0x08007671
 8007608:	08007847 	.word	0x08007847
 800760c:	08007847 	.word	0x08007847
 8007610:	080077e7 	.word	0x080077e7
 8007614:	08007813 	.word	0x08007813
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	7c12      	ldrb	r2, [r2, #16]
 8007624:	f107 0108 	add.w	r1, r7, #8
 8007628:	4610      	mov	r0, r2
 800762a:	4798      	blx	r3
 800762c:	60f8      	str	r0, [r7, #12]
      break;
 800762e:	e112      	b.n	8007856 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	7c1b      	ldrb	r3, [r3, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10d      	bne.n	8007654 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800763e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007640:	f107 0208 	add.w	r2, r7, #8
 8007644:	4610      	mov	r0, r2
 8007646:	4798      	blx	r3
 8007648:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3301      	adds	r3, #1
 800764e:	2202      	movs	r2, #2
 8007650:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007652:	e100      	b.n	8007856 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800765a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765c:	f107 0208 	add.w	r2, r7, #8
 8007660:	4610      	mov	r0, r2
 8007662:	4798      	blx	r3
 8007664:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	3301      	adds	r3, #1
 800766a:	2202      	movs	r2, #2
 800766c:	701a      	strb	r2, [r3, #0]
      break;
 800766e:	e0f2      	b.n	8007856 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	885b      	ldrh	r3, [r3, #2]
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b05      	cmp	r3, #5
 8007678:	f200 80ac 	bhi.w	80077d4 <USBD_GetDescriptor+0x204>
 800767c:	a201      	add	r2, pc, #4	; (adr r2, 8007684 <USBD_GetDescriptor+0xb4>)
 800767e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007682:	bf00      	nop
 8007684:	0800769d 	.word	0x0800769d
 8007688:	080076d1 	.word	0x080076d1
 800768c:	08007705 	.word	0x08007705
 8007690:	08007739 	.word	0x08007739
 8007694:	0800776d 	.word	0x0800776d
 8007698:	080077a1 	.word	0x080077a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00b      	beq.n	80076c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	7c12      	ldrb	r2, [r2, #16]
 80076b4:	f107 0108 	add.w	r1, r7, #8
 80076b8:	4610      	mov	r0, r2
 80076ba:	4798      	blx	r3
 80076bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076be:	e091      	b.n	80077e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076c0:	6839      	ldr	r1, [r7, #0]
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fa97 	bl	8007bf6 <USBD_CtlError>
            err++;
 80076c8:	7afb      	ldrb	r3, [r7, #11]
 80076ca:	3301      	adds	r3, #1
 80076cc:	72fb      	strb	r3, [r7, #11]
          break;
 80076ce:	e089      	b.n	80077e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00b      	beq.n	80076f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	7c12      	ldrb	r2, [r2, #16]
 80076e8:	f107 0108 	add.w	r1, r7, #8
 80076ec:	4610      	mov	r0, r2
 80076ee:	4798      	blx	r3
 80076f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076f2:	e077      	b.n	80077e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fa7d 	bl	8007bf6 <USBD_CtlError>
            err++;
 80076fc:	7afb      	ldrb	r3, [r7, #11]
 80076fe:	3301      	adds	r3, #1
 8007700:	72fb      	strb	r3, [r7, #11]
          break;
 8007702:	e06f      	b.n	80077e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00b      	beq.n	8007728 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	7c12      	ldrb	r2, [r2, #16]
 800771c:	f107 0108 	add.w	r1, r7, #8
 8007720:	4610      	mov	r0, r2
 8007722:	4798      	blx	r3
 8007724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007726:	e05d      	b.n	80077e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fa63 	bl	8007bf6 <USBD_CtlError>
            err++;
 8007730:	7afb      	ldrb	r3, [r7, #11]
 8007732:	3301      	adds	r3, #1
 8007734:	72fb      	strb	r3, [r7, #11]
          break;
 8007736:	e055      	b.n	80077e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00b      	beq.n	800775c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	7c12      	ldrb	r2, [r2, #16]
 8007750:	f107 0108 	add.w	r1, r7, #8
 8007754:	4610      	mov	r0, r2
 8007756:	4798      	blx	r3
 8007758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800775a:	e043      	b.n	80077e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fa49 	bl	8007bf6 <USBD_CtlError>
            err++;
 8007764:	7afb      	ldrb	r3, [r7, #11]
 8007766:	3301      	adds	r3, #1
 8007768:	72fb      	strb	r3, [r7, #11]
          break;
 800776a:	e03b      	b.n	80077e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00b      	beq.n	8007790 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	7c12      	ldrb	r2, [r2, #16]
 8007784:	f107 0108 	add.w	r1, r7, #8
 8007788:	4610      	mov	r0, r2
 800778a:	4798      	blx	r3
 800778c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800778e:	e029      	b.n	80077e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fa2f 	bl	8007bf6 <USBD_CtlError>
            err++;
 8007798:	7afb      	ldrb	r3, [r7, #11]
 800779a:	3301      	adds	r3, #1
 800779c:	72fb      	strb	r3, [r7, #11]
          break;
 800779e:	e021      	b.n	80077e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00b      	beq.n	80077c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	7c12      	ldrb	r2, [r2, #16]
 80077b8:	f107 0108 	add.w	r1, r7, #8
 80077bc:	4610      	mov	r0, r2
 80077be:	4798      	blx	r3
 80077c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077c2:	e00f      	b.n	80077e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fa15 	bl	8007bf6 <USBD_CtlError>
            err++;
 80077cc:	7afb      	ldrb	r3, [r7, #11]
 80077ce:	3301      	adds	r3, #1
 80077d0:	72fb      	strb	r3, [r7, #11]
          break;
 80077d2:	e007      	b.n	80077e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fa0d 	bl	8007bf6 <USBD_CtlError>
          err++;
 80077dc:	7afb      	ldrb	r3, [r7, #11]
 80077de:	3301      	adds	r3, #1
 80077e0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80077e2:	e038      	b.n	8007856 <USBD_GetDescriptor+0x286>
 80077e4:	e037      	b.n	8007856 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	7c1b      	ldrb	r3, [r3, #16]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d109      	bne.n	8007802 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f6:	f107 0208 	add.w	r2, r7, #8
 80077fa:	4610      	mov	r0, r2
 80077fc:	4798      	blx	r3
 80077fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007800:	e029      	b.n	8007856 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f9f6 	bl	8007bf6 <USBD_CtlError>
        err++;
 800780a:	7afb      	ldrb	r3, [r7, #11]
 800780c:	3301      	adds	r3, #1
 800780e:	72fb      	strb	r3, [r7, #11]
      break;
 8007810:	e021      	b.n	8007856 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	7c1b      	ldrb	r3, [r3, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10d      	bne.n	8007836 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007822:	f107 0208 	add.w	r2, r7, #8
 8007826:	4610      	mov	r0, r2
 8007828:	4798      	blx	r3
 800782a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	3301      	adds	r3, #1
 8007830:	2207      	movs	r2, #7
 8007832:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007834:	e00f      	b.n	8007856 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f9dc 	bl	8007bf6 <USBD_CtlError>
        err++;
 800783e:	7afb      	ldrb	r3, [r7, #11]
 8007840:	3301      	adds	r3, #1
 8007842:	72fb      	strb	r3, [r7, #11]
      break;
 8007844:	e007      	b.n	8007856 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007846:	6839      	ldr	r1, [r7, #0]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f9d4 	bl	8007bf6 <USBD_CtlError>
      err++;
 800784e:	7afb      	ldrb	r3, [r7, #11]
 8007850:	3301      	adds	r3, #1
 8007852:	72fb      	strb	r3, [r7, #11]
      break;
 8007854:	bf00      	nop
  }

  if (err != 0U)
 8007856:	7afb      	ldrb	r3, [r7, #11]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d11c      	bne.n	8007896 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800785c:	893b      	ldrh	r3, [r7, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d011      	beq.n	8007886 <USBD_GetDescriptor+0x2b6>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	88db      	ldrh	r3, [r3, #6]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00d      	beq.n	8007886 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	88da      	ldrh	r2, [r3, #6]
 800786e:	893b      	ldrh	r3, [r7, #8]
 8007870:	4293      	cmp	r3, r2
 8007872:	bf28      	it	cs
 8007874:	4613      	movcs	r3, r2
 8007876:	b29b      	uxth	r3, r3
 8007878:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800787a:	893b      	ldrh	r3, [r7, #8]
 800787c:	461a      	mov	r2, r3
 800787e:	68f9      	ldr	r1, [r7, #12]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fa22 	bl	8007cca <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	88db      	ldrh	r3, [r3, #6]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d104      	bne.n	8007898 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fa79 	bl	8007d86 <USBD_CtlSendStatus>
 8007894:	e000      	b.n	8007898 <USBD_GetDescriptor+0x2c8>
    return;
 8007896:	bf00      	nop
    }
  }
}
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop

080078a0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	889b      	ldrh	r3, [r3, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d130      	bne.n	8007914 <USBD_SetAddress+0x74>
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	88db      	ldrh	r3, [r3, #6]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d12c      	bne.n	8007914 <USBD_SetAddress+0x74>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	885b      	ldrh	r3, [r3, #2]
 80078be:	2b7f      	cmp	r3, #127	; 0x7f
 80078c0:	d828      	bhi.n	8007914 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	885b      	ldrh	r3, [r3, #2]
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d4:	2b03      	cmp	r3, #3
 80078d6:	d104      	bne.n	80078e2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f98b 	bl	8007bf6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078e0:	e01d      	b.n	800791e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	7bfa      	ldrb	r2, [r7, #15]
 80078e6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078ea:	7bfb      	ldrb	r3, [r7, #15]
 80078ec:	4619      	mov	r1, r3
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fe50 	bl	8008594 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fa46 	bl	8007d86 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d004      	beq.n	800790a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007908:	e009      	b.n	800791e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007912:	e004      	b.n	800791e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f96d 	bl	8007bf6 <USBD_CtlError>
  }
}
 800791c:	bf00      	nop
 800791e:	bf00      	nop
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
	...

08007928 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	885b      	ldrh	r3, [r3, #2]
 8007936:	b2da      	uxtb	r2, r3
 8007938:	4b41      	ldr	r3, [pc, #260]	; (8007a40 <USBD_SetConfig+0x118>)
 800793a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800793c:	4b40      	ldr	r3, [pc, #256]	; (8007a40 <USBD_SetConfig+0x118>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d904      	bls.n	800794e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f955 	bl	8007bf6 <USBD_CtlError>
 800794c:	e075      	b.n	8007a3a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007954:	2b02      	cmp	r3, #2
 8007956:	d002      	beq.n	800795e <USBD_SetConfig+0x36>
 8007958:	2b03      	cmp	r3, #3
 800795a:	d023      	beq.n	80079a4 <USBD_SetConfig+0x7c>
 800795c:	e062      	b.n	8007a24 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800795e:	4b38      	ldr	r3, [pc, #224]	; (8007a40 <USBD_SetConfig+0x118>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d01a      	beq.n	800799c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007966:	4b36      	ldr	r3, [pc, #216]	; (8007a40 <USBD_SetConfig+0x118>)
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	461a      	mov	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2203      	movs	r2, #3
 8007974:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007978:	4b31      	ldr	r3, [pc, #196]	; (8007a40 <USBD_SetConfig+0x118>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7ff f9e7 	bl	8006d52 <USBD_SetClassConfig>
 8007984:	4603      	mov	r3, r0
 8007986:	2b02      	cmp	r3, #2
 8007988:	d104      	bne.n	8007994 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800798a:	6839      	ldr	r1, [r7, #0]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f932 	bl	8007bf6 <USBD_CtlError>
            return;
 8007992:	e052      	b.n	8007a3a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f9f6 	bl	8007d86 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800799a:	e04e      	b.n	8007a3a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f9f2 	bl	8007d86 <USBD_CtlSendStatus>
        break;
 80079a2:	e04a      	b.n	8007a3a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80079a4:	4b26      	ldr	r3, [pc, #152]	; (8007a40 <USBD_SetConfig+0x118>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d112      	bne.n	80079d2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80079b4:	4b22      	ldr	r3, [pc, #136]	; (8007a40 <USBD_SetConfig+0x118>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	461a      	mov	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80079be:	4b20      	ldr	r3, [pc, #128]	; (8007a40 <USBD_SetConfig+0x118>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	4619      	mov	r1, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff f9e3 	bl	8006d90 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f9db 	bl	8007d86 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079d0:	e033      	b.n	8007a3a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80079d2:	4b1b      	ldr	r3, [pc, #108]	; (8007a40 <USBD_SetConfig+0x118>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	461a      	mov	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d01d      	beq.n	8007a1c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff f9d1 	bl	8006d90 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80079ee:	4b14      	ldr	r3, [pc, #80]	; (8007a40 <USBD_SetConfig+0x118>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	461a      	mov	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80079f8:	4b11      	ldr	r3, [pc, #68]	; (8007a40 <USBD_SetConfig+0x118>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7ff f9a7 	bl	8006d52 <USBD_SetClassConfig>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d104      	bne.n	8007a14 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007a0a:	6839      	ldr	r1, [r7, #0]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f8f2 	bl	8007bf6 <USBD_CtlError>
            return;
 8007a12:	e012      	b.n	8007a3a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f9b6 	bl	8007d86 <USBD_CtlSendStatus>
        break;
 8007a1a:	e00e      	b.n	8007a3a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f9b2 	bl	8007d86 <USBD_CtlSendStatus>
        break;
 8007a22:	e00a      	b.n	8007a3a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f8e5 	bl	8007bf6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007a2c:	4b04      	ldr	r3, [pc, #16]	; (8007a40 <USBD_SetConfig+0x118>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	4619      	mov	r1, r3
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f7ff f9ac 	bl	8006d90 <USBD_ClrClassConfig>
        break;
 8007a38:	bf00      	nop
    }
  }
}
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	2000028c 	.word	0x2000028c

08007a44 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	88db      	ldrh	r3, [r3, #6]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d004      	beq.n	8007a60 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f8cc 	bl	8007bf6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a5e:	e022      	b.n	8007aa6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	dc02      	bgt.n	8007a70 <USBD_GetConfig+0x2c>
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	dc03      	bgt.n	8007a76 <USBD_GetConfig+0x32>
 8007a6e:	e015      	b.n	8007a9c <USBD_GetConfig+0x58>
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d00b      	beq.n	8007a8c <USBD_GetConfig+0x48>
 8007a74:	e012      	b.n	8007a9c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	3308      	adds	r3, #8
 8007a80:	2201      	movs	r2, #1
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f920 	bl	8007cca <USBD_CtlSendData>
        break;
 8007a8a:	e00c      	b.n	8007aa6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	3304      	adds	r3, #4
 8007a90:	2201      	movs	r2, #1
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f918 	bl	8007cca <USBD_CtlSendData>
        break;
 8007a9a:	e004      	b.n	8007aa6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f8a9 	bl	8007bf6 <USBD_CtlError>
        break;
 8007aa4:	bf00      	nop
}
 8007aa6:	bf00      	nop
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b082      	sub	sp, #8
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
 8007ab6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d81e      	bhi.n	8007b02 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	88db      	ldrh	r3, [r3, #6]
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d004      	beq.n	8007ad6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f891 	bl	8007bf6 <USBD_CtlError>
        break;
 8007ad4:	e01a      	b.n	8007b0c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d005      	beq.n	8007af2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	f043 0202 	orr.w	r2, r3, #2
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	330c      	adds	r3, #12
 8007af6:	2202      	movs	r2, #2
 8007af8:	4619      	mov	r1, r3
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f8e5 	bl	8007cca <USBD_CtlSendData>
      break;
 8007b00:	e004      	b.n	8007b0c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f876 	bl	8007bf6 <USBD_CtlError>
      break;
 8007b0a:	bf00      	nop
  }
}
 8007b0c:	bf00      	nop
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	885b      	ldrh	r3, [r3, #2]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d106      	bne.n	8007b34 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f929 	bl	8007d86 <USBD_CtlSendStatus>
  }
}
 8007b34:	bf00      	nop
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d80b      	bhi.n	8007b6a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	885b      	ldrh	r3, [r3, #2]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d10c      	bne.n	8007b74 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f90f 	bl	8007d86 <USBD_CtlSendStatus>
      }
      break;
 8007b68:	e004      	b.n	8007b74 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f842 	bl	8007bf6 <USBD_CtlError>
      break;
 8007b72:	e000      	b.n	8007b76 <USBD_ClrFeature+0x3a>
      break;
 8007b74:	bf00      	nop
  }
}
 8007b76:	bf00      	nop
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b083      	sub	sp, #12
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	781a      	ldrb	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	785a      	ldrb	r2, [r3, #1]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	3302      	adds	r3, #2
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	3303      	adds	r3, #3
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	021b      	lsls	r3, r3, #8
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	4413      	add	r3, r2
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	3305      	adds	r3, #5
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	021b      	lsls	r3, r3, #8
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	4413      	add	r3, r2
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	3306      	adds	r3, #6
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	3307      	adds	r3, #7
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	021b      	lsls	r3, r3, #8
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	4413      	add	r3, r2
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	80da      	strh	r2, [r3, #6]

}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bc80      	pop	{r7}
 8007bf4:	4770      	bx	lr

08007bf6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b082      	sub	sp, #8
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007c00:	2180      	movs	r1, #128	; 0x80
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fc5c 	bl	80084c0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007c08:	2100      	movs	r1, #0
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fc58 	bl	80084c0 <USBD_LL_StallEP>
}
 8007c10:	bf00      	nop
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c24:	2300      	movs	r3, #0
 8007c26:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d032      	beq.n	8007c94 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f000 f834 	bl	8007c9c <USBD_GetLen>
 8007c34:	4603      	mov	r3, r0
 8007c36:	3301      	adds	r3, #1
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	005b      	lsls	r3, r3, #1
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c42:	7dfb      	ldrb	r3, [r7, #23]
 8007c44:	1c5a      	adds	r2, r3, #1
 8007c46:	75fa      	strb	r2, [r7, #23]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	7812      	ldrb	r2, [r2, #0]
 8007c52:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c54:	7dfb      	ldrb	r3, [r7, #23]
 8007c56:	1c5a      	adds	r2, r3, #1
 8007c58:	75fa      	strb	r2, [r7, #23]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	4413      	add	r3, r2
 8007c60:	2203      	movs	r2, #3
 8007c62:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c64:	e012      	b.n	8007c8c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	1c5a      	adds	r2, r3, #1
 8007c6a:	60fa      	str	r2, [r7, #12]
 8007c6c:	7dfa      	ldrb	r2, [r7, #23]
 8007c6e:	1c51      	adds	r1, r2, #1
 8007c70:	75f9      	strb	r1, [r7, #23]
 8007c72:	4611      	mov	r1, r2
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	440a      	add	r2, r1
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
 8007c7e:	1c5a      	adds	r2, r3, #1
 8007c80:	75fa      	strb	r2, [r7, #23]
 8007c82:	461a      	mov	r2, r3
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	4413      	add	r3, r2
 8007c88:	2200      	movs	r2, #0
 8007c8a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1e8      	bne.n	8007c66 <USBD_GetString+0x4e>
    }
  }
}
 8007c94:	bf00      	nop
 8007c96:	3718      	adds	r7, #24
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007ca8:	e005      	b.n	8007cb6 <USBD_GetLen+0x1a>
  {
    len++;
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
 8007cac:	3301      	adds	r3, #1
 8007cae:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1f5      	bne.n	8007caa <USBD_GetLen+0xe>
  }

  return len;
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bc80      	pop	{r7}
 8007cc8:	4770      	bx	lr

08007cca <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b084      	sub	sp, #16
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007ce0:	88fa      	ldrh	r2, [r7, #6]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007ce6:	88fa      	ldrh	r2, [r7, #6]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cec:	88fb      	ldrh	r3, [r7, #6]
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 fc6d 	bl	80085d2 <USBD_LL_Transmit>

  return USBD_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	60f8      	str	r0, [r7, #12]
 8007d0a:	60b9      	str	r1, [r7, #8]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d10:	88fb      	ldrh	r3, [r7, #6]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	2100      	movs	r1, #0
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f000 fc5b 	bl	80085d2 <USBD_LL_Transmit>

  return USBD_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b084      	sub	sp, #16
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	60f8      	str	r0, [r7, #12]
 8007d2e:	60b9      	str	r1, [r7, #8]
 8007d30:	4613      	mov	r3, r2
 8007d32:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2203      	movs	r2, #3
 8007d38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007d3c:	88fa      	ldrh	r2, [r7, #6]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007d44:	88fa      	ldrh	r2, [r7, #6]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d4c:	88fb      	ldrh	r3, [r7, #6]
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	2100      	movs	r1, #0
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 fc60 	bl	8008618 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	60f8      	str	r0, [r7, #12]
 8007d6a:	60b9      	str	r1, [r7, #8]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d70:	88fb      	ldrh	r3, [r7, #6]
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	2100      	movs	r1, #0
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f000 fc4e 	bl	8008618 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b082      	sub	sp, #8
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2204      	movs	r2, #4
 8007d92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d96:	2300      	movs	r3, #0
 8007d98:	2200      	movs	r2, #0
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fc18 	bl	80085d2 <USBD_LL_Transmit>

  return USBD_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2205      	movs	r2, #5
 8007db8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fc28 	bl	8008618 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
	...

08007dd4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	4912      	ldr	r1, [pc, #72]	; (8007e24 <MX_USB_DEVICE_Init+0x50>)
 8007ddc:	4812      	ldr	r0, [pc, #72]	; (8007e28 <MX_USB_DEVICE_Init+0x54>)
 8007dde:	f7fe ff5e 	bl	8006c9e <USBD_Init>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d001      	beq.n	8007dec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007de8:	f7f8 fd18 	bl	800081c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007dec:	490f      	ldr	r1, [pc, #60]	; (8007e2c <MX_USB_DEVICE_Init+0x58>)
 8007dee:	480e      	ldr	r0, [pc, #56]	; (8007e28 <MX_USB_DEVICE_Init+0x54>)
 8007df0:	f7fe ff80 	bl	8006cf4 <USBD_RegisterClass>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007dfa:	f7f8 fd0f 	bl	800081c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007dfe:	490c      	ldr	r1, [pc, #48]	; (8007e30 <MX_USB_DEVICE_Init+0x5c>)
 8007e00:	4809      	ldr	r0, [pc, #36]	; (8007e28 <MX_USB_DEVICE_Init+0x54>)
 8007e02:	f7fe feb1 	bl	8006b68 <USBD_CDC_RegisterInterface>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e0c:	f7f8 fd06 	bl	800081c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e10:	4805      	ldr	r0, [pc, #20]	; (8007e28 <MX_USB_DEVICE_Init+0x54>)
 8007e12:	f7fe ff88 	bl	8006d26 <USBD_Start>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e1c:	f7f8 fcfe 	bl	800081c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e20:	bf00      	nop
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	2000012c 	.word	0x2000012c
 8007e28:	20000290 	.word	0x20000290
 8007e2c:	20000018 	.word	0x20000018
 8007e30:	2000011c 	.word	0x2000011c

08007e34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e38:	2200      	movs	r2, #0
 8007e3a:	4905      	ldr	r1, [pc, #20]	; (8007e50 <CDC_Init_FS+0x1c>)
 8007e3c:	4805      	ldr	r0, [pc, #20]	; (8007e54 <CDC_Init_FS+0x20>)
 8007e3e:	f7fe fea9 	bl	8006b94 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e42:	4905      	ldr	r1, [pc, #20]	; (8007e58 <CDC_Init_FS+0x24>)
 8007e44:	4803      	ldr	r0, [pc, #12]	; (8007e54 <CDC_Init_FS+0x20>)
 8007e46:	f7fe febe 	bl	8006bc6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e4a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	2000093c 	.word	0x2000093c
 8007e54:	20000290 	.word	0x20000290
 8007e58:	20000554 	.word	0x20000554

08007e5c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e60:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bc80      	pop	{r7}
 8007e68:	4770      	bx	lr
	...

08007e6c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	4603      	mov	r3, r0
 8007e74:	6039      	str	r1, [r7, #0]
 8007e76:	71fb      	strb	r3, [r7, #7]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007e7c:	79fb      	ldrb	r3, [r7, #7]
 8007e7e:	2b23      	cmp	r3, #35	; 0x23
 8007e80:	d84a      	bhi.n	8007f18 <CDC_Control_FS+0xac>
 8007e82:	a201      	add	r2, pc, #4	; (adr r2, 8007e88 <CDC_Control_FS+0x1c>)
 8007e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e88:	08007f19 	.word	0x08007f19
 8007e8c:	08007f19 	.word	0x08007f19
 8007e90:	08007f19 	.word	0x08007f19
 8007e94:	08007f19 	.word	0x08007f19
 8007e98:	08007f19 	.word	0x08007f19
 8007e9c:	08007f19 	.word	0x08007f19
 8007ea0:	08007f19 	.word	0x08007f19
 8007ea4:	08007f19 	.word	0x08007f19
 8007ea8:	08007f19 	.word	0x08007f19
 8007eac:	08007f19 	.word	0x08007f19
 8007eb0:	08007f19 	.word	0x08007f19
 8007eb4:	08007f19 	.word	0x08007f19
 8007eb8:	08007f19 	.word	0x08007f19
 8007ebc:	08007f19 	.word	0x08007f19
 8007ec0:	08007f19 	.word	0x08007f19
 8007ec4:	08007f19 	.word	0x08007f19
 8007ec8:	08007f19 	.word	0x08007f19
 8007ecc:	08007f19 	.word	0x08007f19
 8007ed0:	08007f19 	.word	0x08007f19
 8007ed4:	08007f19 	.word	0x08007f19
 8007ed8:	08007f19 	.word	0x08007f19
 8007edc:	08007f19 	.word	0x08007f19
 8007ee0:	08007f19 	.word	0x08007f19
 8007ee4:	08007f19 	.word	0x08007f19
 8007ee8:	08007f19 	.word	0x08007f19
 8007eec:	08007f19 	.word	0x08007f19
 8007ef0:	08007f19 	.word	0x08007f19
 8007ef4:	08007f19 	.word	0x08007f19
 8007ef8:	08007f19 	.word	0x08007f19
 8007efc:	08007f19 	.word	0x08007f19
 8007f00:	08007f19 	.word	0x08007f19
 8007f04:	08007f19 	.word	0x08007f19
 8007f08:	08007f19 	.word	0x08007f19
 8007f0c:	08007f19 	.word	0x08007f19
 8007f10:	08007f19 	.word	0x08007f19
 8007f14:	08007f19 	.word	0x08007f19
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f18:	bf00      	nop
  }

  return (USBD_OK);
 8007f1a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bc80      	pop	{r7}
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop

08007f28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f32:	6879      	ldr	r1, [r7, #4]
 8007f34:	4805      	ldr	r0, [pc, #20]	; (8007f4c <CDC_Receive_FS+0x24>)
 8007f36:	f7fe fe46 	bl	8006bc6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f3a:	4804      	ldr	r0, [pc, #16]	; (8007f4c <CDC_Receive_FS+0x24>)
 8007f3c:	f7fe fe85 	bl	8006c4a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007f40:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20000290 	.word	0x20000290

08007f50 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007f60:	4b0d      	ldr	r3, [pc, #52]	; (8007f98 <CDC_Transmit_FS+0x48>)
 8007f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e00b      	b.n	8007f8e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007f76:	887b      	ldrh	r3, [r7, #2]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	6879      	ldr	r1, [r7, #4]
 8007f7c:	4806      	ldr	r0, [pc, #24]	; (8007f98 <CDC_Transmit_FS+0x48>)
 8007f7e:	f7fe fe09 	bl	8006b94 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007f82:	4805      	ldr	r0, [pc, #20]	; (8007f98 <CDC_Transmit_FS+0x48>)
 8007f84:	f7fe fe32 	bl	8006bec <USBD_CDC_TransmitPacket>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20000290 	.word	0x20000290

08007f9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	6039      	str	r1, [r7, #0]
 8007fa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2212      	movs	r2, #18
 8007fac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007fae:	4b03      	ldr	r3, [pc, #12]	; (8007fbc <USBD_FS_DeviceDescriptor+0x20>)
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bc80      	pop	{r7}
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	20000148 	.word	0x20000148

08007fc0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	6039      	str	r1, [r7, #0]
 8007fca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	2204      	movs	r2, #4
 8007fd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007fd2:	4b03      	ldr	r3, [pc, #12]	; (8007fe0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bc80      	pop	{r7}
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	2000015c 	.word	0x2000015c

08007fe4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	4603      	mov	r3, r0
 8007fec:	6039      	str	r1, [r7, #0]
 8007fee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ff0:	79fb      	ldrb	r3, [r7, #7]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d105      	bne.n	8008002 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	4907      	ldr	r1, [pc, #28]	; (8008018 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ffa:	4808      	ldr	r0, [pc, #32]	; (800801c <USBD_FS_ProductStrDescriptor+0x38>)
 8007ffc:	f7ff fe0c 	bl	8007c18 <USBD_GetString>
 8008000:	e004      	b.n	800800c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008002:	683a      	ldr	r2, [r7, #0]
 8008004:	4904      	ldr	r1, [pc, #16]	; (8008018 <USBD_FS_ProductStrDescriptor+0x34>)
 8008006:	4805      	ldr	r0, [pc, #20]	; (800801c <USBD_FS_ProductStrDescriptor+0x38>)
 8008008:	f7ff fe06 	bl	8007c18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800800c:	4b02      	ldr	r3, [pc, #8]	; (8008018 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800800e:	4618      	mov	r0, r3
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	20000d24 	.word	0x20000d24
 800801c:	0800878c 	.word	0x0800878c

08008020 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	4603      	mov	r3, r0
 8008028:	6039      	str	r1, [r7, #0]
 800802a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	4904      	ldr	r1, [pc, #16]	; (8008040 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008030:	4804      	ldr	r0, [pc, #16]	; (8008044 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008032:	f7ff fdf1 	bl	8007c18 <USBD_GetString>
  return USBD_StrDesc;
 8008036:	4b02      	ldr	r3, [pc, #8]	; (8008040 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008038:	4618      	mov	r0, r3
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	20000d24 	.word	0x20000d24
 8008044:	080087a0 	.word	0x080087a0

08008048 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	4603      	mov	r3, r0
 8008050:	6039      	str	r1, [r7, #0]
 8008052:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	221a      	movs	r2, #26
 8008058:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800805a:	f000 f843 	bl	80080e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800805e:	4b02      	ldr	r3, [pc, #8]	; (8008068 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008060:	4618      	mov	r0, r3
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	20000160 	.word	0x20000160

0800806c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	4603      	mov	r3, r0
 8008074:	6039      	str	r1, [r7, #0]
 8008076:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008078:	79fb      	ldrb	r3, [r7, #7]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d105      	bne.n	800808a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800807e:	683a      	ldr	r2, [r7, #0]
 8008080:	4907      	ldr	r1, [pc, #28]	; (80080a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008082:	4808      	ldr	r0, [pc, #32]	; (80080a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008084:	f7ff fdc8 	bl	8007c18 <USBD_GetString>
 8008088:	e004      	b.n	8008094 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	4904      	ldr	r1, [pc, #16]	; (80080a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800808e:	4805      	ldr	r0, [pc, #20]	; (80080a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008090:	f7ff fdc2 	bl	8007c18 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008094:	4b02      	ldr	r3, [pc, #8]	; (80080a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008096:	4618      	mov	r0, r3
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	20000d24 	.word	0x20000d24
 80080a4:	080087b4 	.word	0x080087b4

080080a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	4603      	mov	r3, r0
 80080b0:	6039      	str	r1, [r7, #0]
 80080b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080b4:	79fb      	ldrb	r3, [r7, #7]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d105      	bne.n	80080c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	4907      	ldr	r1, [pc, #28]	; (80080dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080be:	4808      	ldr	r0, [pc, #32]	; (80080e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080c0:	f7ff fdaa 	bl	8007c18 <USBD_GetString>
 80080c4:	e004      	b.n	80080d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	4904      	ldr	r1, [pc, #16]	; (80080dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080ca:	4805      	ldr	r0, [pc, #20]	; (80080e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080cc:	f7ff fda4 	bl	8007c18 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080d0:	4b02      	ldr	r3, [pc, #8]	; (80080dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20000d24 	.word	0x20000d24
 80080e0:	080087c0 	.word	0x080087c0

080080e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80080ea:	4b0f      	ldr	r3, [pc, #60]	; (8008128 <Get_SerialNum+0x44>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80080f0:	4b0e      	ldr	r3, [pc, #56]	; (800812c <Get_SerialNum+0x48>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80080f6:	4b0e      	ldr	r3, [pc, #56]	; (8008130 <Get_SerialNum+0x4c>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4413      	add	r3, r2
 8008102:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d009      	beq.n	800811e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800810a:	2208      	movs	r2, #8
 800810c:	4909      	ldr	r1, [pc, #36]	; (8008134 <Get_SerialNum+0x50>)
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 f814 	bl	800813c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008114:	2204      	movs	r2, #4
 8008116:	4908      	ldr	r1, [pc, #32]	; (8008138 <Get_SerialNum+0x54>)
 8008118:	68b8      	ldr	r0, [r7, #8]
 800811a:	f000 f80f 	bl	800813c <IntToUnicode>
  }
}
 800811e:	bf00      	nop
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	1ffff7e8 	.word	0x1ffff7e8
 800812c:	1ffff7ec 	.word	0x1ffff7ec
 8008130:	1ffff7f0 	.word	0x1ffff7f0
 8008134:	20000162 	.word	0x20000162
 8008138:	20000172 	.word	0x20000172

0800813c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800813c:	b480      	push	{r7}
 800813e:	b087      	sub	sp, #28
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	4613      	mov	r3, r2
 8008148:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800814a:	2300      	movs	r3, #0
 800814c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800814e:	2300      	movs	r3, #0
 8008150:	75fb      	strb	r3, [r7, #23]
 8008152:	e027      	b.n	80081a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	0f1b      	lsrs	r3, r3, #28
 8008158:	2b09      	cmp	r3, #9
 800815a:	d80b      	bhi.n	8008174 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	0f1b      	lsrs	r3, r3, #28
 8008160:	b2da      	uxtb	r2, r3
 8008162:	7dfb      	ldrb	r3, [r7, #23]
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	4619      	mov	r1, r3
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	440b      	add	r3, r1
 800816c:	3230      	adds	r2, #48	; 0x30
 800816e:	b2d2      	uxtb	r2, r2
 8008170:	701a      	strb	r2, [r3, #0]
 8008172:	e00a      	b.n	800818a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	0f1b      	lsrs	r3, r3, #28
 8008178:	b2da      	uxtb	r2, r3
 800817a:	7dfb      	ldrb	r3, [r7, #23]
 800817c:	005b      	lsls	r3, r3, #1
 800817e:	4619      	mov	r1, r3
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	440b      	add	r3, r1
 8008184:	3237      	adds	r2, #55	; 0x37
 8008186:	b2d2      	uxtb	r2, r2
 8008188:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	011b      	lsls	r3, r3, #4
 800818e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008190:	7dfb      	ldrb	r3, [r7, #23]
 8008192:	005b      	lsls	r3, r3, #1
 8008194:	3301      	adds	r3, #1
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	4413      	add	r3, r2
 800819a:	2200      	movs	r2, #0
 800819c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800819e:	7dfb      	ldrb	r3, [r7, #23]
 80081a0:	3301      	adds	r3, #1
 80081a2:	75fb      	strb	r3, [r7, #23]
 80081a4:	7dfa      	ldrb	r2, [r7, #23]
 80081a6:	79fb      	ldrb	r3, [r7, #7]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d3d3      	bcc.n	8008154 <IntToUnicode+0x18>
  }
}
 80081ac:	bf00      	nop
 80081ae:	bf00      	nop
 80081b0:	371c      	adds	r7, #28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bc80      	pop	{r7}
 80081b6:	4770      	bx	lr

080081b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a11      	ldr	r2, [pc, #68]	; (800820c <HAL_PCD_MspInit+0x54>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d11b      	bne.n	8008202 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80081ca:	4b11      	ldr	r3, [pc, #68]	; (8008210 <HAL_PCD_MspInit+0x58>)
 80081cc:	69db      	ldr	r3, [r3, #28]
 80081ce:	4a10      	ldr	r2, [pc, #64]	; (8008210 <HAL_PCD_MspInit+0x58>)
 80081d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80081d4:	61d3      	str	r3, [r2, #28]
 80081d6:	4b0e      	ldr	r3, [pc, #56]	; (8008210 <HAL_PCD_MspInit+0x58>)
 80081d8:	69db      	ldr	r3, [r3, #28]
 80081da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081de:	60fb      	str	r3, [r7, #12]
 80081e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80081e2:	2200      	movs	r2, #0
 80081e4:	2100      	movs	r1, #0
 80081e6:	2013      	movs	r0, #19
 80081e8:	f7f9 f93d 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80081ec:	2013      	movs	r0, #19
 80081ee:	f7f9 f956 	bl	800149e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80081f2:	2200      	movs	r2, #0
 80081f4:	2100      	movs	r1, #0
 80081f6:	2014      	movs	r0, #20
 80081f8:	f7f9 f935 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80081fc:	2014      	movs	r0, #20
 80081fe:	f7f9 f94e 	bl	800149e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008202:	bf00      	nop
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	40005c00 	.word	0x40005c00
 8008210:	40021000 	.word	0x40021000

08008214 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008228:	4619      	mov	r1, r3
 800822a:	4610      	mov	r0, r2
 800822c:	f7fe fdc3 	bl	8006db6 <USBD_LL_SetupStage>
}
 8008230:	bf00      	nop
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800824a:	78fa      	ldrb	r2, [r7, #3]
 800824c:	6879      	ldr	r1, [r7, #4]
 800824e:	4613      	mov	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	4413      	add	r3, r2
 8008254:	00db      	lsls	r3, r3, #3
 8008256:	440b      	add	r3, r1
 8008258:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	78fb      	ldrb	r3, [r7, #3]
 8008260:	4619      	mov	r1, r3
 8008262:	f7fe fdf5 	bl	8006e50 <USBD_LL_DataOutStage>
}
 8008266:	bf00      	nop
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b082      	sub	sp, #8
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	460b      	mov	r3, r1
 8008278:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008280:	78fa      	ldrb	r2, [r7, #3]
 8008282:	6879      	ldr	r1, [r7, #4]
 8008284:	4613      	mov	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	00db      	lsls	r3, r3, #3
 800828c:	440b      	add	r3, r1
 800828e:	333c      	adds	r3, #60	; 0x3c
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	78fb      	ldrb	r3, [r7, #3]
 8008294:	4619      	mov	r1, r3
 8008296:	f7fe fe4c 	bl	8006f32 <USBD_LL_DataInStage>
}
 800829a:	bf00      	nop
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b082      	sub	sp, #8
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7fe ff5c 	bl	800716e <USBD_LL_SOF>
}
 80082b6:	bf00      	nop
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b084      	sub	sp, #16
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80082c6:	2301      	movs	r3, #1
 80082c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d001      	beq.n	80082d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80082d2:	f7f8 faa3 	bl	800081c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80082dc:	7bfa      	ldrb	r2, [r7, #15]
 80082de:	4611      	mov	r1, r2
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fe ff0c 	bl	80070fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fe fec5 	bl	800707c <USBD_LL_Reset>
}
 80082f2:	bf00      	nop
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
	...

080082fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800830a:	4618      	mov	r0, r3
 800830c:	f7fe ff06 	bl	800711c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d005      	beq.n	8008324 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008318:	4b04      	ldr	r3, [pc, #16]	; (800832c <HAL_PCD_SuspendCallback+0x30>)
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	4a03      	ldr	r2, [pc, #12]	; (800832c <HAL_PCD_SuspendCallback+0x30>)
 800831e:	f043 0306 	orr.w	r3, r3, #6
 8008322:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008324:	bf00      	nop
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	e000ed00 	.word	0xe000ed00

08008330 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800833e:	4618      	mov	r0, r3
 8008340:	f7fe ff00 	bl	8007144 <USBD_LL_Resume>
}
 8008344:	bf00      	nop
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008354:	4a28      	ldr	r2, [pc, #160]	; (80083f8 <USBD_LL_Init+0xac>)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a26      	ldr	r2, [pc, #152]	; (80083f8 <USBD_LL_Init+0xac>)
 8008360:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008364:	4b24      	ldr	r3, [pc, #144]	; (80083f8 <USBD_LL_Init+0xac>)
 8008366:	4a25      	ldr	r2, [pc, #148]	; (80083fc <USBD_LL_Init+0xb0>)
 8008368:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800836a:	4b23      	ldr	r3, [pc, #140]	; (80083f8 <USBD_LL_Init+0xac>)
 800836c:	2208      	movs	r2, #8
 800836e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008370:	4b21      	ldr	r3, [pc, #132]	; (80083f8 <USBD_LL_Init+0xac>)
 8008372:	2202      	movs	r2, #2
 8008374:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008376:	4b20      	ldr	r3, [pc, #128]	; (80083f8 <USBD_LL_Init+0xac>)
 8008378:	2200      	movs	r2, #0
 800837a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800837c:	4b1e      	ldr	r3, [pc, #120]	; (80083f8 <USBD_LL_Init+0xac>)
 800837e:	2200      	movs	r2, #0
 8008380:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008382:	4b1d      	ldr	r3, [pc, #116]	; (80083f8 <USBD_LL_Init+0xac>)
 8008384:	2200      	movs	r2, #0
 8008386:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008388:	481b      	ldr	r0, [pc, #108]	; (80083f8 <USBD_LL_Init+0xac>)
 800838a:	f7f9 fc15 	bl	8001bb8 <HAL_PCD_Init>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008394:	f7f8 fa42 	bl	800081c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800839e:	2318      	movs	r3, #24
 80083a0:	2200      	movs	r2, #0
 80083a2:	2100      	movs	r1, #0
 80083a4:	f7fb f934 	bl	8003610 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083ae:	2358      	movs	r3, #88	; 0x58
 80083b0:	2200      	movs	r2, #0
 80083b2:	2180      	movs	r1, #128	; 0x80
 80083b4:	f7fb f92c 	bl	8003610 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083be:	23c0      	movs	r3, #192	; 0xc0
 80083c0:	2200      	movs	r2, #0
 80083c2:	2181      	movs	r1, #129	; 0x81
 80083c4:	f7fb f924 	bl	8003610 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083ce:	f44f 7388 	mov.w	r3, #272	; 0x110
 80083d2:	2200      	movs	r2, #0
 80083d4:	2101      	movs	r1, #1
 80083d6:	f7fb f91b 	bl	8003610 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083e4:	2200      	movs	r2, #0
 80083e6:	2182      	movs	r1, #130	; 0x82
 80083e8:	f7fb f912 	bl	8003610 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20000f24 	.word	0x20000f24
 80083fc:	40005c00 	.word	0x40005c00

08008400 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008408:	2300      	movs	r3, #0
 800840a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800840c:	2300      	movs	r3, #0
 800840e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008416:	4618      	mov	r0, r3
 8008418:	f7f9 fccd 	bl	8001db6 <HAL_PCD_Start>
 800841c:	4603      	mov	r3, r0
 800841e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	4618      	mov	r0, r3
 8008424:	f000 f94e 	bl	80086c4 <USBD_Get_USB_Status>
 8008428:	4603      	mov	r3, r0
 800842a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800842c:	7bbb      	ldrb	r3, [r7, #14]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b084      	sub	sp, #16
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	4608      	mov	r0, r1
 8008440:	4611      	mov	r1, r2
 8008442:	461a      	mov	r2, r3
 8008444:	4603      	mov	r3, r0
 8008446:	70fb      	strb	r3, [r7, #3]
 8008448:	460b      	mov	r3, r1
 800844a:	70bb      	strb	r3, [r7, #2]
 800844c:	4613      	mov	r3, r2
 800844e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800845e:	78bb      	ldrb	r3, [r7, #2]
 8008460:	883a      	ldrh	r2, [r7, #0]
 8008462:	78f9      	ldrb	r1, [r7, #3]
 8008464:	f7f9 fe22 	bl	80020ac <HAL_PCD_EP_Open>
 8008468:	4603      	mov	r3, r0
 800846a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	4618      	mov	r0, r3
 8008470:	f000 f928 	bl	80086c4 <USBD_Get_USB_Status>
 8008474:	4603      	mov	r3, r0
 8008476:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008478:	7bbb      	ldrb	r3, [r7, #14]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	460b      	mov	r3, r1
 800848c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800848e:	2300      	movs	r3, #0
 8008490:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008492:	2300      	movs	r3, #0
 8008494:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800849c:	78fa      	ldrb	r2, [r7, #3]
 800849e:	4611      	mov	r1, r2
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7f9 fe60 	bl	8002166 <HAL_PCD_EP_Close>
 80084a6:	4603      	mov	r3, r0
 80084a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 f909 	bl	80086c4 <USBD_Get_USB_Status>
 80084b2:	4603      	mov	r3, r0
 80084b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	460b      	mov	r3, r1
 80084ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084da:	78fa      	ldrb	r2, [r7, #3]
 80084dc:	4611      	mov	r1, r2
 80084de:	4618      	mov	r0, r3
 80084e0:	f7f9 ff08 	bl	80022f4 <HAL_PCD_EP_SetStall>
 80084e4:	4603      	mov	r3, r0
 80084e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084e8:	7bfb      	ldrb	r3, [r7, #15]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 f8ea 	bl	80086c4 <USBD_Get_USB_Status>
 80084f0:	4603      	mov	r3, r0
 80084f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b084      	sub	sp, #16
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	460b      	mov	r3, r1
 8008508:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008518:	78fa      	ldrb	r2, [r7, #3]
 800851a:	4611      	mov	r1, r2
 800851c:	4618      	mov	r0, r3
 800851e:	f7f9 ff49 	bl	80023b4 <HAL_PCD_EP_ClrStall>
 8008522:	4603      	mov	r3, r0
 8008524:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008526:	7bfb      	ldrb	r3, [r7, #15]
 8008528:	4618      	mov	r0, r3
 800852a:	f000 f8cb 	bl	80086c4 <USBD_Get_USB_Status>
 800852e:	4603      	mov	r3, r0
 8008530:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008532:	7bbb      	ldrb	r3, [r7, #14]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800854e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008554:	2b00      	cmp	r3, #0
 8008556:	da0c      	bge.n	8008572 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008558:	78fb      	ldrb	r3, [r7, #3]
 800855a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800855e:	68f9      	ldr	r1, [r7, #12]
 8008560:	1c5a      	adds	r2, r3, #1
 8008562:	4613      	mov	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	00db      	lsls	r3, r3, #3
 800856a:	440b      	add	r3, r1
 800856c:	3302      	adds	r3, #2
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	e00b      	b.n	800858a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008572:	78fb      	ldrb	r3, [r7, #3]
 8008574:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008578:	68f9      	ldr	r1, [r7, #12]
 800857a:	4613      	mov	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	00db      	lsls	r3, r3, #3
 8008582:	440b      	add	r3, r1
 8008584:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008588:	781b      	ldrb	r3, [r3, #0]
  }
}
 800858a:	4618      	mov	r0, r3
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	bc80      	pop	{r7}
 8008592:	4770      	bx	lr

08008594 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	460b      	mov	r3, r1
 800859e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085a4:	2300      	movs	r3, #0
 80085a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085ae:	78fa      	ldrb	r2, [r7, #3]
 80085b0:	4611      	mov	r1, r2
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7f9 fd55 	bl	8002062 <HAL_PCD_SetAddress>
 80085b8:	4603      	mov	r3, r0
 80085ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 f880 	bl	80086c4 <USBD_Get_USB_Status>
 80085c4:	4603      	mov	r3, r0
 80085c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b086      	sub	sp, #24
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	60f8      	str	r0, [r7, #12]
 80085da:	607a      	str	r2, [r7, #4]
 80085dc:	461a      	mov	r2, r3
 80085de:	460b      	mov	r3, r1
 80085e0:	72fb      	strb	r3, [r7, #11]
 80085e2:	4613      	mov	r3, r2
 80085e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085f4:	893b      	ldrh	r3, [r7, #8]
 80085f6:	7af9      	ldrb	r1, [r7, #11]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	f7f9 fe44 	bl	8002286 <HAL_PCD_EP_Transmit>
 80085fe:	4603      	mov	r3, r0
 8008600:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008602:	7dfb      	ldrb	r3, [r7, #23]
 8008604:	4618      	mov	r0, r3
 8008606:	f000 f85d 	bl	80086c4 <USBD_Get_USB_Status>
 800860a:	4603      	mov	r3, r0
 800860c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800860e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3718      	adds	r7, #24
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	607a      	str	r2, [r7, #4]
 8008622:	461a      	mov	r2, r3
 8008624:	460b      	mov	r3, r1
 8008626:	72fb      	strb	r3, [r7, #11]
 8008628:	4613      	mov	r3, r2
 800862a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800862c:	2300      	movs	r3, #0
 800862e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800863a:	893b      	ldrh	r3, [r7, #8]
 800863c:	7af9      	ldrb	r1, [r7, #11]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	f7f9 fdd9 	bl	80021f6 <HAL_PCD_EP_Receive>
 8008644:	4603      	mov	r3, r0
 8008646:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008648:	7dfb      	ldrb	r3, [r7, #23]
 800864a:	4618      	mov	r0, r3
 800864c:	f000 f83a 	bl	80086c4 <USBD_Get_USB_Status>
 8008650:	4603      	mov	r3, r0
 8008652:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008654:	7dbb      	ldrb	r3, [r7, #22]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b082      	sub	sp, #8
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	460b      	mov	r3, r1
 8008668:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008670:	78fa      	ldrb	r2, [r7, #3]
 8008672:	4611      	mov	r1, r2
 8008674:	4618      	mov	r0, r3
 8008676:	f7f9 fdef 	bl	8002258 <HAL_PCD_EP_GetRxCount>
 800867a:	4603      	mov	r3, r0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800868c:	4b02      	ldr	r3, [pc, #8]	; (8008698 <USBD_static_malloc+0x14>)
}
 800868e:	4618      	mov	r0, r3
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	bc80      	pop	{r7}
 8008696:	4770      	bx	lr
 8008698:	20001214 	.word	0x20001214

0800869c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]

}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bc80      	pop	{r7}
 80086ac:	4770      	bx	lr

080086ae <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	460b      	mov	r3, r1
 80086b8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80086ba:	bf00      	nop
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	bc80      	pop	{r7}
 80086c2:	4770      	bx	lr

080086c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	4603      	mov	r3, r0
 80086cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80086d2:	79fb      	ldrb	r3, [r7, #7]
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	d817      	bhi.n	8008708 <USBD_Get_USB_Status+0x44>
 80086d8:	a201      	add	r2, pc, #4	; (adr r2, 80086e0 <USBD_Get_USB_Status+0x1c>)
 80086da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086de:	bf00      	nop
 80086e0:	080086f1 	.word	0x080086f1
 80086e4:	080086f7 	.word	0x080086f7
 80086e8:	080086fd 	.word	0x080086fd
 80086ec:	08008703 	.word	0x08008703
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80086f0:	2300      	movs	r3, #0
 80086f2:	73fb      	strb	r3, [r7, #15]
    break;
 80086f4:	e00b      	b.n	800870e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80086f6:	2302      	movs	r3, #2
 80086f8:	73fb      	strb	r3, [r7, #15]
    break;
 80086fa:	e008      	b.n	800870e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80086fc:	2301      	movs	r3, #1
 80086fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008700:	e005      	b.n	800870e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008702:	2302      	movs	r3, #2
 8008704:	73fb      	strb	r3, [r7, #15]
    break;
 8008706:	e002      	b.n	800870e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008708:	2302      	movs	r3, #2
 800870a:	73fb      	strb	r3, [r7, #15]
    break;
 800870c:	bf00      	nop
  }
  return usb_status;
 800870e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	bc80      	pop	{r7}
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop

0800871c <__libc_init_array>:
 800871c:	b570      	push	{r4, r5, r6, lr}
 800871e:	2600      	movs	r6, #0
 8008720:	4d0c      	ldr	r5, [pc, #48]	; (8008754 <__libc_init_array+0x38>)
 8008722:	4c0d      	ldr	r4, [pc, #52]	; (8008758 <__libc_init_array+0x3c>)
 8008724:	1b64      	subs	r4, r4, r5
 8008726:	10a4      	asrs	r4, r4, #2
 8008728:	42a6      	cmp	r6, r4
 800872a:	d109      	bne.n	8008740 <__libc_init_array+0x24>
 800872c:	f000 f822 	bl	8008774 <_init>
 8008730:	2600      	movs	r6, #0
 8008732:	4d0a      	ldr	r5, [pc, #40]	; (800875c <__libc_init_array+0x40>)
 8008734:	4c0a      	ldr	r4, [pc, #40]	; (8008760 <__libc_init_array+0x44>)
 8008736:	1b64      	subs	r4, r4, r5
 8008738:	10a4      	asrs	r4, r4, #2
 800873a:	42a6      	cmp	r6, r4
 800873c:	d105      	bne.n	800874a <__libc_init_array+0x2e>
 800873e:	bd70      	pop	{r4, r5, r6, pc}
 8008740:	f855 3b04 	ldr.w	r3, [r5], #4
 8008744:	4798      	blx	r3
 8008746:	3601      	adds	r6, #1
 8008748:	e7ee      	b.n	8008728 <__libc_init_array+0xc>
 800874a:	f855 3b04 	ldr.w	r3, [r5], #4
 800874e:	4798      	blx	r3
 8008750:	3601      	adds	r6, #1
 8008752:	e7f2      	b.n	800873a <__libc_init_array+0x1e>
 8008754:	080087f4 	.word	0x080087f4
 8008758:	080087f4 	.word	0x080087f4
 800875c:	080087f4 	.word	0x080087f4
 8008760:	080087f8 	.word	0x080087f8

08008764 <memset>:
 8008764:	4603      	mov	r3, r0
 8008766:	4402      	add	r2, r0
 8008768:	4293      	cmp	r3, r2
 800876a:	d100      	bne.n	800876e <memset+0xa>
 800876c:	4770      	bx	lr
 800876e:	f803 1b01 	strb.w	r1, [r3], #1
 8008772:	e7f9      	b.n	8008768 <memset+0x4>

08008774 <_init>:
 8008774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008776:	bf00      	nop
 8008778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800877a:	bc08      	pop	{r3}
 800877c:	469e      	mov	lr, r3
 800877e:	4770      	bx	lr

08008780 <_fini>:
 8008780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008782:	bf00      	nop
 8008784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008786:	bc08      	pop	{r3}
 8008788:	469e      	mov	lr, r3
 800878a:	4770      	bx	lr
